{
  "openapi": "3.0.4",
  "info": {
    "title": "Open API, powered by Buildium",
    "description": "\r\n# Introduction\r\n### Welcome!\r\n\r\nWelcome to Buildium’s API—a powerful, RESTful programming interface that lets you leverage valuable Buildium data.\r\n\r\nUsing HTTP requests, you can create integrations with applications that specialize in accounting, lead tracking, and more. Enjoy greater flexibility, transparency, and control over your business!\r\n\r\n\r\n### What's in this Guide?\r\n\r\nThis guide is full of simple, easy-to-follow instructions that’ll help you use Buildium’s API like a pro.\r\n\r\nTopics include:\r\n\r\n* choosing the right resources for your use case\r\n* making HTTP requests to any resource\r\n* understanding data and response codes\r\n\r\n<br />\r\n\r\n# Getting Started\r\nExcited to get going? We’ll walk you through the setup process.\r\n>  **Note:** To take advantage of the Buildium Open API you must have a <a target=\"_blank\" href=\"https://www.buildium.com/pricing/\">**Premium Subscription**</a>.\r\n\r\n## Account Configuration\r\nBefore you can use Buildium’s API, you’ll need to make some tweaks to your account settings.\r\n\r\n<br />\r\n\r\n### Enabling the API\r\nIn order to start creating your keys and making requests, you’ll need to enable the API.\r\n\r\n\r\n>  **Tip:** You’ll need an administrator user role with access to ***Application settings*** to set things up properly.\r\n\r\n<br />\r\n\r\n​\t**Let's Begin!**\r\n\r\n1. Sign in to your [Buildium](https://signin.managebuilding.com/manager/public/authentication/login?ReturnUrl=%2Fmanager%2F) account from your browser.\r\n\r\n2. Open the ***Settings*** menu and click ***Application settings***.\r\n\r\n3. Under ***System preferences***, click ***Api settings***. A modal will appear.\r\n\r\n4. Click the ***Open API*** toggle to turn it on. Then click ***Save***.\r\n\r\n<video width=\"100%\" autoplay loop muted>\r\n  <source src=\"enable_open_api.mp4\" type=\"video/mp4\" />\r\n</video>\r\n\r\n\r\nCongratulations! Your account's enabled. Now, you’re ready to start managing API keys.\r\n<br />\r\n<br />\r\nIf you are having issues enabling the API within your account you can submit a [Support](#section/API-Overview/Support) request for assistance.\r\n\r\n<br />\r\n\r\n\r\n## API Keys\r\nAccount-level API keys authenticate every request and keep things secure.\r\n\r\nAPI keys have two components: a “client ID” and a “secret”.\r\n\r\n* **Client IDs** are similar to usernames. They’re used to identify your Buildium account and are safe to share.\r\n* **Secrets** are similar to passwords. They must be kept confidential.\r\n\r\nWhenever you make a request, you’ll need the API key’s client ID and secret. If you forget it, make a mistake, or try to use information that’s linked to a deleted key, the API will return a `401` response code.\r\n\r\n>  **Tip:** We compiled a list of best practices that detail how securely store API keys. [Give it a read](#section/Getting-Started/Keeping-API-Keys-Safe)!\r\n\r\n## Creating API Keys\r\nNow that the Open APi is enabled, you’ll be able to create API keys. You’re almost there!\r\n\r\n>  **Tip:** You’ll need an administrator user role to complete this step, too.\r\n\r\n<br />\r\n\r\n**How to create an API key**\r\n\r\n1. Sign in to your [Buildium](https://signin.managebuilding.com/manager/public/authentication/login?ReturnUrl=%2Fmanager%2F) account from your browser.\r\n\r\n2. Open the ***Settings*** menu and click ***Developer Tools***. The page will open automatically.\r\n\r\n3. Click the ***Create API Key*** button. A modal will appear.\r\n\r\n4. Enter a clear, memorable name and description for your API key. It’ll make it easier to locate the right key when you make a request. Once finished, click **Next**.\r\n\r\n5. Now, choose which pieces of Buildium data you want this API key to have access to by marking the corresponding checkboxes. Once finished, click **Next**.\r\n\r\n6. You successfully created an API key!\r\n\r\n> **Important:** This is your only chance to record the secret. Make sure it’s stored somewhere secure! If it’s forgotten, you’ll need to delete this key and start from scratch.\r\n\r\n<br />\r\n\r\n<video width=\"100%\" autoplay loop muted>\r\n  <source src=\"generate_open_api_key.mp4\" type=\"video/mp4\" />\r\n</video>\r\n\r\n<br />\r\n\r\nYou have now successfully created an API key and have everything you need to  send requests to the Buildium API!\r\n\r\nBefore moving on to [making your first request](#section/Getting-Started/How-to-Make-a-Request) please review [Keeping your Keys Safe](#section/Getting-Started/Keeping-your-Keys-Safe) for an overview on securely storing your API keys.  \r\n<br />\r\nIf you are having issues creating API keys you can submit a [Support](#section/API-Overview/Support) request for assistance.\r\n<br />\r\n\r\n\r\n## Keeping API Keys Safe\r\n\r\nBased on their permissions, API keys could have full access to your account’s Buildium data. It’s important that you only grant access to trusted applications, securely record secrets, and consider a password manager to stay organized.\r\n\r\n\r\n### Recommended Practices\r\n\r\n- Avoid hard-coding client IDs and secrets inside source files.\r\n- Avoid storing client IDs and secrets in any files that may be committed to source control, particularly cloud-based source control platforms.\r\n- Apply restrictions to client IDs and secrets shared with your staff. You can restrict a key to particular Buildium entities or to read-only access (GET resources only).\r\n- Avoid sharing client IDs and secrets across public, insecure platforms.\r\n- Establish a process to regularly recreate your client IDs and secrets from your Buildium account.\r\n  <br />\r\n  <br />\r\n\r\n## How to Make a Request\r\n\r\nYou’ve done a great job setting up your account, Now, we’ll walk you through how to access your data. It’s very straightforward and should only take a few minutes!\r\n\r\n\r\n> **Tip:** Looking for the right HTTP client? If you’re just getting started, we recommend Postman.\r\n\r\n\r\n<br />\r\n\r\n### Let's Get Started!\r\n\r\n#### Step 1: Get Your API Key\r\n\r\nIf you haven't yet done so, obtain your API key client ID and secret from your Buildium account. Your API key is how the Buildium API authenticates requests and ensures only you can access your data.\r\n\r\nSee [Getting Started](#section/Getting-Started) for a deeper dive into enabling the API and creating keys.\r\n\r\n#### Step 2: Install a HTTP client\r\nThe Buildium API supports any standard HTTP client. If you're looking for a user-friendly HTTP client application, we recommend [Postman](https://www.postman.com/product/api-client) – it allows you to access the Buildium API without writing code. We’ll use Postman for our example below to demonstrate sending an API request.\r\n\r\n\r\n#### Step 3: Make a Sample Request\r\n\r\nLet's dive in and make a simple request to get all the [Rental Properties](#operation/RentalsExternalApi_GetAllRentals) in your account. This will confirm your connectivity to our platform and validate the keys you created on our website. Simply follow the instructions below.\r\n\r\n\r\n1. Open the Postman application.\r\n2. Open the *verb* menu and select **GET**.\r\n3. Enter the request endpoint in the field next to GET.\r\n  - Here’s the endpoint to get all rentals: https://api.buildium.com/v1/rentals.\r\n4. To authenticate the request, enter your `client ID` and `secret`  respectively in these request headers:\r\n  - `x-buildium-client-id`\r\n  - `x-buildium-client-secret`\r\n  - Your full request should look similar to the image below.<kbd><img src=\"request_example.png\" /></kbd>\r\n\r\n<br />\r\n\r\n5. Review the parameters of your request on last time. Once finished, click **Send**.\r\n\r\n6. If successful, you should see a JSON response and a `200` HTTP status code. Voilà! You've connected to the Buildium API.<kbd><img src=\"response_example.png\" /></kbd>\r\n\r\n<br />\r\nYou now have the knowledge required to make requests for any of our resources.\r\n\r\nIf you've received an error response please review the JSON response message for a description of how to resolve the issue. You can also see more information about HTTP status codes in the [Response Codes](#section/API-Overview/Response-Codes) section. If you are still having trouble making a request after reviewing these sections please submit a [Support](#section/API-Overview/Support) request.\r\n\r\n<br />\r\n\r\n# API Overview\r\nThe Buildium API is built upon standard REST conventions. It's designed to use consistent resource-oriented URLs, accept and return JSON-encoded messages, and use standard HTTP status codes and verbs.\r\n\r\n## Base URL\r\nThe base URL for production environment API requests is: `https://api.buildium.com/`\r\n\r\nThe base URL for sandbox environment API requests is: `https://apisandbox.buildium.com/`\r\n\r\nIn order to ensure all requests and responses are secure between the API consumer and Buildium servers, requests must be made using the `https` protocol. Any requests not made with the `https` protocol will be refused by the Buildium API platform.\r\n\r\n> **Note:** URL paths are case-sensitive to stay consistent with common REST standards. If your request doesn’t align with the documented URL path, you’ll receive a `404` response code reminding you of this constraint.\r\n\r\n## API Versioning\r\nThe Buildium API is version controlled. Versioning ensures backwards-incompatible changes to the API don’t impact any existing integrations.\r\n\r\nBuildium uses only a major version nomenclature to manage changes. The current version of the Buildium API is version 1. By specifying a version in the resource request URL, you'll get expected responses regardless of future changes to the API. Here's an example of calling version 1 of the retrieve all rentals resource:\r\n\r\n`https://api.buildium.com/v1/rentals`\r\n\r\nAny request submitted without the version in the URL path will result in a `404` error response code.\r\n\r\n### Releasing Changes to the API\r\nThe Buildium API will continue to evolve to ensure it meets the needs of our customers. Changes will be defined as either backwards-compatible or backwards-incompatible.\r\n\r\nWe’ll always provide advance notice for all API releases–regardless of the type of modifications being made.\r\n\r\n#### Backward-compatible Changes\r\nBackward-compatible changes are modifications to the API that shouldn't impact existing integrations. They'll apply to the current version of the API. Simply put: you won’t need to change the version to consume new changes like these.\r\n\r\nIt's important as you develop against the Buildium API that you ensure  these types of changes don't impact your integration. Here's are examples of backward-compatible modifications.\r\n\r\n* Adding new API resources and/or endpoints.\r\n* Adding new optional request parameters to existing API methods.\r\n* Adding new properties to existing API responses and non-required properties for request messages.\r\n* Changing property order in existing API responses.\r\n\r\nAll backward-compatible changes to the API will be documented in the [Changelog](#section/Changelog).\r\n\r\n#### Backwards-incompatible Changes\r\n\r\nWhen backwards-incompatible changes to the API occur, a new version of the API will be released. You’ll need to update the URL path  to consume resources under the new API version.\r\n\r\nBackwards-incompatible changes include:\r\n\r\n* Removing a property from a request and/or response message.\r\n* Changing the name of a property in a message.\r\n* Adding a required parameter to a request message.\r\n* Changing existing enumeration values.\r\n\r\nNew versions of the API will have full reference documentation and an upgrade guide.\r\n\r\n<br />\r\n\r\n\r\n\r\n## Authentication\r\nThe Buildium API uses API key’s client IDs and secrets to authenticate requests.\r\n\r\nAn API key client ID and secret must be passed in every request header using the following parameters:\r\n\r\n- `x-buildium-client-id`\r\n- `x-buildium-client-secret`\r\n\r\nFailing to provide both of them in the request header will cause the API to return a `401` HTTP status code.\r\n\r\n> **Note:** We currently do not support enabling CORS to access the Buildium API due to the security and authentication mechanisms we have in place to protect your data. Buildium supports authentication through API keys passed in the headers of a request versus a more CORS supported authentication mechanism like oAuth. Our recommendation is to access the Buildium API using server to server communication versus browser to server communication for the safest implementation.\r\n\r\n## Rate Limiting\r\nRate limits help us ensure consistent and reliable performance for all users, even during peak loads. That’s why we limit clients to **10 concurrent requests per second**.\r\n\r\nIf your request rate violates that limit, a response code of `429` is returned. Simply retry the request after a short interval (~200ms).\r\n\r\n## Request Size Limits\r\nThe query string for a request is limited to a maximum length of `4096` characters. If the query string exceeds this length, the API will return a `500` HTTP status code.\r\n\r\n## Bulk Request Options\r\nAll top-level API resources support bulk fetches. For instance, you can retrieve all [Associations](#operation/AssociationsExternalApi_GetAssociations). These resources also allow for filtering criteria. Each resource has descriptions of the filter criteria available.\r\n\r\nIn addition to filtering, our API gives you the ability to control the returned data’s pagination and the sort order.\r\n\r\n### Pagination\r\nEndpoints that return result sets allow for pagination using `limit` and `offset` request parameters to reduce the amount of data returned.\r\n\r\nThe `limit` request parameter will cap the number of results that come back in the response. If you don't specify a `limit` value, a **default of 50 results** are returned. The maximum `limit` value is 1000. If a `limit` value is specified greater than 1000, it will be overridden to the default to 1000.\r\n\r\nThe `offset` request parameter indicates the record position within the resultset to start at when returning the results. The `offset` is zero-based and is inclusive. If no `offset` value is submitted it will default to 0.\r\n\r\nThe total resultset count is returned in the HTTP Header `X-Total-Count`\r\n\r\n<br />\r\n\r\n#### Pagination Example\r\n\r\nAs an example, let's say we make a request to retrieve all rental properties with no paging parameters. Our response indicates in the `X-Total-Count` header that there are 150 total rental properties. We want to get only the last 50 results so we would submit a request with the `offset` set to 100 and the `limit` set to 50.\r\n\r\n> **Note:** The `limit` and `offset` parameter names are case-sensitive. If they aren't formatted correctly, the API will return a `404` HTTP status code.\r\n\r\n\r\n<br />\r\n\r\n### Sorting Results\r\nYou can specify the sort order of returned data by assigning any property from the returned object to the `orderby` parameter in the querystring. For example:\r\n```\r\norderby=LeaseType\r\n```\r\nBy default, the sort is performed in ascending order. To specify sort order, use \"asc\" for ascending or \"desc\" for descending. For example:\r\n```\r\norderby=LeaseType desc\r\n```\r\nAdditionally, you can sort by multiple properties by comma separating the properties. For example:\r\n```\r\norderby=Rent desc,City asc\r\n```\r\nIn order to avoid potentially getting inconsistent results or missing data when paging, you must sort on a unique property such as `Id`. If sorting by properties that may not\r\nbe unique such as `Date` or `Name`, a secondary sort on a unique property is necessary to preserve sort order between pages. An example of\r\nsorting this way would be:\r\n```\r\norderby=Date desc,Id asc\r\n```\r\n<br/>\r\n\r\n> **Note:** While the `orderby` parameter is case-sensitive, the properties specified in the `orderby` value aren't.\r\n\r\n## Response Codes\r\nThe Buildium API supports standard HTTP status codes.\r\n\r\n| Response Code                 | Description                                                                                                                                                                                           |\r\n|-------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| 200 OK                        | Everything worked as expected.                                                                                                                                                                        |\r\n| 201 Created                   | Everything worked as expected.                                                                                                                                                                        |\r\n| 202 Accepted                  | Everything worked as expected.                                                                                                                                                                        |\r\n| 204 No Content                | Everything worked as expected.                                                                                                                                                                        |\r\n| 400 Bad Request               | The request was unacceptable, often due to missing a required parameter.                                                                                                                              |\r\n| 401 Unauthorized              | The API client ID and secret weren’t provided or they’re no longer valid. Be sure that the client ID and secret combination are correct and they are still active.                                    |\r\n| 403 Forbidden                 | The API key doesn't have permission to perform the request. This could be due to authorization for the given endpoint or an inability to access given entities within the platform (e.g. properties). |\r\n| 404 Not Found                 | The requested resource doesn't exist.                                                                                                                                                                 |\r\n| 409 Conflict                  | The request cannot be completed due to an issue that cannot be resolved by changing the input of the request. Resolve the error before trying again.                                                  |\r\n| 415 Unsupported Media Type    | Ensure you have the appropriate content-type header value set on your request. Each resource is documented with media type(s) that are accepted.                                                      |\r\n| 429 Too Many Requests         | Too many requests against the API too quickly. We recommend an exponential backoff of your requests. See more information in  [Rate Limiting](#section/API-Overview/Rate-Limiting).                   |\r\n| 500 and above - Server Errors | Something went wrong on Buildium's end. Review the JSON response message for more details about the error. These are rare. Excludes 503 responses.                                                    |\r\n| 503 Service Unavailable       | A service you are trying to use is currently either down for maintenance or not functioning correctly, and your request will need to be resubmitted when functionality is restored.                   |\r\n\r\n## Support\r\nIf you are unable to resolve your issue after reviewing the API documentation our support team can assist you. Please fill out the form below and let us know how we can help.\r\n\r\n<script>\r\n\tfunction getUrlParameter(name) {\r\n\t\tname = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\r\n\t\tvar regex = new RegExp('[\\\\?&]' + name + '=([^&#]*)');\r\n\t\tvar results = regex.exec(location.search);\r\n\t\treturn results === null ? '' : decodeURIComponent(results[1].replace(/\\+/g, ' '));\r\n\t};\r\n\r\n\t\r\n\tdocument.addEventListener(\"DOMContentLoaded\", function(){\r\n\t  if(getUrlParameter('supportsuccess') === \"true\")\r\n\t\t{\r\n\t\t\tdocument.getElementById(\"message\").style.display = \"block\";\r\n\t\t}\r\n\t});\t\r\n</script>\r\n\r\n<script src=\"https://www.google.com/recaptcha/api.js\"></script>\r\n<script>\r\n function timestamp() { var response = document.getElementById(\"g-recaptcha-response\"); if (response == null || response.value.trim() == \"\") {var elems = JSON.parse(document.getElementsByName(\"captcha_settings\")[0].value);elems[\"ts\"] = JSON.stringify(new Date().getTime());document.getElementsByName(\"captcha_settings\")[0].value = JSON.stringify(elems); } } setInterval(timestamp, 500);\r\n</script>\r\n\r\n\r\n<div id=\"message\" class=\"bukGhL\" style=\"display:none;cursor:auto;\">Your support request has been received</div>\r\n\r\n<form id=\"supportRequestForm\" action=\"https://webto.salesforce.com/servlet/servlet.WebToCase?encoding=UTF-8&orgId=00D80000000b51V\" method=\"POST\">\r\n\r\n<input type=\"hidden\" name=\"orgid\" value=\"00D80000000b51V\">\r\n<input type=\"hidden\" id=\"00N4X00000C72OW\" name=\"00N4X00000C72OW\" value=\"General Product\">\r\n<input type=\"hidden\" id=\"00N0y000006b675\" name=\"00N0y000006b675\" value=\"Open API\">\r\n<input type=\"hidden\" id=\"00N4X00000C72OM\" name=\"00N4X00000C72OM\" value=\"Buildium\">\r\n<input type=\"hidden\" id=\"recordType\" name=\"recordType\" value=\"0120y000000GWkP\">\r\n<input type=\"hidden\" id=\"retURL\" name=\"retURL\" value=\"https://developer.buildium.com/?supportsuccess=true#section/API-Overview/Support\" />          \r\n<input type=\"hidden\" name=\"captcha_settings\" value='{\"keyname\":\"reCaptchaV2\",\"fallback\":\"true\",\"orgId\":\"00D80000000b51V\",\"ts\":\"\"}'> \r\n\r\n<table>\r\n\t<tr>\r\n\t\t<td width=\"50%\">\r\n\t\t\t<label for=\"company\"><strong>Buildium Account Name</strong></label>\r\n\t\t</td>\r\n\t\t<td>\r\n\t\t\t<input  id=\"company\" maxlength=\"80\" name=\"company\" size=\"40\" type=\"text\" class=\"supportInput\" />\r\n\t\t</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td width=\"50%\">\r\n\t\t\t<label for=\"name\"><strong>Contact Name</strong></label>\r\n\t\t</td>\r\n\t\t<td>\r\n\t\t\t<input  id=\"name\" maxlength=\"80\" name=\"name\" size=\"40\" type=\"text\" class=\"supportInput\" />\r\n\t\t</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td width=\"50%\">\r\n\t\t\t<label for=\"email\"><strong>Email</strong></label>\r\n\t\t</td>\r\n\t\t<td>\r\n\t\t\t<input  id=\"email\" maxlength=\"80\" name=\"email\" size=\"40\" type=\"text\" class=\"supportInput\" />\r\n\t\t</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td width=\"50%\">\r\n\t\t\t<strong>Select your issue</strong>\r\n\t\t</td>\r\n\t\t<td>\r\n\t\t\t<select id=\"00N0y000006jWr6\" name=\"00N0y000006jWr6\" title=\"Developer Support Issue:\" class=\"supportInput\">\r\n\t\t\t\t<option value=\"\">--None--</option><option value=\"I am having issues logging into my Buildium account\">I am having issues logging into my Buildium account</option>\r\n\t\t\t\t<option value=\"I am having issues enabling the API for my Buildium account\">I am having issues enabling the API for my Buildium account</option>\r\n\t\t\t\t<option value=\"I am having issues generating API keys\">I am having issues generating API keys</option>\r\n\t\t\t\t<option value=\"I am having issues making an API Request (provide details below)\">I am having issues making an API Request (provide details below)</option>\r\n\t\t\t</select>\r\n\t\t</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td width=\"50%\" valign=\"top\">\r\n\t\t\t<label for=\"description\"><strong>Description of your issue</strong></label>\r\n\t\t\t<br />\r\n\t\t\t<br />\r\n\t\t\tPlease include the following information when applicable to your issue:\r\n\t\t\t<br /> \r\n\t\t\t<ul>\r\n\t\t\t\t<li>Date & time of API request</li>\r\n\t\t\t\t<li>Full URL used in making the request along with any querystring and/or post parameters</li>\r\n\t\t\t\t<li>HTTP status code (e.g. 500)</li>\r\n\t\t\t\t<li>Response body</li>\r\n\t\t\t</ul>\r\n\t\t</td>\r\n\t\t<td valign=\"top\">\r\n\t\t\t<textarea name=\"description\" cols=\"42\" rows=\"15\" class=\"supportInput\"></textarea>\r\n\t\t</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td colspan=\"2\">\r\n            <br />\r\n            <div class=\"g-recaptcha\" data-sitekey=\"6LfyzxMcAAAAANT7cPXSitEodMd635qPeGIdiVei\"></div>\r\n            <br />\r\n\t\t\t<input type=\"submit\" name=\"submit\" class=\"supportInput\" />\r\n\t\t</td>\r\n\t</tr>\r\n</table>\r\n\r\n</form>\r\n\r\n# API Sandbox\r\nTo assist your development efforts Buildium offers a free Sandbox account with your Premium subscription. A sandbox is a development environment that is separate from your production account. Sandboxes duplicate much of the same property management functionality available in your production account and all of the resources available in the Open API. The benefit of the sandbox is that it's isolated from your primary account. This separation ensures that API operations you perform against the sandbox account during development of your integration do not corrupt the data in your production account.\r\n\r\n## Mock Data\r\nTo help you hit the ground running with your development efforts sandbox accounts are provisioned with realistic sample data. This ensures you have data to work with immediately and won’t have to spend time doing data entry. You always have the ability to add more data through the application and the Buildium Open API.\r\n\r\n## Getting Started\r\nTo create a sandbox account follow the steps below.\r\n\r\n1. Sign in to your [Buildium](https://signin.managebuilding.com/manager/public/authentication/login?ReturnUrl=%2Fmanager%2F) account from your browser.\r\n\r\n2. Open the ***Settings*** menu and click ***Developer Tools***.\r\n\r\n3. Click the ***API Sandbox*** tab.\r\n\r\n4. Click the ***Create sandbox*** button. A modal will appear.\r\n\r\n5. Enter the name and email of the person that will be administering the sandbox account. When the sandbox creation process has completed an email will be sent to the email address submitted. This email will provide a link to the sandbox. After all fields have been filled out, click **Create**.\r\n\r\n6. The provisioning process will now execute. It can take 2 - 3 minutes for the sandbox to be created. The page will automatically refresh with the provisioning status. When it completes you will see the sandbox status is **Active** along with details about the sandbox including the URL to the account. You can browse back to this page at any time if you need to look up the URL to the sandbox.\r\n   <br />\r\n   <kbd><img src=\"sandbox_provisioning.gif\" class=\"example_screen\" /></kbd>\r\n\r\n7. Once the sandbox has been created an email will be sent to the address you entered in the \"Create sandbox\" modal. To complete the activation of the sandbox open the email and click on the \"Activate Account\". This will allow you to create a password for your account and log into the sandbox.\r\n\r\n8. You are now ready to begin making API requests to your sandbox! Please see [Accessing the Sandbox](#section/API-Sandbox/Accessing-the-Sandbox) for next steps on how to start making API requests.\r\n\r\n\r\n## Accessing the Sandbox\r\nOnce your sandbox is created you can begin to access it through the Open API. Requests are made following all the same versioning, authentication, messages, etc that are used in the production environment with the exception of the base URL. The base URL for the sandbox is:\r\n<br />\r\n`https://apisandbox.buildium.com/`\r\n\r\nYou can read more about connecting to the API in the [API Overview](#section/API-Overview) section.\r\n\r\nOnce you have completed your development and testing against the sandbox and you're ready to start using the integration in your production account simply change the base URL in your integration to the [production API URL](#section/API-Overview/Base-URL).\r\n\r\n\r\n## Sandbox Account Restrictions\r\nThe core Buildium functionality is available in the sandbox environment, however there are some restrictions which include:\r\n\r\n1. Add-on services, ePay and other paid services will not be available.\r\n2. A maximum of 1500 units (rentals and associations) can be created within the sandbox.\r\n3. A maximum of 50 rental tenants per lease can be created within the sandbox.\r\n4. Communication emails will not be sent out. This protects you from inadvertently sending emails to your test accounts.\r\n\r\n\r\n## FAQs\r\n**How many sandboxes can I create?**\r\n\r\nThe Premium subscription plan allows you to create one sandbox.\r\n\r\n**Can I use my production keys to access my sandbox?**\r\n\r\nNo. To ensure you are accessing the correct environment the API keys are restricted to the environment they were created in.\r\n\r\n**What is the throttle limit on requests to the sandbox?**\r\n\r\nA sandbox account is limited to **10 concurrent requests per second**.\r\n\r\n**Can I reset sandbox data to its original state?**\r\n\r\nResetting sandbox data is not supported at this time.\r\n\r\n**Can I delete a sandbox?**\r\n\r\nYou cannot delete a sandbox at this time. Closing your account or changing subscription plans will delete your sandbox and it will be no longer accessible.\r\n\r\n**Can I delete the sandbox data?**\r\n\r\nYes, you can manually delete records by logging into the web application.\r\n\r\n**Why do I see an error when I try to access add-on functionality like ePayments?**\r\n\r\nCertain functionality is restricted in the sandbox environment. Please see [Sandbox Account Restrictions](#section/API-Sandbox/Sandbox-Account-Restrictions) for an overview of these limitations.\r\n\r\n# Webhooks\r\nBuildium webhooks allow your remote applications to listen for events within your Buildium account and react to those events in near real-time!\r\n\r\nTo implement webhooks you need to register a callback URL to your web server for the events you want to capture. Then Builidum will send notifications to that URL when the events occur making syncing data and automating workflows a breeze.\r\n\r\nAs an example, let’s say you’ve registered a callback to your application to receive “Lease Created” events. When a user within your Buildium account creates a new lease then a webhook callback from Buildium informs your app about this new lease. After your application receives the event it can then execute actions such as creating tasks to clean the apartment and change the locks.\r\n\r\nAnother advantage of using webhooks is that they allow your applications to respond to events in Buildium in near real time. Having events pushed to your platform as they happen is like calling the API every second to ask “Was a lease created”?\r\n\r\nThe diagram below illustrates how your application would integrate with Buildium webhooks.\r\n\r\n<img src=\"webhook-architecture.png\" />\r\n\r\n## Webhook Events Overview\r\nEvent notifications are Buildium’s way of letting you know when something interesting happens in your account. When a subscribed event occurs a new Event object is created and sent to your endpoint as part of a HTTPS POST request.\r\n\r\nEvent objects are simple data structures with fields that describe the entity and the event that occurred. The object will have the following fields:\r\n\r\n| Field | Description |\r\n| ---- | ---- |\r\n| EventName | This value indicates the entity and operation that occurred. |\r\n| EventDateTime| The date and time that the operation occurred. The value is in UTC and formatted as YYYY-MM-DDTHH:MM:SSSSSSSZ. |\r\n| AccountId | Your Buildium account identifier. This is used to distinguish between accounts if you have configured webhook callbacks across multiple Buildium accounts to the same endpoint. |\r\n| Entity Identifier(s) | These field(s) constitute the identifier of the entity. Use these values to query the Buildium Open API for the full entity data. |\r\n\r\nHere is an example of an Event object, serialized as JSON, when a rental property has been updated:\r\n```json\r\n{\r\n\"EventName\": \"Rental.Updated\",\r\n\"EventDateTime\": \"2022-05-10T15:12:46.2317653Z\",\r\n\"AccountId\": 123456,\r\n\"PropertyId\": 23\r\n}\r\n```\r\n\r\nNote that the EventName is a constant value that can be used to determine the entity and the operation that triggered the event. This value is concatenation of the entity name and operation separated by a period. For example, if a rental property was updated the EventName value would be: `Rental.Updated`.\r\n\r\nThe event identifiers included in the Event object will provide the data necessary to query the Buildium Open API and retrieve the full entity.\r\n\r\nThe [Webhook Events section](#section/Webhooks/Webhook-Events) below lists all of the available entities and their corresponding events that can be subscribed to. The grid also includes the EventName constants and sample JSON for each entity.\r\n\r\n## Receiving Callbacks\r\nTo take advantage of webhooks you’ll need to establish an endpoint that our Buildium servers can make a request to whenever the data you’re interested in changes. You can use one endpoint to handle several different event types at once or set up individual endpoints for specific events.\r\n\r\nYour endpoint must be implemented to support the following:\r\n * HTTPS protocol\r\n * Be publicly available\r\n * POST requests that consist of a JSON formatted payload sent as raw body type and a Content-Type of application/json.\r\n\r\nWhen receiving webhook callbacks it is important that your endpoint responds promptly. If Buildium doesn’t receive a response within 10 seconds the callback is considered unsuccessful. As a best practice your endpoint should return a response prior to executing any complex logic to ensure a response within the 10 second duration. Any HTTP response code from your endpoint other than a 2XX is also considered an unsuccessful request. Buildium will retry unsuccessful events on the following intervals:\r\n 1. 1 minute\r\n 2. 10 minutes\r\n 3. 1 hour\r\n\r\nIf a callback for an event is unsuccessful after all three attempts Buildium will stop attempting to send the event message.\r\n\r\nThe webhook subscription will be suspended if there 20 consecutive failed attempts to send events to the URL. Upon suspension an email will be sent notifying you that the subscription has been paused. You can troubleshoot issues and enable the webhook by browsing to  [Settings > Developer Tools > Webhooks](https://signin.managebuilding.com/manager/app/settings/developer-tools/webhooks). The email is sent to the contact email address that is set when the webhook subscription is created or updated.\r\n\r\nAs you develop the callback endpoint you can use the JSON examples found in the webhook event grid to generate the mock payloads for testing. Once you are able to successfully receive the event callback you should implement a signature check to ensure the authenticity of of the request.\r\n\r\n### Signature Checks\r\nIt is *strongly recommended* that you validate webhook event signatures in your application to ensure that the request came from Buildium and not a bad actor attempting to impersonate Buildium, alter event messages after they have been sent, or perform replay attacks. While validating the request isn’t required to read the payload, it is *strongly recommended* to ensure the authenticity of the request and ensure the overall security and data integrity of your application.\r\n\r\nAll webhook callback requests include the signature and a timestamp in the HTTP headers.\r\n\r\n| HTTP Header | Description |\r\n| ---- | ---- |\r\n| buildium-webhook-timestamp | A UNIX timestamp of when the message was sent. NOTE: This is not the time the event occurred within the system, but rather the time the event was sent.|\r\n| buildium-webhook-signature | A computed signature using the secret key that can be used to verify that the request came from Buildium. The secret key is generated when the webhook subscription is created.|\r\n\r\nThe signature is a concatenation of the timestamp value and the event message hashed by a secret key. The secret key is generated for you when creating webhook subscriptions. It is important to keep this key stored safely as you would with any other credentials.\r\n\r\nThe following steps outline how to use the secret key, the event message and the HTTP header values to verify the request:\r\n\r\n 1. Concatenate the value of the buildium-webhook-timestamp header with the body of the event with a period character in between the two values. The body of the event must have all newlines removed and not contain spaces after the colon between property names and values. For example\r\n```json\r\n{\r\n  \"EventName\": \"Rental.Created\",\r\n  \"EventDateTime\": \"2022-12-22T16:18:20.876772Z\",\r\n  \"AccountId\": 123456,\r\n  \"PropertyId\": 78910\r\n}\r\n```\r\nwould be passed into your verification method as:\r\n```json\r\n{\"EventName\":\"Rental.Created\",\"EventDateTime\":\"2022-12-22T16:18:20.876772Z\",\"AccountId\":123456,\"PropertyId\":78910}\r\n```\r\n 2. Hash the concatenated string using the HMACSHA256 algorithm setting the webhook secret key as the algorithm key.\r\n 3. Convert the resulting hash bytes to a base64 string.\r\n 4. Compare the base64 string to the value of the buildium-webhook-signature header. If the values match with a case sensitive comparison, the message has been validated to have come from Buildium.\r\n\r\n### Sample Validation Code (C#)\r\n```c#\r\nprivate static bool ClientSideValidate(\r\nstring eventNotificationMessage, \r\nstring timestamp, \r\nstring signature)\r\n{\r\n   var signedPayload = $\"{timestamp}.{eventNotificationMessage}\";\r\n   var hasher = new HMACSHA256(Encoding.UTF8.GetBytes(m_secretKey));\r\n   var computedHash = hasher.ComputeHash(Encoding.UTF8.GetBytes(signedPayload));\r\n   var computedHashString = Convert.ToBase64String(computedHash);\r\n\r\n   return computedHashString.Equals(signature);\r\n}\r\n```\r\nOnce you’ve successfully validated the message you can begin to process it with confidence it came from the Buildium platform and has not been altered after it has been sent.\r\n\r\nTo test your validation logic you can generate requests to your URL with headers you generate using the similar logic you created for validating the values.\r\n\r\n## Webhook Creation\r\nOnce your endpoint is ready to be tested end to end you will need to create a webhook subscription in your Buildium account. The subscription can be created by browsing to [Settings > Developer Tools > Webhooks](https://signin.managebuilding.com/manager/app/settings/developer-tools/webhooks) and then clicking the “Add webhook” button.\r\n\r\nOnce you’ve configured a new webhook, events will be sent to your endpoint as they are triggered within the account. So all you have to do is execute the action you want to test. You can expect webhook callbacks to your endpoint to fire within a few seconds to a few minutes from the event occurring in the Buildium platform. To determine if the events have been sent and/or see the resulting response from your platform you can view the webhook subscription event history page.\r\n\r\nWe strongly suggest you test your webhooks in your Buildium API sandbox account to ensure you don’t corrupt data in your production account. Once the integration is fully tested you can register the webhook in your production account.\r\n\r\n> NOTE: Due to our current security policies we do not support webhook callbacks to the Ngrok platform. We understand Ngrok can be useful for testing local webhook development and we hope to be able to support that platform safely and securely soon. In the meantime, we recommend using other websites and tools that can capture the webhook event HTTP request payload and headers and replay it manually on your local machine with a tool such as Postman.\r\n\r\n## Best Practices\r\n* Be sure to validate the signature on all incoming requests and consider rolling your secret keys on a regular basis. A new secret key can be generated by clicking the \"Generate key\" link next to the current secret key value when updating the webhook subscription.\r\n* Your webhook endpoints should be configured to receive only the types of events required by your integration. Listening for extra events (or all events) will put undue strain on your server and is not recommended.\r\n* Be sure your platform can handle duplicate events correctly. We do our best to ensure an event is only sent one time, but due to the distributed nature of the process we can not make any guarantees. We advise you to guard against duplicated event receipts by making your event processing idempotent. One way of doing this is logging the events you’ve processed, and then not processing already-logged events.\r\n* Buildium does not guarantee delivery of events in the order in which they are generated within the platform. For example, creating a lease might generate the following events - `Lease.Created`, `Tenant.Created`. Your endpoint shouldn’t expect delivery of these events in this order and should handle this accordingly. You can use the API to fetch any missing data. For example, you can fetch the lease resource using the information from tenant if you happen to receive that event first.\r\n\r\n## Webhook Events\r\nThe grid below details the available webhooks events along with their EventName and JSON message schema.\r\n\r\n<table>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Applicants\r\n    </td>\r\n    <td valign=\"top\">\r\n      Applicant.Created\r\n      <br />\r\n      Applicant.Updated\r\n      <br />\r\n      Applicant.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;ApplicantId: [integer]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr> \r\n<tr>\r\n    <td valign=\"top\">\r\n      Applicant Applications\r\n    </td>\r\n    <td valign=\"top\">\r\n      ApplicantApplication.Created\r\n      <br />\r\n      ApplicantApplication.Updated\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;ApplicantId: [integer]\r\n        <br/>&nbsp;&nbsp;ApplicationId: [integer]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>  \r\n<tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Application Transactions\r\n    </td>\r\n    <td valign=\"top\">\r\n      Application.Transaction.Created\r\n      <br />\r\n      Application.Transaction.Updated\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],        \r\n        <br/>&nbsp;&nbsp;ApplicationId: [integer],\r\n        <br/>&nbsp;&nbsp;TransactionId: [integer],\r\n        <br/>&nbsp;&nbsp;TransactionType: [string],\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>  \r\n<tr>\r\n    <td valign=\"top\">\r\n      Association Board Members\r\n    </td>\r\n    <td valign=\"top\">\r\n      AssociationBoardMember.Created \r\n      <br />\r\n      AssociationBoardMember.Updated\r\n      <br />\r\n      AssociationBoardMember.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;BoardMemberId: [integer]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Associations\r\n    </td>\r\n    <td valign=\"top\">\r\n      Association.Created \r\n      <br />\r\n      Association.Updated\r\n      <br />\r\n      Association.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;PropertyId: [integer]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Association Meter Readings\r\n    </td>\r\n    <td valign=\"top\">\r\n      Association.MeterReading.Created \r\n      <br />\r\n      Association.MeterReading.Updated\r\n      <br />\r\n      Association.MeterReading.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;PropertyId: [integer],\r\n        <br/>&nbsp;&nbsp;ReadingDate: [date],\r\n        <br/>&nbsp;&nbsp;MeterType: [string]  \r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n</tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Association Owners\r\n    </td>\r\n    <td valign=\"top\">\r\n      AssociationOwner.Created \r\n      <br />\r\n      AssociationOwner.Updated\r\n      <br />\r\n      AssociationOwner.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;OwnerId: [integer]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Association Ownership Account Transactions\r\n    </td>\r\n    <td valign=\"top\">\r\n      OwnershipAccountTransaction.Created \r\n      <br />\r\n      OwnershipAccountTransaction.Updated\r\n      <br />\r\n      OwnershipAccountTransaction.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;TransactionId: [integer],\r\n        <br/>&nbsp;&nbsp;TransactionType: [string]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Association Ownership Accounts\r\n    </td>\r\n    <td valign=\"top\">\r\n      OwnershipAccount.Created \r\n      <br />\r\n      OwnershipAccount.Updated\r\n      <br />\r\n      OwnershipAccount.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;OwnershipAccountId: [integer]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Association Tenants\r\n    </td>\r\n    <td valign=\"top\">\r\n      AssociationTenant.Created \r\n      <br />\r\n      AssociationTenant.Updated\r\n      <br />\r\n      AssociationTenant.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;TenantId: [integer]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Association Units\r\n    </td>\r\n    <td valign=\"top\">\r\n      AssociationUnit.Created \r\n      <br />\r\n      AssociationUnit.Updated\r\n      <br />\r\n      AssociationUnit.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;UnitId: [integer]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Bank Accounts\r\n    </td>\r\n    <td valign=\"top\">\r\n      BankAccount.Created \r\n      <br />\r\n      BankAccount.Updated\r\n      <br />\r\n      BankAccount.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;BankAccountId: [integer]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Bank Account Transactions\r\n    </td>\r\n    <td valign=\"top\">\r\n      BankAccount.Transaction.Created \r\n      <br />\r\n      BankAccount.Transaction.Updated\r\n      <br />\r\n      BankAccount.Transaction.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;BankAccountId: [integer],\r\n        <br/>&nbsp;&nbsp;TransactionId: [integer],\r\n        <br/>&nbsp;&nbsp;TransactionType: [string]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Bills\r\n    </td>\r\n    <td valign=\"top\">\r\n      Bill.Created \r\n      <br />\r\n      Bill.Updated\r\n      <br />\r\n      Bill.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;BillId: [integer]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Bill Payments\r\n    </td>\r\n    <td valign=\"top\">\r\n      Bill.Payment.Created \r\n      <br />\r\n      Bill.Payment.Updated\r\n      <br />\r\n      Bill.Payment.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;PaymentId: [integer]\r\n        <br/>&nbsp;&nbsp;BillIds: [\r\n        <br/>&nbsp;&nbsp;  [integer]\r\n        <br/>&nbsp;&nbsp;]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Budgets\r\n    </td>\r\n    <td valign=\"top\">\r\n      Budget.Created \r\n      <br />\r\n      Budget.Updated\r\n      <br />\r\n      Budget.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;BudgetId: [integer]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      General Ledger Accounts\r\n    </td>\r\n    <td valign=\"top\">\r\n      GLAccount.Created \r\n      <br />\r\n      GLAccount.Updated\r\n      <br />\r\n      GLAccount.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;GLAccountId: [integer]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>\r\n<tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Integrations\r\n    </td>\r\n    <td valign=\"top\">\r\n      Installation.Created \r\n      <br />\r\n      Installation.Updated\r\n      <br />\r\n      Installation.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;IntegrationName: [string]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>\r\n<tr valign=\"top\">\r\n    <td valign=\"top\">\r\n        Lease Move Outs\r\n    </td>\r\n    <td valign=\"top\">\r\n        Lease.MoveOut.Created\r\n    </td>\r\n    <td>\r\n       <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;LeaseId: [integer],\r\n        <br/>&nbsp;&nbsp;TenantId: [integer]\r\n        <br/>\r\n        }\r\n      </span> \r\n    </td>\r\n</tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Lease Tenants\r\n    </td>\r\n    <td valign=\"top\">\r\n      LeaseTenant.Created \r\n      <br />\r\n      LeaseTenant.Updated\r\n      <br />\r\n      LeaseTenant.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;TenantId: [integer]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Lease Transactions\r\n    </td>\r\n    <td valign=\"top\">\r\n      LeaseTransaction.Created \r\n      <br />\r\n      LeaseTransaction.Updated\r\n      <br />\r\n      LeaseTransaction.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;TransactionId: [integer],\r\n        <br/>&nbsp;&nbsp;TransactionType: [string]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Leases\r\n    </td>\r\n    <td valign=\"top\">\r\n      Lease.Created \r\n      <br />\r\n      Lease.Updated\r\n      <br />\r\n      Lease.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;LeaseId: [integer]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Listings\r\n    </td>\r\n    <td valign=\"top\">\r\n      Listing.Created \r\n      <br />\r\n      Listing.Updated\r\n      <br />\r\n      Listing.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;UnitId: [integer]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Phone Logs\r\n    </td>\r\n    <td valign=\"top\">\r\n      PhoneLog.Created \r\n      <br />\r\n      PhoneLog.Updated\r\n      <br />\r\n      PhoneLog.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;PhoneLogId: [integer]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Rental Meter Readings\r\n    </td>\r\n    <td valign=\"top\">\r\n      Rental.MeterReading.Created \r\n      <br />\r\n      Rental.MeterReading.Updated\r\n      <br />\r\n      Rental.MeterReading.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;PropertyId: [integer],\r\n        <br/>&nbsp;&nbsp;ReadingDate: [date],\r\n        <br/>&nbsp;&nbsp;MeterType: [string]  \r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n</tr>\r\n  <tr>\r\n    <td valign=\"top\">\r\n      Rental Properties\r\n    </td>\r\n    <td valign=\"top\">\r\n      Rental.Created\r\n      <br />\r\n      Rental.Updated\r\n      <br />\r\n      Rental.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">{<br/>&nbsp;&nbsp;EventName: [string],<br/>&nbsp;&nbsp;EventDateTime: [datetime],<br/>&nbsp;&nbsp;AccountId: [integer],<br/>&nbsp;&nbsp;PropertyId: [integer]<br/>}</span>\r\n    </td>\r\n  </tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Rental Units\r\n    </td>\r\n    <td valign=\"top\">\r\n      RentalUnit.Created \r\n      <br />\r\n      RentalUnit.Updated\r\n      <br />\r\n      RentalUnit.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;UnitId: [integer]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Task Categories\r\n    </td>\r\n    <td valign=\"top\">\r\n      TaskCategory.Created \r\n      <br />\r\n      TaskCategory.Updated\r\n      <br />\r\n      TaskCategory.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;TaskCategoryId: [integer]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n</tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Task History\r\n    </td>\r\n    <td valign=\"top\">\r\n      Task.History.Created \r\n      <br />\r\n      Task.History.Updated\r\n      <br />\r\n      Task.History.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;TaskId: [integer],\r\n        <br/>&nbsp;&nbsp;TaskHistoryId: [integer],\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n</tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Tasks\r\n    </td>\r\n    <td valign=\"top\">\r\n      Task.Created \r\n      <br />\r\n      Task.Updated\r\n      <br />\r\n      Task.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;TaskId: [integer],\r\n        <br/>&nbsp;&nbsp;TaskType: [string]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Vendor Categories\r\n    </td>\r\n    <td valign=\"top\">\r\n      VendorCategory.Created \r\n      <br />\r\n      VendorCategory.Updated\r\n      <br />\r\n      VendorCategory.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;VendorCategoryId: [integer]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Vendors\r\n    </td>\r\n    <td valign=\"top\">\r\n      Vendor.Created \r\n      <br />\r\n      Vendor.Updated\r\n      <br />\r\n      Vendor.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;VendorId: [integer]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>\r\n<tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Vendor Transactions\r\n    </td>\r\n    <td valign=\"top\">\r\n      Vendor.Transaction.Created \r\n      <br />\r\n      Vendor.Transaction.Updated\r\n      <br />\r\n      Vendor.Transaction.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;TransactionId: [integer]\r\n        <br/>&nbsp;&nbsp;TransactionType: [string]\r\n        <br/>&nbsp;&nbsp;VendorId: [integer]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>\r\n<tr>\r\n<tr>\r\n    <td valign=\"top\">\r\n      Work Orders\r\n    </td>\r\n    <td valign=\"top\">\r\n      WorkOrder.Created\r\n      <br />\r\n      WorkOrder.Updated\r\n      <br />\r\n      WorkOrder.Deleted\r\n    </td>\r\n    <td>\r\n      <span style=\"background:none;font-family:courier,serif;font-size:12px;\">\r\n        {\r\n        <br/>&nbsp;&nbsp;EventName: [string],\r\n        <br/>&nbsp;&nbsp;EventDateTime: [datetime], \r\n        <br/>&nbsp;&nbsp;AccountId: [integer],\r\n        <br/>&nbsp;&nbsp;WorkOrderId: [integer]\r\n        <br/>\r\n        }\r\n      </span>\r\n    </td>\r\n  </tr>  \r\n\r\n</table>\r\n\r\n\r\n# Changelog\r\n### 2025-07-15\r\n#### API Updates\r\n* Added `Unknown` to the email recipient types that can be returned as part of [retrieve all email recipients](#tag/Communications/operation/ExternalApiEmailRecipients_GetEmailRecipients)\r\n\r\n### 2025-05-20\r\n#### API Updates\r\n* Endpoints to retrieve lease and ownership data without requiring a specific `leaseId` or `owernshipAccountId` have been released:\r\n  * [Retrieve all lease renewal history](#tag/Leases/operation/ExternalApiLeaseRenewalsRead_GetLeaseRenewalHistory)\r\n  * [Retrieve all recurring transactions for all leases](#tag/Lease-Transactions/operation/ExternalApiLeaseRecurringTransactions_GetRecurringTransactionsForAllLeases)\r\n  * [Retrieve all recurring transactions for all ownership accounts](#tag/Ownership-Account-Transactions/operation/ExternalApiOwnershipAccountRecurringTransactions_GetRecurringTransactionsForAllOwnershipAccounts)\r\n  * [Retrieve all rent schedules](#tag/Leases/operation/ExternalApiLeaseRent_GetRentPaged)\r\n    * Please note that `LastUpdatedDateTime` on rent resources returned by this endpoint will be `null` unless the rent was modified after the date of this release.\r\n* The general ledger transactions response will now include a new property `Application` that contains the `Id` and the resource path `Href` of the application associated with the transaction. This will be available for the following endpoints:\r\n    * [Retrieve a general ledger transaction](#tag/General-Ledger/operation/ExternalApiGeneralLedgerTransactions_GetTransactionById)\r\n    * [Retrieve all general ledger transactions](#tag/General-Ledger/operation/ExternalApiGeneralLedgerTransactions_GetAllTransactions)\r\n* The following general ledger transactions endpoints now support application transactions:\r\n    * [Retrieve a general ledger transaction](#tag/General-Ledger/operation/ExternalApiGeneralLedgerTransactions_GetTransactionById)\r\n    * [Retrieve all general ledger transactions](#tag/General-Ledger/operation/ExternalApiGeneralLedgerTransactions_GetAllTransactions)\r\n\r\n### 2025-04-17\r\n#### API Updates\r\n* The ability to retrieve application transactions has been released:\r\n    * [Retrieve all application transactions](#tag/Application-Transactions/operation/ExternalApiApplicationLedgerTransactions_GetApplicationTransactions)\r\n    * [Retrieve an application transaction](#tag/Application-Transactions/operation/ExternalApiApplicationLedgerTransactions_GetLeaseLedgerTransactionById)\r\n* The ability to retrieve application outstanding balances has been released:\r\n    * [Retrieve all outstanding balances](#tag/Application-Transactions/operation/ExternalApiApplicationOutstandingBalances_GetApplicationOutstandingBalances)\r\n* The ability to retrieve, create, and update application charges has been released:\r\n    * [Retrieve all charges](#tag/Application-Transactions/operation/ExternalApiApplicationLedgerCharges_GetApplicationCharges)\r\n    * [Retrieve a charge](#tag/Application-Transactions/operation/ExternalApiApplicationLedgerCharges_GetApplicationLedgerChargeById)\r\n    * [Create a charge](#tag/Application-Transactions/operation/ExternalApiApplicationLedgerCharges_CreateApplicationLedgerCharge)\r\n    * [Update a charge](#tag/Application-Transactions/operation/ExternalApiApplicationLedgerCharges_UpdateApplicationLedgerCharge)\r\n* The ability to create and update application payments has been released:\r\n    * [Create a payment](#tag/Application-Transactions/operation/ExternalApiApplicationLedgerPayments_CreateApplicationLedgerPayment)\r\n    * [Update a payment](#tag/Application-Transactions/operation/ExternalApiApplicationLedgerPayments_UpdateApplicationLedgerPayment)\r\n* The ability to create application auto allocated payments has been released:\r\n    * [Create a payment (auto allocated)](#tag/Application-Transactions/operation/ExternalApiApplicationLedgerAutoAllocatedPayments_CreateApplicationAutoAllocatedPayment)\r\n* The ability to create application payment reversals payments has been released:\r\n    * [Create a payment reversal](#tag/Application-Transactions/operation/ExternalApiApplicationLedgerPaymentReversals_CreateApplicationLedgerReversePayment)\r\n* The ability to retrieve and create application refunds has been released:\r\n    * [Retrieve a refund](#tag/Application-Transactions/operation/ExternalApiApplicationLedgerRefunds_GetApplicationLedgerRefundById)\r\n    * [Create a refund](#tag/Application-Transactions/operation/ExternalApiApplicationLedgerRefunds_CreateApplicationLedgerRefund)\r\n* The applicant response from the following applicant endpoints will now include a collection of objects under a new property named `UnsubmittedApplications` that includes the identifiers of applications that haven't been submitted:\r\n    * [Retrieve all applicants](#tag/Applicants/operation/ExternalApiApplicants_GetApplicants)\r\n    * [Retrieve an applicant](#tag/Applicants/operation/ExternalApiApplicants_GetApplicantById)\r\n    * [Create an applicant](#tag/Applicants/operation/ExternalApiApplicants_CreateApplicant)\r\n    * [Update an applicant](#tag/Applicants/operation/ExternalApiApplicants_UpdateApplicant)\r\n\r\n#### Webhook Updates\r\n* New [webhook events](#section/Webhooks/Webhook-Events) have been added for the following resources:\r\n    - Application transactions (created and updated).\r\n\r\n### 2025-02-24\r\n#### API Updates\r\n* Added `Unknown` to the entity types that can be returned as part of [retrieve all files](#tag/Files/operation/ExternalApiFiles_GetFiles) and [retrieve a file](#tag/Files/operation/ExternalApiFiles_GetFileById).\r\n\r\n### 2025-02-18\r\n#### API Updates\r\n* `VendorCreditIds` has been added as an optional property to allow using vendor credits when [creating a bill payment](#tag/Bills/operation/ExternalApiBillPaymentsWrite_CreateBillPayment).\r\n* `PaymentAllocations` has been added as an optional property to allow partially paying bill line items when [creating a payment for multiple bills with one check](#tag/Bills/operation/ExternalApiBillPaymentsWrite_CreateMultipleBillPayments).\r\n\r\n### 2025-01-21\r\n* Added guidance on including secondary sorts on unique properties to preserve sort order when paginating to the [bulk request options](#section/API-Overview/Bulk-Request-Options) section.\r\n\r\n### 2024-12-17\r\n#### API Updates\r\n* Multiple bills per work order are now returned by the `BillTransactionIds` field from the following endpoints:\r\n  - [Create a work order](#tag/Work-Orders/operation/ExternalApiWorkOrders_CreateWorkOrder)\r\n  - [Update a work order](#tag/Work-Orders/operation/ExternalApiWorkOrders_UpdateWorkOrder)\r\n  - [Retrieve a work order](#tag/Work-Orders/operation/ExternalApiWorkOrders_GetWorkOrderById)\r\n\r\n### 2024-11-19\r\n#### API Updates\r\n* Partial payment setting resources have been released:\r\n  * [Retrieve the partial payment settings for residents](#tag/Administration/operation/ExternalApiPartialPaymentGlobalSettings_GetGlobalPartialPaymentSettings)\r\n  * [Retrieve all partial payment settings for a lease](#tag/Leases/operation/ExternalApiLeasePartialPaymentSettings_GetLeasePartialPaymentSettings)\r\n  * [Retrieve all partial payment settings for an ownership account](#tag/Ownership-Accounts/operation/ExternalApiOwnershipAccountsPartialPaymentSettings_GetOwnershipAccountPartialPaymentSettings)\r\n  * [Update the partial payment settings for residents](#tag/Administration/operation/ExternalApiPartialPaymentGlobalSettings_PatchGlobalPartialPaymentSettings)\r\n  * [Update partial payment settings for a lease](#tag/Leases/operation/ExternalApiLeaseUpdatePartialPaymentSettings_PatchLeasePartialPaymentSettings)\r\n  * [Update partial payment settings for an ownership account](#tag/Ownership-Accounts/operation/ExternalApiOwnershipAccountUpdatePartialPaymentSettings_PatchOwnershipAccountPartialPayment)\r\n* Multiple work orders can now be created for the same task, when [creating a work order](#tag/Work-Orders/operation/ExternalApiWorkOrders_CreateWorkOrder)\r\n* `Title`, `DueDate`, `Priority`, and `Status` are now supported fields for work orders. These values can be retrieved, created, or updated for the following endpoints:\r\n  - [Retrieve all work orders](#tag/Work-Orders/operation/ExternalApiWorkOrders_GetAllWorkOrders)\r\n  - [Create a work order](#tag/Work-Orders/operation/ExternalApiWorkOrders_CreateWorkOrder)\r\n  - [Update a work order](#tag/Work-Orders/operation/ExternalApiWorkOrders_UpdateWorkOrder)\r\n  - [Retrieve a work order](#tag/Work-Orders/operation/ExternalApiWorkOrders_GetWorkOrderById)\r\n* Multiple entry contact users are now retrieved, created, or updated via the `EntryContacts` property for the following endpoints:\r\n  - [Create a work order](#tag/Work-Orders/operation/ExternalApiWorkOrders_CreateWorkOrder)\r\n  - [Update a work order](#tag/Work-Orders/operation/ExternalApiWorkOrders_UpdateWorkOrder)\r\n  - [Retrieve a work order](#tag/Work-Orders/operation/ExternalApiWorkOrders_GetWorkOrderById)\r\n* When [retrieving work orders](#tag/Work-Orders/operation/ExternalApiWorkOrders_GetAllWorkOrders), using the `statuses`, `duedatefrom`, `duedateto`, `priorities`, or `title` query parameters will now search against the new work order fields, rather than the task fields.\r\n* `FirstOccurrenceDate` has been added to recurring transaction resources:\r\n  * [Retrieve all recurring transactions for a lease](#tag/Lease-Transactions/operation/ExternalApiLeaseRecurringTransactions_GetLeaseRecurringTransactions)\r\n  * [Retrieve all recurring transactions for an ownership account](#tag/Ownership-Account-Transactions/operation/ExternalApiOwnershipAccountRecurringTransactions_GetAssociationRecurringTransaction)\r\n\r\n### 2024-09-17\r\n#### API Updates\r\n* `BillId` can optionally be provided to the [Lease Ledger's Create a charge](#tag/Lease-Transactions/operation/ExternalApiLeaseLedgerChargesWrite_CreateCharge)\r\n  or the [Ownership Account's Ledger](#tag/Ownership-Account-Transactions/operation/ExternalApiOwnershipAccountLedgerCharges_CreateCharge)\r\n  to tie a charge to a bill.\r\n* Read endpoints for lease and ownership account ledger charges have been released:\r\n    - [Lease Ledger's Retrieve all charges](#tag/Lease-Transactions/operation/ExternalApiLeaseLedgerChargesRead_GetAllCharges)\r\n    - [Lease Ledger's Retrieve a charge](#tag/Lease-Transactions/operation/ExternalApiLeaseLedgerChargesRead_GetChargeById)\r\n    - [Ownership Account Ledger's Retrieve all charges](#tag/Ownership-Account-Transactions/operation/ExternalApiOwnershipAccountLedgerCharges_GetAllOwnershipAccountCharges)\r\n    - [Ownership Account Ledger's Retrieve a charge](#tag/Ownership-Account-Transactions/operation/ExternalApiOwnershipAccountLedgerCharges_GetOwnershipAccountChargeById)\r\n\r\n### 2024-08-20\r\n#### API Updates\r\n* Accounts receivable, accounts payable, undeposited funds, and bank account ids can no longer be used in lines when [creating](#tag/Bank-Accounts/operation/ExternalApiBankAccountChecks_CreateBankAccountCheck) or [updating](#tag/Bank-Accounts/operation/ExternalApiBankAccountChecks_UpdateCheckForBankAccount) checks. Doing so will result in a 422 Unprocessible Entity result.\r\n* The following template ids can no longer be used when [sending an email](#tag/Communications/operation/ExternalApiEmailsWrite_CreateEmail). Doing so will result in a 422 Unprocessible Entity result.\r\n    * 1 (Tenant Statement)\r\n    * 2 (Homeowner Statement)\r\n    * 3 (Rental Owner Statement)\r\n    * 123 (Association Tenant Invoice)\r\n    * 124 (Rental Tenant Invoice)\r\n* `UnitIds` is available as a filter option for [retrieving all tenants](#tag/Rental-Tenants/operation/ExternalApiRentalTenants_GetAllTenants).\r\n* `LastUpdatedDateTime` has been added to applicant resources.\r\n* `LastUpdatedFrom` and `LastUpdatedTo` are available as filter options for [retrieving all applicants](#tag/Applicants/operation/ExternalApiApplicants_GetApplicants).\r\n* `PrimaryAddress`, `AlternateAddress`, and `MailingPreference` have been added to association owner resources when [retrieving all association lockbox data](#tag/Associations/operation/ExternalApiAssociationBankLockBoxData_GetBankLockBoxData).\r\n\r\n\r\n### 2024-07-16\r\n#### API Updates\r\n* The ability to retrieve and create architectural requests for associations has been released:\r\n    * [Retrieve all architectural requests](#tag/Architectural-Requests/operation/ExternalApiAssociationArchitecturalRequests_GetArchitecturalRequests)\r\n    * [Create an architectural request](#tag/Architectural-Requests/operation/ExternalApiAssociationArchitecturalRequests_CreateArchitecturalRequestAsync)\r\n    * [Retrieve an architectural request](#tag/Architectural-Requests/operation/ExternalApiAssociationArchitecturalRequests_GetArchitecturalRequestById)\r\n    * [Retrieve all files for an architectural request](#tag/Architectural-Requests/operation/ExternalApiAssociationArchitecturalRequests_GetArchitecturalRequestFilesHistoryPagedAsync)\r\n    * [Upload an architectural request file](#tag/Architectural-Requests/operation/ExternalApiAssociationArchitecturalRequests_CreateUploadFileRequest)\r\n    * [Retrieve an architectural request file](#tag/Architectural-Requests/operation/ExternalApiAssociationArchitecturalRequests_GetArchitecturalRequestFileAsync)\r\n    * [Download an architectural request file](#tag/Architectural-Requests/operation/ExternalApiAssociationArchitecturalRequests_DownloadArchitecturalRequestFileAsync)\r\n\r\n### 2024-06-18\r\n#### API Updates\r\n* `AggregateBalancesByUnitId` has been added to the request parameters on the [retrieve all general ledger account balances](#tag/General-Ledger/operation/ExternalApiGLAccountBalances_GetGlAccountBalances) to breakdown balances per unit.\r\n\r\n### 2024-05-21\r\n#### Webhook Updates\r\n* New [webhook events](#section/Webhooks/Webhook-Events) have been added for the following resource:\r\n    - Task history\r\n\r\n### 2024-04-23\r\n#### API Updates\r\n* `UserType` has been added to the `CreatedByUser` and `LastUpdatedByUser` properties for task history resources.\r\n\r\n### 2024-04-16\r\n#### API Updates\r\n* General ledger transaction resources can now be filtered by `LastUpdatedFrom` and `LastUpdatedTo`.\r\n* `LastUpdatedDateTime` has been added to general ledger transaction resources.\r\n* The ability to update a deposit withholding has been released.\r\n  * [Update a deposit withholding for a lease](#tag/Lease-Transactions/operation/ExternalApiLeaseLedgerDepositWithholding_UpdateDepositWithholding)\r\n  * [Update a deposit withholding for an ownership account](#tag/Ownership-Account-Transactions/operation/ExternalApiOwnershipAccountDepositWithholding_UpdateOwnershipAccountDepositWithholding)\r\n* We have released our first PATCH endpoint! PATCH allows for partial updates of resources without having to provide an entire resource representation in a PUT. \r\n  * Our first PATCH endpoint provides the ability to [Update a bill](#tag/Bills/operation/ExternalApiBills_PatchBill).\r\n\r\n### 2024-03-19\r\n#### API Updates\r\n* The ability to create and update rent schedules been released:\r\n  * [Create a rent schedule](#tag/Leases/operation/ExternalApiLeaseRent_CreateRentSchedule)\r\n  * [Update a rent schedule](#tag/Leases/operation/ExternalApiLeaseRent_UpdateRentSchedule)\r\n* Reconciliation resources have been released:\r\n  * [Retrieve all reconciliations](#tag/Bank-Accounts/operation/ExternalApiBankAccountReconciliationsRead_GetReconciliations)\r\n  * [Retrieve a reconciliation](#tag/Bank-Accounts/operation/ExternalApiBankAccountReconciliationsRead_GetReconciliationById)\r\n  * [Retrieve all transactions for a reconciliation](#tag/Bank-Accounts/operation/ExternalApiBankAccountReconciliationsRead_GetBankAccountReconciliationTransactions)\r\n  * [Retrieve a reconciliation's balance](#tag/Bank-Accounts/operation/ExternalApiBankAccountReconciliationsRead_GetReconciliationBalanceById)\r\n  * [Create a reconciliation](#tag/Bank-Accounts/operation/ExternalApiBankAccountPendingReconciliations_CreatePendingReconciliations)\r\n  * [Update a reconciliation](#tag/Bank-Accounts/operation/ExternalApiBankAccountReconciliationsWrite_UpdateReconciliation)\r\n  * [Update a reconciliation's balance](#tag/Bank-Accounts/operation/ExternalApiBankAccountReconciliationsWrite_UpdateReconciliationBalances)\r\n  * [Finalize a manual reconciliation](#tag/Bank-Accounts/operation/ExternalApiBankAccountReconciliationFinalize_FinalizeReconciliation)\r\n  * [Clear transactions for a reconciliation](#tag/Bank-Accounts/operation/ExternalApiBankAccountReconciliationsWrite_ClearTransactions)\r\n  * [Un-clear transactions for a reconciliation](#tag/Bank-Accounts/operation/ExternalApiBankAccountReconciliationsWrite_UnclearTransactions)\r\n* General ledger transactions results can now be filtered by unit through the `selectionentityunitid` field:\r\n  * [Retrieve all general ledger transactions](#tag/General-Ledger/operation/ExternalApiGeneralLedgerTransactions_GetAllTransactions)\r\n\r\n### 2024-02-20\r\n#### API Updates\r\n* Meter reading resources and webhook events have been released:\r\n    * [Delete meter reading details for an association and date](#tag/Association-Meter-Readings/operation/ExternalApiAssociationDeleteMeterReadingDetails_DeleteMeterReadingDetailsForAssociation)\r\n    * [Delete meter reading details for a rental and date](#tag/Rental-Meter-Readings/operation/ExternalApiRentalDeleteMeterReadingDetails_DeleteMeterReadingDetailsForRental)\r\n    * [Retrieve all meter reading details for an association](#tag/Association-Meter-Readings/operation/ExternalApiAssociationMeterReadingDetails_GetAssociationMeterReadingDetailsAsync)\r\n    * [Retrieve all meter reading details for a rental](#tag/Rental-Meter-Readings/operation/ExternalApiRentalMeterReadingDetails_GetMeterReadingDetailsForRentalAsync)\r\n    * [Retrieve all meter readings for an association](#tag/Association-Meter-Readings/operation/ExternalApiAssociationMeterReadingsRead_GetMeterReadingsForAssociation)\r\n    * [Retrieve all meter readings for a rental](#tag/Rental-Meter-Readings/operation/ExternalApiRentalMeterReadingsRead_GetMeterReadingsForRental)\r\n    * [Create/Update meter reading details for a rental](#tag/Rental-Meter-Readings/operation/ExternalApiRentalMeterReadingDetailsUpsert_UpsertMeterReadingDetailsForRentalAsync)\r\n    * [Create/Update meter reading details for an association](#tag/Association-Meter-Readings/operation/ExternalApiAssociationMeterReadingDetailsUpsert_UpsertAssociationMeterReadingDetailsAsync)\r\n\r\n### 2024-01-23\r\n#### API Updates\r\n* Unit level accounting changes have been released:\r\n  * `UnitId` has been added, as optional, to the `AccountingEntity` property for accounting transactions request resources. \r\n  * `Unit` has been added to the `AccountingEntity` property for accounting transactions response resources.\r\n  * As part of those changes listed above, the following endpoints have been updated:\r\n      * [Create a check](#tag/Bank-Accounts/operation/ExternalApiBankAccountChecks_CreateBankAccountCheck)\r\n      * [Update a check](#tag/Bank-Accounts/operation/ExternalApiBankAccountChecks_UpdateCheckForBankAccount)\r\n      * [Retrieve a check](#tag/Bank-Accounts/operation/ExternalApiBankAccountChecks_GetCheckForBankAccount)\r\n      * [Retrieve all checks](#tag/Bank-Accounts/operation/ExternalApiBankAccountChecks_GetBankAccountChecks)\r\n      * [Create a deposit](#tag/Bank-Accounts/operation/ExternalApiBankAccountDeposits_CreateBankAccountDeposit)\r\n      * [Update a deposit](#tag/Bank-Accounts/operation/ExternalApiBankAccountDeposits_UpdateBankAccountDeposit)\r\n      * [Retrieve a deposit](#tag/Bank-Accounts/operation/ExternalApiBankAccountDeposits_GetBankAccountDepositById)\r\n      * [Retrieve all deposits](#tag/Bank-Accounts/operation/ExternalApiBankAccountDeposits_GetBankAccountDeposits)\r\n      * [Create a quick deposit](#tag/Bank-Accounts/operation/ExternalApiBankAccountQuickDeposits_CreateQuickDeposit)\r\n      * [Update a quick deposit](#tag/Bank-Accounts/operation/ExternalApiBankAccountQuickDeposits_UpdateQuickDeposit)\r\n      * [Retrieve a quick deposit](#tag/Bank-Accounts/operation/ExternalApiBankAccountQuickDeposits_GetQuickDepositById)\r\n      * [Retrieve all quick deposits](#tag/Bank-Accounts/operation/ExternalApiBankAccountQuickDeposits_GetAllQuickDeposits)\r\n      * [Create a bill](#tag/Bills/operation/ExternalApiBills_CreateBill)\r\n      * [Update a bill](#tag/Bills/operation/ExternalApiBills_UpdateBill)\r\n      * [Retrieve a bill](#tag/Bills/operation/ExternalApiBills_GetBillById)\r\n      * [Retrieve all bills](#tag/Bills/operation/ExternalApiBills_GetBillsAsync)\r\n      * [Create a bill payment](#tag/Bills/operation/ExternalApiBillPaymentsWrite_CreateBillPayment)\r\n      * [Retrieve a bill payment](#tag/Bills/operation/ExternalApiBillPaymentsRead_GetBillPaymentById)\r\n      * [Retrieve all bill payments](#tag/Bills/operation/ExternalApiBillPaymentsRead_GetBillPayments)\r\n      * [Create a withdrawal](#tag/Bank-Accounts/operation/ExternalApiBankAccountWithdrawals_CreateWithdrawalForBankAccount)\r\n      * [Update a withdrawal](#tag/Bank-Accounts/operation/ExternalApiBankAccountWithdrawals_UpdateBankAccountWithdrawal)\r\n      * [Retrieve a withdrawal](#tag/Bank-Accounts/operation/ExternalApiBankAccountWithdrawals_UpdateBankAccountWithdrawal)\r\n      * [Retrieve all withdrawals](#tag/Bank-Accounts/operation/ExternalApiBankAccountWithdrawals_GetBankAccountWithdrawals)\r\n      * [Create a transfer](#tag/Bank-Accounts/operation/ExternalApiBankAccountTransfers_CreateBankAccountTransfer)\r\n      * [Update a transfer](#tag/Bank-Accounts/operation/ExternalApiBankAccountTransfers_UpdateBankAccountTransfer)\r\n      * [Retrieve a transfer](#tag/Bank-Accounts/operation/ExternalApiBankAccountTransfers_GetBankAccountTransferById)\r\n      * [Retrieve all transfers](#tag/Bank-Accounts/operation/ExternalApiBankAccountTransfers_GetBankAccountTransfers)\r\n      * [Create a credit](#tag/Vendors/operation/ExternalApiVendorCreditsWrite_CreateVendorCredit)\r\n      * [Retrieve a credit](#tag/Vendors/operation/ExternalApiVendorCredits_GetVendorCredit)\r\n      * [Create a refund](#tag/Vendors/operation/ExternalApiVendorRefundsWrite_CreateVendorRefund)\r\n      * [Retrieve a refund](#tag/Vendors/operation/ExternalApiVendorRefunds_GetVendorRefund)\r\n      * [Create a general journal entry](#tag/General-Ledger/operation/ExternalApiGeneralLedgerJournalEntries_CreateGeneralJournalEntry)\r\n      * [Update a general journal entry](#tag/General-Ledger/operation/ExternalApiGeneralLedgerJournalEntries_UpdateGeneralJournalEntry)\r\n      * [Retrieve a general ledger transaction](#tag/General-Ledger/operation/ExternalApiGeneralLedgerTransactions_GetTransactionById)\r\n      * [Retrieve all general ledger transactions](/#tag/General-Ledger/operation/ExternalApiGeneralLedgerTransactions_GetAllTransactions)\r\n      * [Retrieve all general ledger entries](#tag/General-Ledger/operation/ExternalApiGeneralLedger_GetGeneralLedgerEntries)\r\n  * `UnitId` has been added to the `Lines` property for lease accounting transactions response resources.\r\n      * [Retrieve all lease transactions](#tag/Lease-Transactions/operation/ExternalApiLeaseLedgerTransactions_GetLeaseLedgers)\r\n      * [Retrieve a lease transaction](#tag/Lease-Transactions/operation/ExternalApiLeaseLedgerTransactions_GetLeaseLedgerTransactionById)\r\n      * [Create a charge](#tag/Lease-Transactions/operation/ExternalApiLeaseLedgerChargesWrite_CreateCharge)\r\n      * [Update a charge](#tag/Lease-Transactions/operation/ExternalApiLeaseLedgerChargesWrite_UpdateLeaseCharge)\r\n      * [Create a payment](#tag/Lease-Transactions/operation/ExternalApiLeaseLedgerPaymentsWrite_CreatePayment)\r\n      * [Create a payment (auto allocated)](#tag/Lease-Transactions/operation/ExternalApiLeaseAutoAllocatedPayment_CreateLeaseAutoAllocatedPayment)\r\n      * [Create a payment reversal](#tag/Lease-Transactions/operation/ExternalApiLeaseLedgerPaymentReversalsWrite_CreateLeaseReversePayment)\r\n      * [Create a credit](#tag/Lease-Transactions/operation/ExternalApiLeaseLedgerCreditsWrite_CreateLeaseCredit)\r\n      * [Create a deposit withholding](#tag/Lease-Transactions/operation/ExternalApiLeaseLedgerDepositWithholding_CreateLeaseLedgerDepositWithholding)\r\n* Requests to [create a deposit](#tag/Bank-Accounts/operation/ExternalApiBankAccountDeposits_CreateBankAccountDeposit) that contain payment ids that do not exist or have already been deposited will include those payment ids in the error response.\r\n* The ability to update a ledger payment has been released for [leases](#tag/Lease-Transactions/operation/ExternalApiLeaseLedgerPaymentsWrite_UpdateLeaseLedgerPayment) and [ownership accounts](#tag/Ownership-Account-Transactions/operation/ExternalApiOwnershipAccountLedgerPayments_UpdateOwnershipAccountLedgerPayment).\r\n\r\n### 2023-12-12\r\n#### API Updates\r\n* File sharing resources have been released:\r\n  * [Retrieve a file's share settings](#tag/Files/operation/ExternalApiFileSharing_GetFileShareSettingsById)\r\n  * [Update a file's share settings](#tag/Files/operation/ExternalApiFileSharing_UpdateFileSharingSetting)\r\n* `TransactionTypeEnum` has been added as a property to lease and ownership account transaction response resources.\r\n* `MoveInDate` has been added as a property to each resource in the `Tenants` property of a lease resource.\r\n\r\n\r\n### 2023-11-14\r\n#### API Updates\r\n* The ability to set sharing options while [creating a resident request task](#tag/Resident-Requests/operation/ExternalApiResidentRequestTasks_CreateResource) has been released.\r\n* `AccountNumberUnmasked` has been added as a property to bank account response resources.\r\n* `DelinquencyStatus` has been added as a property to each Ownership Account in the response for association lockbox data response resources.\r\n\r\n### 2023-10-17\r\n#### API Updates\r\n* Check files endpoints have been released:\r\n  * [Retrieve all files for a check](#tag/Bank-Accounts/operation/ExternalApiBankAccountCheckFiles_GetFilesForBankAccountCheck)\r\n  * [Retrieve a file for a check](#tag/Bank-Accounts/operation/ExternalApiBankAccountCheckFiles_GetBankAccountCheckFileById)\r\n  * [Download a file for a check](#tag/Bank-Accounts/operation/ExternalApiBankAccountCheckFileDownloadRequests_DownloadCheckFile)\r\n  * [Upload a file for a check](#tag/Bank-Accounts/operation/ExternalApiBankAccountCheckFileUploads_CreateCheckUploadFileRequest)\r\n  * [Delete a file for a check](#tag/Bank-Accounts/operation/ExternalApiBankAccountCheckFiles_DeleteBankAccountCheckFile)\r\n* The ability to [create a payment for multiple bills with one check](#tag/Bills/operation/ExternalApiBillPaymentsWrite_CreateMultipleBillPayments) has been released.\r\n\r\n### 2023-09-19\r\n#### API Updates\r\n* Lease ePay settings endpoints have been released:\r\n  * [Retrieve ePay settings for a lease](#operation/ExternalApiLeaseEpaySettings_GetLeaseEpaySettingsById)\r\n  * [Update ePay settings for a lease](#operation/ExternalApiLeaseEpaySettings_UpdateLeaseEpaySettings)\r\n* The ability to filter [ownership accounts](#operation/ExternalApiOwnershipAccounts_GetAllOwnershipAccounts) and [associations](#operation/ExternalApiAssociations_GetAssociations) by ids has been released.\r\n\r\n### 2023-08-16\r\n#### API Updates\r\n* Rental owner contribution request endpoints have been released:\r\n  * [Retrieve contribution details included for a rental owner contribution request](#operation/ExternalApiRentalOwnerRequestTasks_GetRentalOwnerRequestTaskContributionData)\r\n  * [Update contribution details included for a rental owner contribution request](#operation/ExternalApiRentalOwnerRequestTasks_UpdateRentalOwnerRequestTaskContributionData)\r\n* The ability to [retrieve all association bank lockbox data](#operation/ExternalApiAssociationBankLockBoxData_GetBankLockBoxData) has been released.\r\n* The ability to create payments using configured allocation settings have been released:\r\n  * [Create a lease ledger payment with automatic allocations](#operation/ExternalApiLeaseAutoAllocatedPayment_CreateLeaseAutoAllocatedPayment)\r\n  * [Create an ownership account ledger payment with automatic allocations](#operation/ExternalApiOwnershipAccountAutoAllocatedPayment_CreateOwnershipAccountAutoAllocatedPayment)\r\n* Budget resources will now round values within the `MonthlyAmounts` collection to two decimal places.\r\n  \r\n### 2023-07-18\r\n#### API Updates\r\n* The ability to [retrieve all general ledger entries](#operation/ExternalApiGeneralLedger_GetGeneralLedgerEntries) has been released.\r\n* Retail cash user endpoints have been released:\r\n  * [Retrieve all retail cash users](#operation/ExternalApiRetailCashRead_GetRetailCashUsers)\r\n  * [Retrieve a retail cash user](#operation/ExternalApiRetailCashRead_GetRetailCashUser)\r\n  * [Update a retail cash user](#operation/ExternalApiRetailCashWrite_UpdateRetailCashUser)\r\n* `TaxInformation` has been added as a property to Association response resources.\r\n* `TaxInformation` has been added as an optional property when [creating an association](#operation/ExternalApiAssociations_CreateAssociation).\r\n\r\n#### Webhook Updates\r\n* New [webhook events](#section/Webhooks/Webhook-Events) have been added for the following resources:\r\n    - Vendor transactions\r\n  \r\n### 2023-06-20\r\n#### API Updates\r\n* The ability to [retrieve all lease renewals](#operation/ExternalApiLeaseRenewalsRead_GetAllLeaseRenewalsForAllProperties) has been released.\r\n* Image management endpoints have been released:\r\n  * Retrieve images for [rentals](#operation/ExternalApiRentalImages_GetRentalImages) and [rental units](#operation/ExternalApiRentalUnitImages_GetRentalUnitImages)\r\n  * Retrieve an image for [rentals](#operation/ExternalApiRentalImages_GetRentalImageById) and [rental units](#operation/ExternalApiRentalUnitImages_GetRentalUnitImageById)\r\n  * Update an image for [rentals](#operation/ExternalApiRentalImages_UpdateRentalImage) and [rental units](#operation/ExternalApiRentalUnitImages_UpdateRentalUnitImage)\r\n  * Delete an image for [rentals](#operation/ExternalApiRentalImages_DeleteRentalImage) and [rental units](#operation/ExternalApiRentalUnitImages_DeleteRentalUnitImage)\r\n  * Reorder images for [rentals](#operation/ExternalApiRentalImageOrder_ReorderRentalImages) and [rental units](#operation/ExternalApiRentalUnitImageOrder_ReorderRentalUnitImages) \r\n  * Upload photos for [rentals](#operation/ExternalApiRentalImageUploadRequests_CreateUploadFileRequestAsync) and [rental units](#operation/ExternalApiRentalUnitImageUploadRequests_CreateUploadFileRequestAsync)\r\n  * Create images using video links for [rentals](#operation/ExternalApiRentalImageVideoLinkRequests_CreateVideoLinkRequest) and [rental units](#operation/ExternalApiRentalUnitImageVideoLinkRequests_CreateUnitVideoLinkRequest)\r\n  * Download an image for [rentals](#operation/ExternalApiRentalImageDownloadRequests_GetRentalImageDownloadUrlById) and [rental units](#operation/ExternalApiRentalUnitImageDownloadRequests_GetRentalUnitImageDownloadUrlById)\r\n\r\n### 2023-05-16\r\n#### API Updates\r\n* `TenantIds` and `ApplicantIds` can optionally be provided to the [create a lease](#operation/LeasesExternalApi_CreateLease) endpoint.\r\n* The `Lines` property for recurring charge transactions is now populated on the following endpoints:\r\n  * [Retrieve all recurring transactions for a lease](#operation/LeaseRecurringTransactionsExternalApi_GetLeaseRecurringTransactions)\r\n  * [Retrieve all recurring transactions for an ownership account](#operation/OwnershipAccountRecurringTransactionsExternalApi_GetAssociationRecurringTransaction)\r\n* EPay settings endpoints have been released:\r\n  * [Retrieve EPay settings for a rental](#operation/RentalEpaySettingsExternalApi_GetEPaySettingsForRentalProperty)\r\n  * [Update EPay settings for a rental](#operation/RentalEpaySettingsExternalApi_UpdateEPaySettingsForRental)\r\n  * [Retrieve EPay settings for an association](#operation/AssociationsEPaySettingsExternalApi_GetEPaySettingsForAssociationById)\r\n  * [Update EPay settings for an association](#operation/AssociationsEPaySettingsExternalApi_UpdateEPaySettingsForAssociation)\r\n* The ability to inactivate or reactivate rentals and associations have been released:\r\n  * [Inactivate a rental](#operation/ExternalApiRentalsActiveStatus_InactivateRentalProperty)\r\n  * [Reactivate a rental](#operation/ExternalApiRentalsActiveStatus_ReactivateRentalProperty)\r\n  * [Inactivate an association](#operation/ExternalApiAssociationActiveStatus_InactivateAssociation)\r\n  * [Reactivate an association](#operation/ExternalApiAssociationActiveStatus_ReactivateAssociation)\r\n* Renters insurance endpoints have been released:\r\n  * [Retrieve all renters insurance policies](#operation/RentersInsuranceExternalApi_GetRentersInsurancePolicies)\r\n  * [Retrieve a renters insurance policy](#operation/RentersInsuranceExternalApi_GetRentersInsurancePolicyById)\r\n* Applicant `Status` has been added to the response for the following endpoints:\r\n  * [Retrieve all applicants](#operation/ApplicantsExternalApi_GetApplicants)\r\n  * [Retrieve an applicant](#operation/ApplicantsExternalApi_GetApplicantById)\r\n  * [Create an applicant](#operation/ApplicantsExternalApi_CreateApplicant)\r\n\r\n### 2023-04-18\r\n#### API Updates\r\n* The ability to retrieve accounting lock periods has been released:\r\n  - [Retrieve accounting lock periods](#operation/AccountingLockPeriodExternalApi_GetAccountingLockPeriodSettings)\r\n* Email related endpoints have been released:\r\n  - [Retrieve all emails](#operation/EmailsExternalApi_GetEmails)\r\n  - [Retrieve an email](#operation/EmailsExternalApi_GetEmailById)\r\n  - [Create an email](#operation/EmailsExternalApiWrite_CreateEmail)\r\n  - [Retrieve all email recipients](#operation/EmailsExternalApi_GetEmailRecipients)\r\n  - [Retrieve all communication templates](#operation/MailingTemplatesExternalApi_GetMailingTemplates)\r\n  - [Retrieve a communication template](#operation/MailingTemplatesExternalApi_GetMailingTemplatesById)\r\n* The ability to retrieve resident center users has been released:\r\n  - [Retrieve all resident center users](#operation/ResidentCenterUsersExternalApi_GetResidentCenterUsers)\r\n* Vendor transaction related endpoints have been released:\r\n  - [Create a credit](#operation/VendorCreditsWriteExternalApi_CreateVendorCredit)\r\n  - [Retrieve a credit](#operation/VendorCreditsExternalApi_GetVendorCredit)\r\n  - [Create a refund](#operation/VendorRefundsWriteExternalApi_CreateVendorRefund)\r\n  - [Retrieve a refund](#operation/VendorRefundsExternalApi_GetVendorRefund)\r\n* Lease and ownership account deposit and charge related endpoints have been released:\r\n  - [Create an ownership account deposit withholding](#operation/OwnershipAccountDepositWithholdingExternalApi_CreateOwnershipAccountDepositWithholding)\r\n  - [Update an ownership account charge](#operation/OwnershipAccountsLedgerExternalApi_UpdateOwnershipAccountCharge)\r\n  - [Create a lease deposit withholding](#operation/LeaseLedgerDepositWithholdingExternalApi_CreateLeaseLedgerDepositWithholding)\r\n  - [Update a lease charge](#operation/LeaseLedgerTransactionsExternalApi_UpdateLeaseCharge)\r\n* The [create a lease](#operation/LeasesExternalApi_CreateLease) endpoint now includes the ability to provide amounts for `ProratedFirstMonthRent` and `ProratedLastMonthRent`.\r\n\r\n### 2023-03-21\r\n#### API Updates\r\n* Property groups related endpoints have been released:\r\n    - [Retrieve all property groups](#operation/PropertyGroupsExternalApi_GetPropertyGroups)\r\n    - [Retrieve a property group](#operation/PropertyGroupsExternalApi_GetPropertyGroupById)\r\n    - [Create a property group](#operation/PropertyGroupsExternalApi_CreatePropertyGroup)\r\n    - [Update a property group](#operation/PropertyGroupsExternalApi_UpdatePropertyGroup)\r\n* Bill files related endpoints have been released:\r\n    - [Retrieve all files for a bill](#operation/BillsFilesExternalApi_GetAllFilesForBill)\r\n    - [Retrieve a file for a bill](#operation/BillsFilesExternalApi_GetBillFileById)\r\n    - [Upload a bill file](#operation/BillFileUploadsExternalApi_CreateUploadFileRequest)\r\n    - [Download a bill file](#operation/BillsFilesExternalApi_DownloadBillFile)\r\n    - [Delete a bill file](#operation/BillsFilesExternalApi_DeleteBillFile)\r\n* Bill payment creation has been released:\r\n    - [Create a bill payment](#operation/BillPaymentsWriteExternalApi_CreateBillPayment)\r\n* Bills can now be filtered by approval statuses:\r\n    - [Retrieve all bills](#operation/BillsExternalApi_GetBillsAsync)\r\n* The bill message now includes an `ApprovalStatus` field.\r\n* The lease message now includes a `Tenants` collection, which includes the `Id` and `Status` of all tenants that have ever been associated with the lease.\r\n* The [create a property](#operation/RentalsExternalApi_CreateRentalProperty) now includes an optional `Units` field for providing unit information for the rental property being created.\r\n\r\n### 2023-02-21\r\n#### API Updates\r\n* Lease renewal related endpoints have been released:\r\n    - [Retrieve all lease renewals](#operation/LeaseRenewalsExternalApiRead_GetAllLeaseRenewals)\r\n    - [Retrieve a lease renewal](#operation/LeaseRenewalsExternalApiRead_GetLeaseRenewalById)\r\n    - [Create a lease renewal](#operation/LeaseRenewalsExternalApiWrite_CreateLeaseRenewal)\r\n\r\n### 2022-12-13\r\n#### API Updates\r\n* Accounting related endpoints have been released:\r\n    - [Create a general ledger account](#operation/GeneralLedgerAccountsExternalApi_CreateGeneralLedgerAccount)\r\n    - [Update a general ledger account](#operation/GeneralLedgerAccountsExternalApi_UpdateGLAccount)\r\n* The general ledger account message will now include `DefaultAccountName` and `ParentGLAccountId`.\r\n* Filtering by last updated date and time capabilities have been released for the following endpoint:\r\n    - [Retrieve all leases](#operation/LeasesExternalApi_GetLeases)\r\n* The lease message will now include `LastUpdatedDateTime`.\r\n\r\n### 2022-11-15\r\n#### API Updates\r\n* Endpoints for announcements have been released:\r\n    - [Retrieve all announcements](#operation/AnnouncementsExternalApi_GetAllAnnouncements)\r\n    - [Retrieve an announcement](#operation/AnnouncementsExternalApi_GetAnnouncementById)\r\n    - [Retrieve all announcement properties](#operation/AnnouncementsExternalApi_GetAnnouncementProperties)\r\n    - [Create an announcement](#operation/AnnouncementsExternalApi_CreateAnnouncement)\r\n    - [Expire an announcement](#operation/AnnouncementsExpirationExternalApi_ExpireAnnouncement)\r\n* The [create an owner](#operation/RentalOwnersExternalApi_CreateRentalOwner) endpoint now accepts optional tax information.\r\n* The [retrieve all owners](#operation/RentalOwnersExternalApi_GetRentalOwners) and [retrieve an owner](#operation/RentalOwnersExternalApi_GetRentalOwnerById) endpoints now return tax information.\r\n\r\n### 2022-10-18\r\n#### API Updates\r\n* Task history related endpoints have been released! You can now retrieve and update task history notes as well as upload and download task history file attachments.\r\n    - [Retrieve all task history](#operation/TaskHistoryExternalApi_GetTaskHistories)\r\n    - [Retrieve a task history](#operation/TaskHistoryExternalApi_GetTaskHistoryById)\r\n    - [Update a task history](#operation/TaskHistoryExternalApi_UpdateTaskHistory)\r\n    - [Retrieve task history file meta data](#operation/TaskHistoryFilesExternalApi_GetAllTaskHistoryFiles)\r\n    - [Upload a task history file](#operation/TaskHistoryFileUploadsExternalApi_CreateUploadFileRequestAsync)\r\n    - [Download a task history file](#operation/TaskHistoryFileDownloadsExternalApi_GetFileDownloadRequest)\r\n    - [Delete a task history file](#operation/TaskHistoryFilesExternalApi_DeleteTaskHistoryFile)\r\n\r\n#### Webhook Updates\r\n* New [webhook events](#section/Webhooks/Webhook-Events) have been added for the following resources: \r\n    - Bank Accounts\r\n    - Bank Account Transactions\r\n    - Bills\r\n    - Bill Payments\r\n    - Budgets\r\n    - General Ledger Accounts\r\n    - Phone logs\r\n\r\n### 2022-09-20\r\n#### API Updates\r\n* Accounting related endpoints have been released:\r\n    - [Create a general journal entry](#operation/GeneralJournalEntriesExternalApi_CreateGeneralJournalEntry)\r\n    - [Update a general journal entry](#operation/GeneralJournalEntriesExternalApi_UpdateGeneralJournalEntry)\r\n    - [Retrieve a lease ledger refund](#operation/LeaseLedgerRefundsExternalApi_GetLeaseLedgerRefundById)\r\n    - [Create a lease ledger refund](#operation/LeaseLedgerRefundsExternalApi_CreateLeaseLedgerRefund)\r\n    - [Retrieve an ownership account refund](#operation/OwnershipAccountRefundExternalApi_GetOwnershipAccountRefundById)\r\n    - [Create and ownership account refund](#operation/OwnershipAccountRefundExternalApi_CreateOwnershipAccountRefund)\r\n\r\n#### Webhook Updates\r\n* Webhooks have been released! Please refer to the [Webhooks](#section/Webhooks) section of the documentation for more details.\r\n\r\n### 2022-08-16\r\n#### API Updates\r\n* The [retrieve account info](#operation/AdministrationExternalApi_GetAccountInfo) endpoint now includes `Id` and `Url` fields. \r\n* Endpoints for recurring transactions have been released for leases:\r\n  - [Retrieve all recurring transactions](#operation/LeaseRecurringTransactionsExternalApi_GetLeaseRecurringTransactions) \r\n  - [Retrieve a recurring charge](#operation/LeaseChargeRecurringTransactionsExternalApi_GetLeaseChargeRecurringTransactionById)\r\n  - [Create a recurring charge](#operation/LeaseChargeRecurringTransactionsExternalApi_CreateLeaseChargeRecurringTransaction)\r\n  - [Retrieve a recurring payment](#operation/LeaseRecurringPaymentsExternalApi_GetRecurringLeasePaymentsById)\r\n  - [Create a recurring payment](#operation/LeaseRecurringPaymentsExternalApi_CreateLeaseRecurringPayment)\r\n  - [Retrieve a recurring credit](#operation/LeaseRecurringCreditsExternalApi_GetLeaseRecurringCreditById)\r\n  - [Create a recurring credit](#operation/LeaseRecurringCreditsExternalApi_CreateLeaseCreditRecurringTransaction)\r\n* Endpoints for recurring transactions have been released for ownership accounts:\r\n  - [Retrieve all recurring transactions](#operation/OwnershipAccountRecurringTransactionsExternalApi_GetAssociationRecurringTransaction)\r\n  - [Retrieve a recurring charge](#operation/OwnershipAccountChargeRecurringTransactionsExternalApi_GetOwnershipAccountsChargeRecurringTransactionById)\r\n  - [Create a recurring charge](#operation/OwnershipAccountChargeRecurringTransactionsExternalApi_CreateOwnershipAccountsChargeRecurringTransaction)\r\n  - [Retrieve a recurring payment](#operation/OwnershipAccountRecurringPaymentsExternalApi_GetRecurringOwnershipAccountPaymentsById)\r\n  - [Create a recurring payment](#operation/OwnershipAccountRecurringPaymentsExternalApi_CreateOwnershipAccountRecurringPayment)\r\n  - [Retrieve a recurring credit](#operation/OwnershipAccountRecurringCreditsExternalApi_GetOwnershipAccountRecurringCreditById)\r\n  - [Create a recurring credit](#operation/OwnershipAccountRecurringCreditsExternalApi_CreateOwnershipAccountCreditRecurringTransaction)\r\n* The [Create Resident Requests](#operation/ResidentRequestTasksExternalApi_CreateResource) endpoint now supports `IsEntryPermittedByResident`, `DoesResidentHavePets`, and `ResidentEntryNotes` as optional inputs.\r\n\r\n### 2022-07-19 \r\n#### API Updates\r\n* The general ledger account message will now include the account's status. This value comes back in a property named `IsActive` on the following endpoints:\r\n  - [Retrieve all bills](#operation/BillsExternalApi_GetBillsAsync)\r\n  - [Create a bill](#operation/BillsExternalApi_CreateBill)\r\n  - [Retrieve a bill](#operation/BillsExternalApi_GetBillById)\r\n  - [Update a bill](#operation/BillsExternalApi_UpdateBill)\r\n  - [Retrieve all general ledger transactions](#operation/GeneralLedgerExternalApi_GetAllTransactions)\r\n  - [Retrieve a general ledger transaction](#operation/GeneralLedgerExternalApi_GetTransactionById)\r\n  - [Retrieve all general ledger accounts](#operation/AccountingExternalApi_GetAllGLAccounts)\r\n  - [Retrieve a general ledger account](#operation/AccountingExternalApi_GetGlAccountById)\r\n  - [Retrieve all general ledger account balances](#operation/GLAccountBalancesExternalApi_GetGlAccountBalances)\r\n  - [Retrieve all bank accounts](#operation/BankAccountsExternalApi_GetAllBankAccounts)\r\n  - [Create a bank account](#operation/BankAccountsExternalApi_CreateBankAccount)\r\n  - [Retrieve a bank account](#operation/BankAccountsExternalApi_GetBankAccount)\r\n  - [Update a bank account](#operation/BankAccountsExternalApi_UpdateBankAccount)\r\n  - [Retrieve a transfer](#operation/BankAccountTransfersExternalApi_GetBankAccountTransferById)\r\n  - [Create a ledger charge](#operation/OwnershipAccountsLedgerExternalApi_CreateCharge)\r\n  - [Create a ledger credit](#operation/OwnershipAccountsLedgerExternalApi_CreateOwnershipAccountCredit)\r\n  - [Create a ledger payment](#operation/OwnershipAccountsLedgerExternalApi_CreateOwnershipAccountLedgerPayment)\r\n  - [Retrieve ownership account transactions](#operation/OwnershipAccountsLedgerExternalApi_GetOwnershipAccountLedger)\r\n  - [Retrieve an ownership account transaction](#operation/OwnershipAccountsLedgerExternalApi_GetOwnershipAccountTransactionById)\r\n  - [Create a charge](#operation/LeaseLedgerTransactionsExternalApi_CreateCharge)\r\n  - [Create a credit](#operation/LeaseLedgerTransactionsExternalApi_CreateLeaseCredit)\r\n  - [Create a payment](#operation/LeaseLedgerTransactionsExternalApi_CreatePayment)\r\n  - [Create a payment reversal](#operation/LeaseLedgerTransactionsExternalApi_CreateLeaseReversePayment)\r\n  - [Retrieve all lease transactions](#operation/LeaseLedgerTransactionsExternalApi_CreateLeaseReversePayment)\r\n  - [Retrieve a lease transaction](#operation/LeaseLedgerTransactionsExternalApi_GetLeaseLedgers)\r\n* Filtering by last updated date and time capabilities have been released for the following endpoint:\r\n  - [Retrieve all vendors](#operation/VendorsExternalApi_GetAllVendors)\r\n\r\n### 2022-06-14\r\n#### API Updates\r\n* Budgets capabilities have been released including:\r\n  - The ability to [retrieve all budgets](#operation/BudgetsExternalApi_GetBudgets)\r\n  - The ability to [retrieve a budget](#operation/BudgetsExternalApi_GetBudgetById)\r\n  - The ability to [create a budget](#operation/BudgetsExternalApi_CreateBudget)\r\n  - The ability to [update a budget](#operation/BudgetsExternalApi_UpdateBudget)\r\n\r\n### 2022-05-24\r\n#### API Updates\r\n* When [creating a resident request](#operation/ResidentRequestTasksExternalApi_CreateResource), if AssignedToUserId is not provided, assignment rules in the resident center settings (if configured) will be used for assignment.\r\n* Filtering by last updated date and time capabilities have been released for the following endpoints:\r\n  - [Associations](#operation/AssociationsExternalApi_GetAssociations) \r\n  - [Association units](#operation/AssociationUnitsExternalApi_GetAllAssociationUnits)\r\n  - [Association owners](#operation/AssociationOwnersExternalApi_GetAllAssociationOwners)\r\n  - [Association tenants](#operation/AssociationTenantsExternalApi_GetAssociationTenants)\r\n  - [Rental properties](#operation/RentalsExternalApi_GetAllRentals)\r\n  - [Rental units](#operation/RentalUnitsExternalApi_GetAllRentalUnits)\r\n  - [Rental owners](#operation/RentalOwnersExternalApi_GetRentalOwners)\r\n  - [Rental tenants](#operation/RentalTenantsExternalApi_GetAllTenants)\r\n\r\n### 2022-04-19\r\n#### API Updates\r\n* Preferred vendor capabilities have been released including:\r\n  - The ability to [retrieve](#operation/AssociationPreferredVendorsExternalApi_GetAssociationPreferredVendors) and [update](#operation/AssociationPreferredVendorsExternalApi_UpdateAssociationPreferredVendors) preferred vendors for associations.\r\n  - The ability to [retrieve](#operation/RentalPreferredVendorsExternalApi_GetRentalPreferredVendors) and [update](#operation/RentalPreferredVendorsExternalApi_UpdateRentalPreferredVendors) preferred vendors for rental properties.\r\n\r\n### 2022-03-22\r\n#### API Updates\r\n* [Association owners](#operation/AssociationOwnersExternalApi_GetAllAssociationOwners), [association tenants](#operation/AssociationTenantsExternalApi_GetAssociationTenants) and [board members](#operation/AssociationBoardMembersExternalApi_GetAllAssociationBoardMembers) are now filterable by their created date and time.\r\n* Appliance information and service history is now available for [associations](#tag/Association-Appliances) and [rental properties](#tag/Rental-Appliances).\r\n* [Lease rent schedules](#operation/LeaseRentExternalApi_GetRent) are now available.\r\n\r\n\r\n### 2022-02-15\r\n#### API Updates\r\n* Additional rental data is now available including:\r\n  - The ability to retrieve and update rental amenities for properties and units.\r\n  - The ability to [retrieve](#operation/LeasesExternalApi_GetLeaseMoveOutInformationById), [create](#operation/LeasesExternalApi_CreateMoveOutData) and [delete](#operation/LeasesExternalApi_UndoTenantMoveout) lease move out dates.\r\n  - The ability to [create a payment reversal](#operation/LeaseLedgerTransactionsExternalApi_CreateLeaseReversePayment).\r\n* Additional applicant capabilities are available including:\r\n  - The ability to [retrieve](#operation/ApplicantNotesExternalApi_GetAllApplicantNotes) and [create](#operation/ApplicantNotesExternalApi_CreateApplicantNote) applicant notes.\r\n  - When an applicant is converted to a tenant a new `TenantId` field on the applicant message will link the two resources.\r\n  - The ability to filter the [Retrieve all Applicants](#operation/ApplicantsExternalApi_GetApplicants) endpoint by email address.\r\n* The ability to [retrieve file metadata](#operation/FilesExternalApi_GetFiles) as well as [upload](#operation/FilesUploadsExternalApi_CreateUploadFileRequestAsync) and [download](#operation/FileDownloadExternalApi_GetFileDownloadUrlAsync) files related to the following resources - Accounts, Associations, Association Owners, Association Units, Leases, Ownership Accounts, Public Assets, Rentals, Rental Owners, RentalUnits, Tenants and Vendors.\r\n\r\n\r\n### 2022-01-18\r\n#### API Updates\r\n* Additional association data is now available including:\r\n  - The ability [retrieve](#operation/AssociationBoardMembersExternalApi_GetAllAssociationBoardMembers), [create](#operation/AssociationBoardMembersExternalApi_CreateBoardMember) and [delete](#operation/AssociationBoardMembersExternalApi_DeleteBoardMember) association board members.\r\n  - Association fiscal month and day can now be retrieved and updated as part of the Association endpoints.\r\n  - Staff members can now be assigned as the association manager for a given association.\r\n* Additional association owner data is now available including:\r\n  - Association owner occupancy status can be [retrieved](#operation/AssociationOwnersExternalApi_GetUnitOccupancyStatusesForAssociationOwner) and [updated](#operation/AssociationOwnersExternalApi_UpdateAssociationOwnerOccupancyStatus).\r\n  - Association owner tax payer identification number can be retrieved and updated as part of the association owner endpoints.\r\n  - The date and time the association owner record was created is now being returned in the response payload.\r\n* Additional association tenant features are now available including:\r\n  - The ability to set the move out date.\r\n  - The date and time the association tenant record was created is now being returned in the response payload.\r\n* [Updating bills](#operation/BillsExternalApi_UpdateBill) now includes the ability to edit line items.\r\n* The ability to retrieve [client leads](#tag/Client-Leads) has been introduced. Note, this data is only available if you have an [All Property Management](https://www.allpropertymanagement.com/) account.\r\n\r\n### 2021-12-14\r\n#### API Updates\r\n* Additional bank account endpoints have been added to retrieve, create and update bank accounts and bank account transactions.\r\n\r\n### 2021-11-16\r\n#### API Updates\r\n* The URL to the rental application for listings is now being returned in a new property called `RentalApplicationUrl`. This new property is included in the following endpoints:\r\n  - [Retrieve all listings](#operation/ListingsExternalApi_GetListingsAsync)\r\n  - [Retrieve a listing](#operation/ListingsExternalApi_GetListingForUnitAsync)\r\n  - [Create a listing](#operation/ListingsExternalApi_UpsertListingsAsync)\r\n* `AssignedToUserId` is no longer required as input for the following endpoints:\r\n  - [Create a rental owner request](#operation/RentalOwnerRequestTasksExternalApi_CreateRentalOwnerRequestTask)\r\n  - [Update a rental owner request](#operation/RentalOwnerRequestTasksExternalApi_UpdateRentalOwnerRequestTask)\r\n  - [Create a resident request](#operation/ResidentRequestTasksExternalApi_CreateResource)\r\n  - [Update a resident request](#operation/ResidentRequestTasksExternalApi_UpdateResource)\r\n* Ability to retrieve a single association ownership account transaction has been released:\r\n  - [Retrieve a single ownership account transaction](#operation/OwnershipAccountsLedgerExternalApi_GetOwnershipAccountTransactionById)\r\n\r\n### 2021-10-19\r\n#### API Updates\r\n* The taxpayer identifier for rental tenants is now being returned in a new property named `TaxId`. This new property is included in the following endpoints:\r\n  - [Retrieve all tenants](#operation/TenantsExternalApi_GetAllTenants)\r\n  - [Retrieve a tenant](#operation/TenantsExternalApi_GetTenantById)\r\n  - [Create a rental tenant](#operation/TenantsExternalApi_CreateRentalTenant)\r\n  - [Update a rental tenant](#operation/TenantsExternalApi_UpdateRentalTenant)\r\n  - [Retrieve all leases](#operation/LeasesExternalApi_GetLeases)\r\n  - [Retrieve a lease](#operation/LeasesExternalApi_GetLeaseById)\r\n  - [Create a lease](#operation/LeasesExternalApi_CreateLease)\r\n  - [Update a lease](#operation/LeasesExternalApi_UpdateLease)\r\n* The lease message has been updated to include the day of the month the tenant payments are due. This value comes back in a property named `PaymentDueDay` on the following the following endpoints:\r\n  - [Retrieve all leases](#operation/LeasesExternalApi_GetLeases)\r\n  - [Retrieve a lease](#operation/LeasesExternalApi_GetLeaseById)\r\n  - [Create a lease](#operation/LeasesExternalApi_CreateLease)\r\n  - [Update a lease](#operation/LeasesExternalApi_UpdateLease)\r\n* Rental and association messages will now include the operating bank account identifier. This value comes back in a new property named `OperatingBankAccountId` on the following endpoints:\r\n  - [Retrieve all associations](#operation/AssociationsExternalApi_GetAssociations)\r\n  - [Retrieve an association](#operation/AssociationsExternalApi_GetAssociationById)\r\n  - [Create an association](#operation/AssociationsExternalApi_CreateAssociation)\r\n  - [Update an association](#operation/AssociationsExternalApi_UpdateAssociation)\r\n  - [Retrieve all rental properties](#operation/RentalsExternalApi_GetAllRentals)\r\n  - [Retrieve a rental property](#operation/RentalsExternalApi_GetRentalById)\r\n  - [Create a rental property](#operation/RentalsExternalApi_CreateRentalProperty)\r\n  - [Update a rental property](#operation/RentalsExternalApi_UpdateRentalProperty)\r\n\r\n### 2021-09-21\r\n#### API Updates\r\n* Outstanding balance resource capabilities have been released. Outstanding balances can be retrieved for the following resources:\r\n  - [Leases](#operation/LeasesExternalApi_GetLeaseOutstandingBalances)\r\n  - [Ownership Accounts](#operation/OwnershipAccountsExternalApi_GetOwnershipAccountOutstandingBalances)\r\n* Work order id will be returned on bills, and is an optional input for creating a bill:\r\n  - [Retrieve all bills](#operation/BillsExternalApi_GetBillsAsync)\r\n  - [Retrieve a bill](#operation/BillsExternalApi_GetBillById)\r\n  - [Create a bill](#operation/BillsExternalApi_CreateBill)\r\n\r\n\r\n### 2021-08-24\r\n#### API Updates\r\n* Note read and write capabilities have been released. Notes can be retrieved, created, updated for the following resources:\r\n  - Rentals - [properties](#operation/RentalsExternalApi_GetRentalNotes), [units](#operation/RentalsExternalApi_GetRentalUnitNotes), [owners](#operation/RentalsExternalApi_GetRentalOwnerNotes), [leases](#operation/LeasesExternalApi_GetLeaseNotes) and [tenants](#operation/TenantsExternalApi_GetAllTenantNotes)\r\n  - Associations - [properties](#operation/AssociationsExternalApi_GetAssociationNotes), [units](#operation/AssociationsExternalApi_GetAssociationUnitNotes), [owners](#operation/AssociationOwnersExternalApi_GetAssociationOwnerNotes), [ownership accounts](#operation/OwnershipAccountsExternalApi_GetAssociationOwnershipAccountNotes) and [tenants](#operation/AssociationTenantsExternalApi_GetAssociationTenantNotes)\r\n  - [Vendors](#operation/VendorExternalApi_GetVendorNotes)\r\n  - [Applicant Groups](#operation/ApplicantGroupsExternalApi_GetApplicantGroupNotes)\r\n\r\n\r\n\r\n### 2021-07-20\r\n#### API Updates\r\n* Rental applicant, applicant groups and application write capabilities have been released. These new endpoints will support creating and updating rental applicants and applicant groups as well as enabling the updating of rental application statuses.\r\n  - [Create an Applicant Group](#operation/ApplicantGroupsExternalApi_CreateApplicantGroup)\r\n  - [Update an Applicant Group](#operation/ApplicantGroupsExternalApi_UpdateApplicantGroup)\r\n  - [Create an Applicant](#operation/ApplicantsExternalApi_CreateApplicant)\r\n  - [Update an Applicant](#operation/ApplicantsExternalApi_UpdateApplicant)\r\n  - [Update an Application](#operation/ApplicantsExternalApi_UpdateApplication)\r\n\r\n\r\n### 2021-06-22\r\n#### API Updates\r\n* Bill and bill payment resources have been released. These new endpoints will support retrieve, create and update functionality for bills and retrieve functionality for bill payments. Creating and updating bill payments will be available in a future release.\r\n  - [Retrieve bills](#operation/BillsExternalApi_GetBillsAsync)\r\n  - [Create a bill](#operation/BillsExternalApi_CreateBill)\r\n  - [Update a bill](#operation/BillsExternalApi_UpdateBill)\r\n  - [Retrieve bill payments](#operation/BillsExternalApi_GetBillPayments)\r\n* Rental applicant, applicant groups and application read capabilities have been released. These new endpoints will support retrieving rental applicants, applicant groups and their rental applications. Creating and updating applicants and applicant groups will be available in a future release.\r\n  - [Retrieve Applicant Groups](#operation/ApplicantGroupsExternalApi_GetApplicantGroups)\r\n  - [Retrieve Applicants](#operation/ApplicantsExternalApi_GetApplicants)\r\n  - [Retrieve Applications](#operation/ApplicantsExternalApi_GetApplicationsForApplicant)\r\n* Rental leases can now be filtered by the date and time they were created. The lease created date and time are also being returned as part of the lease response message.\r\n  - [Retrieve all leases](#operation/LeasesExternalApi_GetLeases)\r\n\r\n\r\n\r\n### 2021-05-18\r\n#### API Updates\r\n* Work order resources have been released. These new endpoints will support retrieve, create and update functionality for work orders. Review the [Work Order](#tag/Work-Orders) documentation for more information.\r\n* Create capabilities have been released for association ownership account and rental lease ledger transactions. These new endpoints will allow for the creation of ledger charges, payments and credits.\r\n  - [Create Rental Lease Ledger Payments](#operation/LeaseLedgerTransactionsExternalApi_CreatePayment)\r\n  - [Create Rental Lease Ledger Credits](#operation/LeaseLedgerTransactionsExternalApi_CreateLeaseCredit)\r\n  - [Create Association Ownership Account Ledger Charges](#operation/OwnershipAccountsLedgerExternalApi_CreateCharge)\r\n  - [Create Association Ownership Account Ledger Payments](#operation/OwnershipAccountsLedgerExternalApi_CreateOwnershipAccountLedgerPayment)\r\n  - [Create Association Ownership Account Ledger Credits](#operation/OwnershipAccountsLedgerExternalApi_CreateOwnershipAccountCredit)\r\n\r\n\r\n### 2021-04-20\r\n#### API Updates\r\n* Task resources have been released. These new endpoints will support retrieve, create and update functionality for all task request types. Review the [Tasks](#tag/Tasks) documentation for more information.\r\n* Vendor create and update capabilities have been released. These new endpoints will support creating and updating vendors.\r\n  - [Create Vendors](#operation/VendorExternalApi_CreateVendor)\r\n  - [Update Vendors](#operation/VendorExternalApi_UpdateVendor)\r\n\r\n### 2021-02-16\r\n#### API Updates\r\n* Phone log resources have been released. These new endpoints will support create, update and retrieve functionality for [phone logs](#operation/PhoneLogsExternalApi_GetPhoneLogs).\r\n* Enhancements to the leases resource have been released. These new endpoints will support create and update functionality for [leases](#operation/LeasesExternalApi_CreateLease).\r\n* Ability to filter by phone has been released for the following:\r\n  - [Rental Owners](#operation/RentalsExternalApi_GetRentalOwners)\r\n  - [Vendors](#operation/VendorExternalApi_GetAllVendors)\r\n\r\n### 2020-12-15\r\n#### API Updates\r\n* Rental listing resources have been released. These new endpoints will support create and retrieve functionality for:\r\n  - [Listing Contacts](#operation/ListingContactsExternalApi_GetAllListingContacts)\r\n  - [Listings](#operation/ListingsExternalApi_GetListingsAsync)\r\n\r\n### 2020-11-17\r\n#### API Updates\r\n* Create capabilities have been released for the following resources:\r\n  - [Rental Tenants](#operation/TenantsExternalApi_CreateRentalTenant)\r\n  - [Association Ownership Accounts](#operation/OwnershipAccountsExternalApi_CreateAssociationOwnershipAccount)\r\n  - [Association Owners](#operation/AssociationOwnersExternalApi_CreateAssociationOwner)\r\n* Update capabilities have been released for the following resources:\r\n  - [Rental Tenants](#operation/TenantsExternalApi_UpdateRentalTenant)\r\n  - [Association Owners](#operation/AssociationOwnersExternalApi_UpdateAssociationOwner)\r\n* Retrieve all [Association Owners](#operation/AssociationOwnersExternalApi_GetAllAssociationOwners) and [Association Tenants](#operation/AssociationTenantsExternalApi_GetAssociationTenants) can now be filtered by statuses: `Active`, `Past` and `Future`.\r\n* The [rental tenant](#operation/TenantsExternalApi_CreateRentalTenant) message now returns the following properties:\r\n  - `AlternateEmail`\r\n  - `Comment`\r\n  - `MailingPreference`\r\n* The [rental property](#operation/RentalsExternalApi_GetRentalById) message now includes the following properties:\r\n  - `OperatingBankAccountId`\r\n  - `Reserve`\r\n* The [Association Ownership Account](#operation/OwnershipAccountsExternalApi_GetOwnershipAccountById) message now includes `AssociationOwnerIds` which is a list of all of the association owner identifiers that belong to the ownership account.\r\n\r\n### 2020-10-20\r\n#### API Updates\r\n* Create capabilities have been released for the following resources:\r\n  - [Rental Properties](#operation/RentalsExternalApi_CreateRentalProperty)\r\n  - [Rental Owners](#operation/RentalsExternalApi_CreateRentalOwner)\r\n  - [Rental Units](#operation/RentalsExternalApi_CreateRentalUnit)\r\n  - [Asssociation Properties](#operation/AssociationsExternalApi_CreateAssociation)\r\n  - [Asssociation Units](#operation/AssociationsExternalApi_CreateAssociationUnit)\r\n  - [Asssociation Tenants](#operation/AssociationTenantsExternalApi_CreateAssociationTenant)\r\n* Update capabilities have been released for the following resources:\r\n  - [Rental Properties](#operation/RentalsExternalApi_UpdateRentalProperty)\r\n  - [Rental Owners](#operation/RentalsExternalApi_UpdateRentalOwner)\r\n  - [Rental Units](#operation/RentalsExternalApi_UpdateRentalUnit)\r\n  - [Asssociation Properties](#operation/AssociationsExternalApi_UpdateAssociation)\r\n  - [Asssociation Units](#operation/AssociationsExternalApi_UpdateAssociationUnit)\r\n  - [Asssociation Tenants](#operation/AssociationTenantsExternalApi_UpdateAssociation)\r\n\r\n#### Feature Enhancements\r\n* Sandbox environments can now be created for developing and testing your integrations. Learn more about how to take advantage of this new capability in the [API Sandbox](#section/API-Sandbox) section of the documentation.\r\n\r\n### 2020-09-15\r\n#### API Updates\r\n* General ledger account balances are now available through the [Retrieve all general ledger account balances](#operation/GLAccountBalancesExternalApi_GetGlAccountBalances) endpoint. This new endpoint provides the ability to retrieve the general ledger account balances as of a given date.\r\n\r\n### 2020-08-18\r\n#### API Updates\r\n* General ledger transactions are now available through the [Retrieve all general ledger transactions](#operation/GeneralLedgerExternalApi_GetAllTransactions) endpoint. These new endpoints provide the ability to retrieve all transactions or use a set of filters including specific rental/association properties, rental owners, date ranges, and others to find specific transactions.\r\n\r\n### 2020-07-21\r\n#### API Updates\r\n* [Association Owners](#operation/AssociationOwnersExternalApi_GetAllAssociationOwners) response message now returns board member terms including the start date, end date and position.\r\n* Two new resources were added to retrieve [Users](#operation/UsersExternalApi_GetAllUsers) and [User Roles](#operation/UserRolesExternalApi_GetAllUserRoles).\r\n* The [general ledger](#operation/AccountingExternalApi_GetAllGLAccounts) response message now includes the property `IsBankAccount`. This is a boolean property that indicates whether the general ledger account is also a bank account.\r\n* A `Country` property has been added to all Address messages. This property contains an enumeration indicating the country of the address. \r\n",
    "version": "v1",
    "x-logo": {
      "url": "Buildium-RP-Color-Logo.png",
      "backgroundColor": "#FFFFFF",
      "altText": "Buildium Logo",
      "href": "https://www.buildium.com"
    }
  },
  "servers": [
    {
      "url": "https://api.buildium.com/"
    }
  ],
  "paths": {
    "/v1/applications/{applicationId}/transactions": {
      "get": {
        "tags": [
          "Application Transactions"
        ],
        "summary": "Retrieve all application transactions",
        "description": "Retrieves all the transactions for a specific application.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View`",
        "operationId": "ExternalApiApplicationLedgerTransactions_GetApplicationTransactions",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filters results to specific transactions by their unique identifiers.\r\nIf not specified, all application transactions will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "transactiondatefrom",
            "in": "query",
            "description": "Filters results to any application transaction whose start date is greater than or equal to the specified value.\r\nThe date must be formatted as YYYY-MM-DD",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "transactiondateto",
            "in": "query",
            "description": "Filters results to any application transaction whose end date is less than or equal to the specified value.\r\nThe date must be formatted as YYYY-MM-DD",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "transactiontypes",
            "in": "query",
            "description": "Filters results to any application transaction whose application transaction type matches the specified types.\r\nIf no type is specified, application transactions with any type will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Charge",
                  "Payment",
                  "Refund",
                  "ReversePayment",
                  "UnreversedPayment"
                ],
                "type": "string",
                "description": "Indicates the type of application transaction"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationTransactionMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 1
      },
      "x-path-sort-index": 1
    },
    "/v1/associations": {
      "get": {
        "tags": [
          "Associations"
        ],
        "summary": "Retrieve all associations",
        "description": "Retrieves a list of associations.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View`",
        "operationId": "ExternalApiAssociations_GetAssociations",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "Filters results to the specified set of ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "location",
            "in": "query",
            "description": "Filters results to any association whose city or state *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filters results by the status of the association. If no status is specified both `active` and `inactive` associations will be returned.",
            "schema": {
              "enum": [
                "Active",
                "InActive"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to any associations that were updated on or after the specified date. The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to any associations that were updated on or before the specified date. The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "operatingbankaccountids",
            "in": "query",
            "description": "Filters results to any associations associated to any of the specified set of operating bank account ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssociationMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 1
      },
      "post": {
        "tags": [
          "Associations"
        ],
        "summary": "Create an association",
        "description": "Creates an association.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociations_CreateAssociation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AssociationPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "associationPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 1
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/transactions": {
      "get": {
        "tags": [
          "Ownership Account Transactions"
        ],
        "summary": "Retrieve all transactions",
        "description": "Retrieves all ledger transactions for a specific ownership account.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership account transactions</span> - `View`",
        "operationId": "ExternalApiOwnershipAccountsLedger_GetOwnershipAccountLedger",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "description": "The ownership account identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transactiondatefrom",
            "in": "query",
            "description": "Filters results to any lease transaction whose start date is greater than or equal to the specified value.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "transactiondateto",
            "in": "query",
            "description": "Filters results to any lease transaction whose end date is less than or equal to the specified value.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "transactiontypes",
            "in": "query",
            "description": "Filters results to any lease transaction whose lease transaction type matches the specified status. If no type is specified, lease transactions with any type will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Bill",
                  "Check",
                  "Charge",
                  "Payment",
                  "Credit",
                  "Refund",
                  "ApplyDeposit",
                  "ElectronicFundsTransfer",
                  "Other",
                  "Deposit",
                  "GeneralJournalEntry",
                  "OwnerContribution",
                  "ReversePayment",
                  "ReverseElectronicFundsTransfer",
                  "VendorCredit",
                  "RentalApplicationFeePayment",
                  "ReverseRentalApplicationFeePayment",
                  "ReverseOwnerContribution",
                  "VendorRefund",
                  "UnreversedPayment",
                  "UnreversedElectronicFundsTransfer",
                  "UnreversedOwnerContribution",
                  "UnreversedRentalApplicationFeePayment",
                  "ReversedEftRefund"
                ],
                "type": "string",
                "description": "Indicates the type of transaction"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OwnershipAccountTransactionMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 1
      },
      "x-path-sort-index": 1
    },
    "/v1/associations/ownershipaccounts/architecturalrequests": {
      "get": {
        "tags": [
          "Architectural Requests"
        ],
        "summary": "Retrieve all architectural requests",
        "description": "Retrieves all architectural requests.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Associations > Ownership accounts</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Associations > Architectural requests</span> - `View`",
        "operationId": "ExternalApiAssociationArchitecturalRequests_GetArchitecturalRequests",
        "parameters": [
          {
            "name": "associationids",
            "in": "query",
            "description": "Filters results to only records that belong to the specified set of association identifiers.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "ownershipaccountids",
            "in": "query",
            "description": "Filters results to only records that belong to the specified set of ownership account identifiers.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Filters results to only records that belong to the specified set of architectural request identifiers.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Filters results to only records whose status is equal to the specified value.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "New",
                  "InProgress",
                  "Completed"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "decisions",
            "in": "query",
            "description": "Filters results to only records whose decision is equal to the specified value.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Pending",
                  "Approved",
                  "Denied"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "createddatetimefrom",
            "in": "query",
            "description": "Filters results to only records that were created after this date. Must be formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "createddatetimeto",
            "in": "query",
            "description": "Filters results to only records that were created before this date. Must be formatted as `YYYY-MM-DDTHH:MM:SSZ`.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to only records that were updated on or after the specified date. The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to only records that were updated on or before the specified date. The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "submitteddatetimefrom",
            "in": "query",
            "description": "Filters results to only records that were submitted on or after the specified date. The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "submitteddatetimeto",
            "in": "query",
            "description": "Filters results to only records that were submitted on or before the specified date. The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssociationArchitecturalRequestMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 1
      },
      "post": {
        "tags": [
          "Architectural Requests"
        ],
        "summary": "Create an architectural request",
        "description": "Creates an architectural request\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View` `Edit`\r\n\r\n<span class=\"permissionBlock\">Associations > Ownership accounts</span> - `View` `Edit`\r\n\r\n<span class=\"permissionBlock\">Associations > Architectural requests</span> - `View` `Edit`\r\n\r\n<span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View` `Edit`\r\n\r\n",
        "operationId": "ExternalApiAssociationArchitecturalRequests_CreateArchitecturalRequestAsync",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ArchitecturalRequestsPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "architecturalRequestsPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationArchitecturalRequestMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "There is a request conflict with the current state of the target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 1
    },
    "/v1/files": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Retrieve all files",
        "description": "Retrieves a list of files that exist within the customer account. Note this endpoint will only return file metadata. To download files make requests to the <a href=\"#operation/FileDownloadExternalApi_GetFileDownloadUrlAsync\">Download File</a> endpoint. \r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Documents > Files</span> - `View`",
        "operationId": "ExternalApiFiles_GetFiles",
        "parameters": [
          {
            "name": "entityid",
            "in": "query",
            "description": "Filters results to any file associated with the specified entity identifier. This filter is used in conjunction with the `EntityType` field which must be set to the type of entity this identifier references.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "entitytype",
            "in": "query",
            "description": "Specifies the type of entity that `EntityId` refers to. This field is required if `EntityId` is specified.",
            "schema": {
              "enum": [
                "Account",
                "Association",
                "AssociationOwner",
                "AssociationUnit",
                "Lease",
                "OwnershipAccount",
                "PublicAsset",
                "Rental",
                "RentalOwner",
                "RentalUnit",
                "Tenant",
                "Vendor"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "categoryid",
            "in": "query",
            "description": "Filters results to any file associated with the specified category identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "titleordescription",
            "in": "query",
            "description": "Filters results to files whose title or description *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "uploadedfrom",
            "in": "query",
            "description": "Filters results to any files that were updated on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "uploadedto",
            "in": "query",
            "description": "Filters results to any files that were updated on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "physicalfilenames",
            "in": "query",
            "description": "Filters results to any files with a `PhysicalFileName`exactly matching one of the provided values.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 1
      },
      "x-path-sort-index": 1
    },
    "/v1/leases": {
      "get": {
        "tags": [
          "Leases"
        ],
        "summary": "Retrieve all leases",
        "description": "Retrieves a list of leases.\r\n\r\n\r\n<span class=\"permissionBlock\">Rentals > Leases</span> - `View`",
        "operationId": "ExternalApiLeases_GetLeases",
        "parameters": [
          {
            "name": "propertyids",
            "in": "query",
            "description": "Filters results to any lease whose unit belongs to the specified set of property ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "rentalownerids",
            "in": "query",
            "description": "Filters results to any lease whose unit belongs to a property with a rental owner in the specified set of rental owner ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "unitnumber",
            "in": "query",
            "description": "Filters results to any lease whose unit number *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "tenantname",
            "in": "query",
            "description": "Filters results to any lease whose current tenants' names *contain* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "leasedatefrom",
            "in": "query",
            "description": "Filters results to any lease whose start date is greater than or equal to the specified value.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "leasedateto",
            "in": "query",
            "description": "Filters results to any lease whose end date is less than or equal to the specified value.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "leasetypes",
            "in": "query",
            "description": "Filters results to any lease whose lease type matches the specified status. If no type is specified, leases with any type will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "None",
                  "Fixed",
                  "FixedWithRollover",
                  "AtWill"
                ],
                "type": "string",
                "description": "This enumeration represents the type of lease."
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "leasestatuses",
            "in": "query",
            "description": "Filters results to any lease whose lease term matches the specified status. If no status is specified, leases with any lease term status will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Active",
                  "Past",
                  "Future"
                ],
                "type": "string",
                "description": "Indicates the status of a lease term."
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "createddatetimefrom",
            "in": "query",
            "description": "Filters results to any lease whose created date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "createddatetimeto",
            "in": "query",
            "description": "Filters results to any lease whose created date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to any leases that were updated on or after the specified date. The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to any leases that were updated on or before the specified date. The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaseMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 1
      },
      "post": {
        "tags": [
          "Leases"
        ],
        "summary": "Create a lease",
        "description": "Creates a signed lease.\r\n\r\n\r\n<span class=\"permissionBlock\">Rentals > Leases</span> - `View` `Edit`\r\n\r\n<span class=\"permissionBlock\">Rentals > Tenants</span> - `View` `Edit`\r\n\r\n<span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View` `Edit`\r\n\r\n<h4>Optional Permissions:</h4>\r\n<span class=\"permissionBlock\">Rentals > Applicants</span> - `View` In order to add tenants to the lease using the ApplicantIds property, you must have this permission.",
        "operationId": "ExternalApiLeases_CreateLease",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LeasePostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "leasePostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 3
      },
      "x-path-sort-index": 1
    },
    "/v1/leases/{leaseId}/transactions": {
      "get": {
        "tags": [
          "Lease Transactions"
        ],
        "summary": "Retrieve all lease transactions",
        "description": "Retrieves all the transactions for a specific lease.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View`",
        "operationId": "ExternalApiLeaseLedgerTransactions_GetLeaseLedgers",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transactiondatefrom",
            "in": "query",
            "description": "Filters results to any lease transaction whose start date is greater than or equal to the specified value.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "transactiondateto",
            "in": "query",
            "description": "Filters results to any lease transaction whose end date is less than or equal to the specified value.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "transactiontypes",
            "in": "query",
            "description": "Filters results to any lease transaction whose lease transaction type matches the specified status. If no type is specified, lease transactions with any type will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Bill",
                  "Check",
                  "Charge",
                  "Payment",
                  "Credit",
                  "Refund",
                  "ApplyDeposit",
                  "ElectronicFundsTransfer",
                  "Other",
                  "Deposit",
                  "GeneralJournalEntry",
                  "OwnerContribution",
                  "ReversePayment",
                  "ReverseElectronicFundsTransfer",
                  "VendorCredit",
                  "RentalApplicationFeePayment",
                  "ReverseRentalApplicationFeePayment",
                  "ReverseOwnerContribution",
                  "VendorRefund",
                  "UnreversedPayment",
                  "UnreversedElectronicFundsTransfer",
                  "UnreversedOwnerContribution",
                  "UnreversedRentalApplicationFeePayment",
                  "ReversedEftRefund"
                ],
                "type": "string",
                "description": "Indicates the type of transaction"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaseTransactionMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 1
      },
      "x-path-sort-index": 1
    },
    "/v1/rentals": {
      "get": {
        "tags": [
          "Rental Properties"
        ],
        "summary": "Retrieve all properties",
        "description": "Retrieves a list of rental properties.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View`",
        "operationId": "ExternalApiRentals_GetAllRentals",
        "parameters": [
          {
            "name": "location",
            "in": "query",
            "description": "Filters results to only rental properties whose city or state *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "types",
            "in": "query",
            "description": "Filters results by the rental type. If no type is provided all types will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Residential",
                  "Commercial"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "subtypes",
            "in": "query",
            "description": "Filters results by the sub type of the rental property. If no sub type is specified all sub types will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "CondoTownhome",
                  "MultiFamily",
                  "SingleFamily",
                  "Industrial",
                  "Office",
                  "Retail",
                  "ShoppingCenter",
                  "Storage",
                  "ParkingSpace"
                ],
                "type": "string",
                "description": "This enumeration represents the sub type of a building."
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filters results by the status of the rental property. If no status is specified both `active` and `inactive` rental properties will be returned.",
            "schema": {
              "enum": [
                "Active",
                "InActive"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "rentalownerids",
            "in": "query",
            "description": "Filters results to only rental properties whose RentalOwnerId matches the specified Id.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "propertyids",
            "in": "query",
            "description": "Filters results to only rental properties units whose Rental matches the specified Id.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to any rental properties that were updated on or after the specified date. The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to any rental properties that were updated on or before the specified date. The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RentalMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 1
      },
      "post": {
        "tags": [
          "Rental Properties"
        ],
        "summary": "Create a property",
        "description": "Creates a new rental property.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiRentals_CreateRentalProperty",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RentalPropertyPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "rentalPropertyPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              },
              "Link": {
                "description": "Contains the location of the unit created for the rental property.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 3
      },
      "x-path-sort-index": 1
    },
    "/v1/rentals/units/listings": {
      "get": {
        "tags": [
          "Listings"
        ],
        "summary": "Retrieve all listings",
        "description": "Retrieves all listings.\r\n\r\n\r\n<span class=\"permissionBlock\">Rentals > Listings</span> - `View`\r\n\r\n<span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View`",
        "operationId": "ExternalApiListings_GetListingsAsync",
        "parameters": [
          {
            "name": "entitytype",
            "in": "query",
            "description": "Specifies the type of entity that `EntityId` refers to.",
            "schema": {
              "enum": [
                "Property",
                "RentalOwner"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "entityid",
            "in": "query",
            "description": "Filters results to only listings that are associated with the specified entity id value. The id must be of the type specified in `EntityType` property.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListingMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 1
      },
      "x-path-sort-index": 1
    },
    "/v1/users": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Retrieve all users",
        "description": "Retrieves a list of users.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Administration > Users</span> - `View`",
        "operationId": "ExternalApiUsers_GetAllUsers",
        "parameters": [
          {
            "name": "roleids",
            "in": "query",
            "description": "Describes the role of the user.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "usertypes",
            "in": "query",
            "description": "Describes the user type of the user.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Staff",
                  "RentalOwner",
                  "Vendor"
                ],
                "type": "string",
                "description": "This enumeration represents a user type."
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filters results by the status of the user. If no status is specified both `active` and `inactive` staff members will be returned.",
            "schema": {
              "enum": [
                "Inactive",
                "Active"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filters results to only records whose name *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filters results to only records whose email *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials do not have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 1
      },
      "x-path-sort-index": 1
    },
    "/v1/applications/{applicationId}/transactions/{transactionId}": {
      "get": {
        "tags": [
          "Application Transactions"
        ],
        "summary": "Retrieve an application transaction",
        "description": "Retrieves a specific application transaction.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease Transactions</span> - `View`",
        "operationId": "ExternalApiApplicationLedgerTransactions_GetLeaseLedgerTransactionById",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 2
      },
      "x-path-sort-index": 2
    },
    "/v1/associations/{associationId}": {
      "get": {
        "tags": [
          "Associations"
        ],
        "summary": "Retrieve an association",
        "description": "Retrieve a specific association.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View`",
        "operationId": "ExternalApiAssociations_GetAssociationById",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "description": "The association identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 2
      },
      "put": {
        "tags": [
          "Associations"
        ],
        "summary": "Update an association",
        "description": "Updates an association.\r\n\r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\n\r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociations_UpdateAssociation",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AssociationPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "associationPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 2
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/transactions/{transactionId}": {
      "get": {
        "tags": [
          "Ownership Account Transactions"
        ],
        "summary": "Retrieve a transaction",
        "description": "Retrieves a specific ownership account ledger transaction.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership account transactions</span> - `View`",
        "operationId": "ExternalApiOwnershipAccountsLedger_GetOwnershipAccountTransactionById",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "description": "The ownership account identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "description": "The transaction identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnershipAccountTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 2
      },
      "x-path-sort-index": 2
    },
    "/v1/associations/ownershipaccounts/architecturalrequests/{architecturalRequestId}": {
      "get": {
        "tags": [
          "Architectural Requests"
        ],
        "summary": "Retrieve an architectural request",
        "description": "Retrieves a specific architectural request.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Associations > Ownership accounts</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Associations > Architectural requests</span> - `View`",
        "operationId": "ExternalApiAssociationArchitecturalRequests_GetArchitecturalRequestById",
        "parameters": [
          {
            "name": "architecturalRequestId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationArchitecturalRequestMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 2
      },
      "x-path-sort-index": 2
    },
    "/v1/files/{fileId}": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Retrieve a file",
        "description": "Retrieves the file metadata for a specific file. Note this endpoint will only return file metadata. To download files make requests to the <a href=\"#operation/FileDownloadExternalApi_GetFileDownloadUrlAsync\">Download File endpoint.</a>\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Documents > Files</span> - `View`",
        "operationId": "ExternalApiFiles_GetFileById",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 2
      },
      "put": {
        "tags": [
          "Files"
        ],
        "summary": "Update a file",
        "description": "Updates a metadata of the file. \r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Documents > Files</span> - `View` `Edit`",
        "operationId": "ExternalApiFiles_UpdateFile",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FilePutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "putMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 3
      },
      "x-path-sort-index": 2
    },
    "/v1/leases/{leaseId}": {
      "get": {
        "tags": [
          "Leases"
        ],
        "summary": "Retrieve a lease",
        "description": "Retrieves a specific lease.\r\n\r\n\r\n<span class=\"permissionBlock\">Rentals > Leases</span> - `View`",
        "operationId": "ExternalApiLeases_GetLeaseById",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "description": "The lease identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 2
      },
      "put": {
        "tags": [
          "Leases"
        ],
        "summary": "Update a lease",
        "description": "Update a signed lease.\r\n\r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n\r\n\r\n<span class=\"permissionBlock\">Rentals > Leases</span> - `View` `Edit`",
        "operationId": "ExternalApiLeases_UpdateLease",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LeasePutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "leasePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 4
      },
      "x-path-sort-index": 2
    },
    "/v1/leases/{leaseId}/transactions/{transactionId}": {
      "get": {
        "tags": [
          "Lease Transactions"
        ],
        "summary": "Retrieve a lease transaction",
        "description": "Retrieves a specific lease transaction.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease Transactions</span> - `View`",
        "operationId": "ExternalApiLeaseLedgerTransactions_GetLeaseLedgerTransactionById",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 2
      },
      "x-path-sort-index": 2
    },
    "/v1/rentals/{propertyId}": {
      "get": {
        "tags": [
          "Rental Properties"
        ],
        "summary": "Retrieve a property",
        "description": "Retrieve a specific rental property.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View`",
        "operationId": "ExternalApiRentals_GetRentalById",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "description": "The rental property identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 2
      },
      "put": {
        "tags": [
          "Rental Properties"
        ],
        "summary": "Update a property",
        "description": "Updates a rental property.\r\n\r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiRentals_UpdateRentalProperty",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RentalPropertyPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "rentalPropertyPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 4
      },
      "x-path-sort-index": 2
    },
    "/v1/rentals/units/{unitId}/listing": {
      "get": {
        "tags": [
          "Listings"
        ],
        "summary": "Retrieve a listing",
        "description": "Retrieves a specific listing.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Listings</span> - `View`\r\n\r\n<span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View`",
        "operationId": "ExternalApiListings_GetListingForUnitAsync",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "description": "The rental unit identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 2
      },
      "put": {
        "tags": [
          "Listings"
        ],
        "summary": "Create/Update a listing",
        "description": "This endpoint can be used to both *create* and *update* a listing. If no listing exists for the unit one will be created, otherwise the existing listing will be updated. A unit can only ever have one active listing. \r\n \r\n\r\n\r\nUpon creation the listing will post immediately to your Buildium public website, and will post to the selected syndicated sites within 24-48 hours. Updates to the listing will appear immediately in your Buildium public website and propagated to syndicated sites within 24-48 hours. \r\n\r\n\r\n\r\nNote, the listing will automatically pull in the information, features, and media that exists for the property and unit details. \r\n\r\n\r\n<span class=\"permissionBlock\">Rentals > Listings</span> - `View` `Edit`\r\n\r\n<span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiListings_UpsertListingsAsync",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ListingPutMessage"
                  }
                ],
                "description": "This is an object that represents a rental unit's Listing Contact."
              }
            }
          },
          "required": true,
          "x-bodyName": "message"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingMessage"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Listings"
        ],
        "summary": "Delete a listing",
        "description": "Deleting a listing will immediately remove it from your Buildium public website. The listing will also be removed\r\nfrom any syndicated sites within 24-48 hours.\r\n\r\nListings manually created on craigslist using the Buildium\r\nguided tool will not be removed. The listing must be removed using craigslist's tools provided in your craigslist account.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Listings</span> - `View` `Edit` `Delete`",
        "operationId": "ExternalApiListings_DelistUnit",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "description": "The rental property unit identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK - No Content."
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 2
    },
    "/v1/users/{userId}": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Retrieve a user",
        "description": "Retrieve a specific user.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Administration > Users</span> - `View`",
        "operationId": "ExternalApiUsers_GetUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "The user identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials do not have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 2
      },
      "x-path-sort-index": 2
    },
    "/v1/applications/outstandingbalances": {
      "get": {
        "tags": [
          "Application Transactions"
        ],
        "summary": "Retrieve all outstanding balances",
        "description": "Retrieves a list of applications that have outstanding balances. Applications with a zero or credit balance will not be returned in the results. \r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Outstanding Balances</span> - `View`",
        "operationId": "ExternalApiApplicationOutstandingBalances_GetApplicationOutstandingBalances",
        "parameters": [
          {
            "name": "applicationstatuses",
            "in": "query",
            "description": "Filters results to applications in specific statuses.\r\nIf not specified, all application outstanding balances will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Undecided",
                  "Approved",
                  "Rejected",
                  "AddedToLease",
                  "Cancelled",
                  "Deferred",
                  "New",
                  "Draft",
                  "AddedToDraftLease"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "applicationids",
            "in": "query",
            "description": "Filters results to specific applications by their unique identifiers.\r\nIf not specified, all application outstanding balances will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationOutstandingBalanceMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 3
      },
      "x-path-sort-index": 3
    },
    "/v1/associations/ownershipaccounts/architecturalrequests/{architecturalRequestId}/files": {
      "get": {
        "tags": [
          "Architectural Requests"
        ],
        "summary": "Retrieve all files for an architectural request",
        "description": "Retrieves all files for an architectural request.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Associations > Ownership accounts</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Associations > Architectural requests</span> - `View`",
        "operationId": "ExternalApiAssociationArchitecturalRequests_GetArchitecturalRequestFilesHistoryPagedAsync",
        "parameters": [
          {
            "name": "architecturalRequestId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "The IDs of the architectural request files to filter by.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationArchitecturalRequestFileMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "There is a request conflict with the current state of the target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 3
      },
      "x-path-sort-index": 3
    },
    "/v1/associations/ownershipaccounts/outstandingbalances": {
      "get": {
        "tags": [
          "Ownership Account Transactions"
        ],
        "summary": "Retrieve all outstanding balances",
        "description": "Retrieves a list of ownership account outstanding balances.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Outstanding Balances</span> - `View`",
        "operationId": "ExternalApiOwnershipAccountOutstandingBalances_GetOwnershipAccountOutstandingBalances",
        "parameters": [
          {
            "name": "associationid",
            "in": "query",
            "description": "Association unique identifier",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "ownershipaccountstatuses",
            "in": "query",
            "description": "List of ownership account statuses",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Active",
                  "Past",
                  "Future"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "ownershipaccountids",
            "in": "query",
            "description": "List of ownership account ids",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "pastdueemail",
            "in": "query",
            "description": "Status of notification of outstanding balances",
            "schema": {
              "enum": [
                "NoEmailAddress",
                "Sent"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "balanceduration",
            "in": "query",
            "description": "Duration of outstanding balances",
            "schema": {
              "enum": [
                "TotalBalance",
                "Balance0to30Days",
                "Balance31to60Days",
                "Balance61to90Days",
                "BalanceOver90Days"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OwnershipAccountOutstandingBalanceMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 3
      },
      "x-path-sort-index": 3
    },
    "/v1/associations/units": {
      "get": {
        "tags": [
          "Association Units"
        ],
        "summary": "Retrieve all units",
        "description": "Retrieves a list of association units.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View`",
        "operationId": "ExternalApiAssociationUnits_GetAllAssociationUnits",
        "parameters": [
          {
            "name": "associationids",
            "in": "query",
            "description": "Filters results to only include Associations with matching IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to any association units that were updated on or after the specified date. The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to any association units that were updated on or before the specified date. The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssociationUnitMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 3
      },
      "post": {
        "tags": [
          "Association Units"
        ],
        "summary": "Create a unit",
        "description": "Creates an association unit.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociationUnits_CreateAssociationUnit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AssociationUnitsPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "associationUnitsPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationUnitMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 3
    },
    "/v1/leases/outstandingbalances": {
      "get": {
        "tags": [
          "Lease Transactions"
        ],
        "summary": "Retrieve all outstanding balances",
        "description": "Retrieves a list of leases that have outstanding balances. Leases with a zero or credit balance will not be returned in the results. \r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Outstanding Balances</span> - `View`",
        "operationId": "ExternalApiLeaseOutstandingBalances_GetLeaseOutstandingBalances",
        "parameters": [
          {
            "name": "entitytype",
            "in": "query",
            "schema": {
              "enum": [
                "Rental",
                "RentalOwner"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "entityid",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "leasestatuses",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Active",
                  "Past",
                  "Future"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "leaseids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "pastdueemail",
            "in": "query",
            "schema": {
              "enum": [
                "NoEmailAddress",
                "Sent"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "balanceduration",
            "in": "query",
            "schema": {
              "enum": [
                "TotalBalance",
                "Balance0to30Days",
                "Balance31to60Days",
                "Balance61to90Days",
                "BalanceOver90Days"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "evictionstatus",
            "in": "query",
            "schema": {
              "enum": [
                "NotEvictionPending",
                "EvictionPending"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaseOutstandingBalanceMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 3
      },
      "x-path-sort-index": 3
    },
    "/v1/rentals/units/listingcontacts": {
      "get": {
        "tags": [
          "Listings"
        ],
        "summary": "Retrieve all listing contacts",
        "description": "Retrieves all listing contacts.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Listings</span> - `View`",
        "operationId": "ExternalApiListingContacts_GetAllListingContacts",
        "parameters": [
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ListingContactMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 3
      },
      "post": {
        "tags": [
          "Listings"
        ],
        "summary": "Create a listing contact",
        "description": "Create a listing contact. Note, at least one contact field (phone number, email or website) is required for the listing contact.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Listings</span> - `View` `Edit`",
        "operationId": "ExternalApiListingContacts_CreateListingContact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ListingContactSaveMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "listingContactSaveMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingContactMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 3
    },
    "/v1/userroles": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Retrieve all user roles",
        "description": "Retrieves a list of user roles.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Administration > User Roles</span> - `View`",
        "operationId": "ExternalApiUserRoles_GetAllUserRoles",
        "parameters": [
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRoleMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials do not have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 3
      },
      "x-path-sort-index": 3
    },
    "/v1/applications/{applicationId}/charges": {
      "get": {
        "tags": [
          "Application Transactions"
        ],
        "summary": "Retrieve all charges",
        "description": "Retrieves all the charges for a specific application.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View`",
        "operationId": "ExternalApiApplicationLedgerCharges_GetApplicationCharges",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "chargeids",
            "in": "query",
            "description": "Filters results by charge ids",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "transactiondatefrom",
            "in": "query",
            "description": "Filters results to any application transaction whose start date is greater than or equal to the specified value.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "transactiondateto",
            "in": "query",
            "description": "Filters results to any application transaction whose end date is less than or equal to the specified value.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationChargeMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 4
      },
      "post": {
        "tags": [
          "Application Transactions"
        ],
        "summary": "Create a charge",
        "description": "Creates a charge on a specific application ledger.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View` `Edit`",
        "operationId": "ExternalApiApplicationLedgerCharges_CreateApplicationLedgerCharge",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApplicationChargePostMessage"
                  }
                ],
                "description": "This is an object that represents a charge related to an application"
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 6
      },
      "x-path-sort-index": 4
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/charges": {
      "get": {
        "tags": [
          "Ownership Account Transactions"
        ],
        "summary": "Retrieve all charges",
        "description": "Retrieves all ledger charges for a specific ownership account.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership account transactions</span> - `View`",
        "operationId": "ExternalApiOwnershipAccountLedgerCharges_GetAllOwnershipAccountCharges",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transactiondatefrom",
            "in": "query",
            "description": "Filters results to any lease transaction whose start date is greater than or equal to the specified value.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "transactiondateto",
            "in": "query",
            "description": "Filters results to any lease transaction whose end date is less than or equal to the specified value.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "billids",
            "in": "query",
            "description": "Filters results to any charge that has been associated to the indicated bill ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OwnershipAccountLedgerChargeMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 4
      },
      "post": {
        "tags": [
          "Ownership Account Transactions"
        ],
        "summary": "Create a charge",
        "description": "Creates a ledger charge.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership account transactions</span> - `View` `Edit`\r\n\r\n<span class=\"permissionBlock\">Accounting > Bills</span> - `View` `Edit` In order to associate the charge to a bill using the BillId property, you must have this permission.",
        "operationId": "ExternalApiOwnershipAccountLedgerCharges_CreateCharge",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "description": "The ownership account identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OwnershipAccountLedgerChargePostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "ownershipAccountLedgerChargePostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnershipAccountTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 6
      },
      "x-path-sort-index": 4
    },
    "/v1/associations/ownershipaccounts/architecturalrequests/{architecturalRequestId}/files/uploadrequests": {
      "post": {
        "tags": [
          "Architectural Requests"
        ],
        "summary": "Upload an architectural request file",
        "description": "Uploads a file and associates it to the specified architectural request record.\r\n\r\n\r\nUploading a file requires making two API requests. Each step is outlined below.\r\n\r\n\r\n<strong>Step 1 - Save file metadata</strong>\r\n\r\nThe first step in the file upload process is to submit the file metadata to `/v1/associations/ownershipaccounts/architecturalrequests/{architecturalRequestId:int}/files/uploadrequests`. The response of this call will contain a URL and a collection of form data that will be used in step 2 to generate the request for the file binary upload.\r\n\r\n\r\n<strong>NOTE:</strong> The response data will expire after 5 minutes. The file metadata will not be saved in the Buildium system if step 2 of this process is not completed successfully.\r\n\r\n\r\n<strong>Step 2 - Upload the file binary</strong>\r\n\r\nUploading the file binary will require using the response from step 1 to form a POST request to the Buildium file provider. Follow these steps to create the request:\r\n\r\n\r\n1. Form a POST request using the value of the `BucketUrl` property as the URL. \r\n\r\n\r\n\r\n2. Set the `Content-Type` header to `multipart/form-data`.\r\n\r\n\r\n\r\n3. Copy the fields from the `FormData`  property to this request as form-data key/value pairs.\r\n\r\n<strong>NOTE:</strong> These values must added to the request form-data in the order they were received in the response.\r\n\r\n\r\n\r\n4. Lastly create a form-data key named `file` and set the value to the file binary.\r\n\r\n<strong>NOTE:</strong> This must be the last field in the form-data list.\r\n\r\n\r\nThis image shows what the POST request should look like if you're using Postman:\r\n<img src=\"file-upload-example.png\" />\r\n\r\n\r\n5. Send the POST request! A successful request will return with a `204 - NO CONTENT` HTTP response code. For any failure responses, please refer to <a target=\"_blank\" href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#RESTErrorResponses\">AWS documentation</a> on REST error responses.\r\n\r\n\r\n<strong>NOTE:</strong> The file identifier is not generated in this response. To retrieve the file identifier, call `/v1/files` and pass the `PhysicalFileName` value received from the response of this endpoint into the `physicalfilenames` query parameter.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View` `Edit`\r\n\r\n<span class=\"permissionBlock\">Associations > Ownership accounts</span> - `View` `Edit`\r\n\r\n<span class=\"permissionBlock\">Associations > Architectural requests</span> - `View` `Edit`\r\n\r\n<span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociationArchitecturalRequests_CreateUploadFileRequest",
        "parameters": [
          {
            "name": "architecturalRequestId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FileNamePostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "fileNamePostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileUploadTicketMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 4
      },
      "x-path-sort-index": 4
    },
    "/v1/associations/units/{unitId}": {
      "get": {
        "tags": [
          "Association Units"
        ],
        "summary": "Retrieve a unit",
        "description": "Retrieve a specific association unit.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View`",
        "operationId": "ExternalApiAssociationUnits_GetAssociationUnitById",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "description": "The association unit identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationUnitMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 4
      },
      "put": {
        "tags": [
          "Association Units"
        ],
        "summary": "Update a unit",
        "description": "Updates an association unit.\r\n\r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociationUnits_UpdateAssociationUnit",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "description": "The identifier of the unit to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AssociationUnitPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "associationUnitPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationUnitMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 4
    },
    "/v1/files/{fileId}/downloadrequest": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Download a file",
        "description": "Downloading a file requires making two API requests. The first request to `/v1/files/{fileId}/downloadrequest` will return a secure URL that can be used to download the file contents. Note the download URL is transient and will expire after 5 minutes. \r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Documents > Files</span> - `View`",
        "operationId": "ExternalApiFileDownload_GetFileDownloadUrlAsync",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileDownloadMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The file download service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 4
      },
      "x-path-sort-index": 4
    },
    "/v1/leases/{leaseId}/charges": {
      "get": {
        "tags": [
          "Lease Transactions"
        ],
        "summary": "Retrieve all charges",
        "description": "Retrieves all the charges for a specific lease.\r\n\r\n\r\n<h4>Required permissions(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View`",
        "operationId": "ExternalApiLeaseLedgerChargesRead_GetAllCharges",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transactiondatefrom",
            "in": "query",
            "description": "Filters results to any lease transaction whose start date is greater than or equal to the specified value.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "transactiondateto",
            "in": "query",
            "description": "Filters results to any lease transaction whose end date is less than or equal to the specified value.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "billids",
            "in": "query",
            "description": "Filters results to any charge that has been associated to the indicated bill ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaseChargeMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 4
      },
      "post": {
        "tags": [
          "Lease Transactions"
        ],
        "summary": "Create a charge",
        "description": "Creates a charge transaction on a specific lease ledger.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View` `Edit`\r\n\r\n<span class=\"permissionBlock\">Accounting > Bills</span> - `View` `Edit` In order to associate the charge to a bill using the BillId property, you must have this permission.",
        "operationId": "ExternalApiLeaseLedgerChargesWrite_CreateCharge",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LeaseChargePostMessage"
                  }
                ],
                "description": "This is an object that represents a charge related to a lease"
              }
            }
          },
          "required": true,
          "x-bodyName": "leaseChargeMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaseTransactionMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Lease not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 6
      },
      "x-path-sort-index": 4
    },
    "/v1/rentals/units/listingcontacts/{listingContactId}": {
      "get": {
        "tags": [
          "Listings"
        ],
        "summary": "Retrieve a listing contact",
        "description": "Retrieves a specific listing contact.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Listings</span> - `View`",
        "operationId": "ExternalApiListingContacts_GetListingContactById",
        "parameters": [
          {
            "name": "listingContactId",
            "in": "path",
            "description": "The listing contact identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingContactMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 4
      },
      "put": {
        "tags": [
          "Listings"
        ],
        "summary": "Update a listing contact",
        "description": "Update a listing contact. Note, at least one contact field (phone number, email or website) is required for the listing contact.\r\n\r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Listings</span> - `View` `Edit`",
        "operationId": "ExternalApiListingContacts_UpdateListingContact",
        "parameters": [
          {
            "name": "listingContactId",
            "in": "path",
            "description": "The listing contact identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ListingContactSaveMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "listingContactSaveMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingContactMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 4
    },
    "/v1/userroles/{userRoleId}": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Retrieve a user role",
        "description": "Retrieve a specific user role.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Administration > User Roles</span> - `View`",
        "operationId": "ExternalApiUserRoles_GetUserRoleById",
        "parameters": [
          {
            "name": "userRoleId",
            "in": "path",
            "description": "The user role identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRoleMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials do not have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 4
      },
      "x-path-sort-index": 4
    },
    "/v1/applications/{applicationId}/charges/{transactionId}": {
      "get": {
        "tags": [
          "Application Transactions"
        ],
        "summary": "Retrieve a charge",
        "description": "Retrieves a specific application charge.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease Transactions</span> - `View`",
        "operationId": "ExternalApiApplicationLedgerCharges_GetApplicationLedgerChargeById",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationChargeMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 5
      },
      "put": {
        "tags": [
          "Application Transactions"
        ],
        "summary": "Update a charge",
        "description": "Updates a charge on a specific application ledger.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View` `Edit`",
        "operationId": "ExternalApiApplicationLedgerCharges_UpdateApplicationLedgerCharge",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApplicationChargePutMessage"
                  }
                ],
                "description": "This is an object that represents a charge related to an application"
              }
            }
          },
          "required": true,
          "x-bodyName": "putMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 7
      },
      "x-path-sort-index": 5
    },
    "/v1/associations/ownershipaccounts": {
      "get": {
        "tags": [
          "Ownership Accounts"
        ],
        "summary": "Retrieve all ownership accounts",
        "description": "Retrieves a list of ownership accounts.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership accounts</span> - `View`",
        "operationId": "ExternalApiOwnershipAccounts_GetAllOwnershipAccounts",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "description": "Filters results to the specified set of ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "associationids",
            "in": "query",
            "description": "Filters results to any ownership accounts who belong to the specified set of association ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "unitorowner",
            "in": "query",
            "description": "Filters results to any association whose unit or owner *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "datefrom",
            "in": "query",
            "description": "Filters results to any ownership account whose start date is greater than or equal to the specified value.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "dateto",
            "in": "query",
            "description": "Filters results to any ownership account whose start date is less than or equal to the specified value.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filters results by the status of the association. If no status is specified, `active`, `past` and `future` associations will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Active",
                  "Past",
                  "Future"
                ],
                "type": "string",
                "description": "Indicates the status of a lease term."
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "delinquencystatuses",
            "in": "query",
            "description": "Filters results by the delinquency status of the ownership account. If no status is specified, ownership accounts of any delinquency status will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "NoDelinquency",
                  "InCollections",
                  "InForeclosure",
                  "Foreclosed"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssociationOwnershipAccountMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 5
      },
      "post": {
        "tags": [
          "Ownership Accounts"
        ],
        "summary": "Create an ownership account",
        "description": "Creates an ownership account.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership accounts</span> - `View` `Edit`\r\n\r\n<span class=\"permissionBlock\">Associations > Owners</span> - `View` `Edit`",
        "operationId": "ExternalApiOwnershipAccounts_CreateAssociationOwnershipAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AssociationOwnershipAccountPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "associationOwnershipAccountPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationOwnershipAccountMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "An association ownership account already exists for this unit.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 5
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/charges/{chargeId}": {
      "get": {
        "tags": [
          "Ownership Account Transactions"
        ],
        "summary": "Retrieve a charge",
        "description": "Retrieves a specific ownership account ledger charge.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership account transactions</span> - `View`",
        "operationId": "ExternalApiOwnershipAccountLedgerCharges_GetOwnershipAccountChargeById",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "description": "The ownership account identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "chargeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnershipAccountLedgerChargeMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Lease not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 5
      },
      "put": {
        "tags": [
          "Ownership Account Transactions"
        ],
        "summary": "Update a charge",
        "description": "Updates a charge.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership account transactions</span> - `View` `Edit`\r\n            \r\n",
        "operationId": "ExternalApiOwnershipAccountLedgerCharges_UpdateOwnershipAccountCharge",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "description": "The ownership account identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "chargeId",
            "in": "path",
            "description": "The charge identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OwnershipAccountLedgerChargePutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "putMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnershipAccountTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 7
      },
      "x-path-sort-index": 5
    },
    "/v1/files/uploadrequests": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Upload a file",
        "description": "Uploading a file requires making two API requests. Each step is outlined below.\r\n\r\n\r\n<strong>Step 1 - Save file metadata</strong>\r\n\r\nThe first step in the file upload process is to submit the file metadata to `/v1/files/uploadrequests`. The response of this call will contain a URL and a collection of form data that will be used in step 2 to generate the request for the file binary upload.\r\n\r\n\r\n<strong>NOTE:</strong> The response data will expire after 5 minutes. The file metadata will not be saved in the Buildium system if step 2 of this process is not completed successfully.\r\n\r\n\r\n<strong>Step 2 - Upload the file binary</strong>\r\n\r\nUploading the file binary will require using the response from step 1 to form a POST request to the Buildium file provider. Follow these steps to create the request:\r\n\r\n\r\n1. Form a POST request using the value of the `BucketUrl` property as the URL. \r\n\r\n\r\n\r\n2. Set the `Content-Type` header to `multipart/form-data`.\r\n\r\n\r\n\r\n3. Copy the fields from the `FormData`  property to this request as form-data key/value pairs.\r\n\r\n<strong>NOTE:</strong> These values must added to the request form-data in the order they were received in the response.\r\n\r\n\r\n\r\n4. Lastly create a form-data key named `file` and set the value to the file binary.\r\n\r\n<strong>NOTE:</strong> This must be the last field in the form-data list.\r\n\r\n\r\nThis image shows what the POST request should look like if you're using Postman:\r\n<img src=\"file-upload-example.png\" />\r\n\r\n\r\n5. Send the POST request! A successful request will return with a `204 - NO CONTENT` HTTP response code. For any failure responses, please refer to <a target=\"_blank\" href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#RESTErrorResponses\">AWS documentation</a> on REST error responses.\r\n\r\n\r\n<strong>NOTE:</strong> The file identifier is not generated in this response. To retrieve the file identifier, call `/v1/files` and pass the `PhysicalFileName` value received from the response of this endpoint into the `physicalfilenames` query parameter.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Documents > Files</span> - `View` `Edit`",
        "operationId": "ExternalApiFilesUploads_CreateUploadFileRequestAsync",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FileUploadPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "fileUploadPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileUploadTicketMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 5
      },
      "x-path-sort-index": 5
    },
    "/v1/leases/{leaseId}/charges/{chargeId}": {
      "get": {
        "tags": [
          "Lease Transactions"
        ],
        "summary": "Retrieve a charge",
        "description": "Retrieves a specific lease charge.\r\n\r\n\r\n<h4>Required permissions(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View`",
        "operationId": "ExternalApiLeaseLedgerChargesRead_GetChargeById",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "chargeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseChargeMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 5
      },
      "put": {
        "tags": [
          "Lease Transactions"
        ],
        "summary": "Update a charge",
        "description": "Updates a charge.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View` `Edit`",
        "operationId": "ExternalApiLeaseLedgerChargesWrite_UpdateLeaseCharge",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "chargeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LeaseChargePutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "leaseChargePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 7
      },
      "x-path-sort-index": 5
    },
    "/v1/leases/{leaseId}/moveouts": {
      "get": {
        "tags": [
          "Leases"
        ],
        "summary": "Retrieve all move outs",
        "description": "Retrieves a list of move out dates for a given lease.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Leases</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Rentals > Tenants</span> - `View`",
        "operationId": "ExternalApiLeaseMoveOuts_GetLeaseMoveOutInformationById",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaseMoveOutDataMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 5
      },
      "post": {
        "tags": [
          "Leases"
        ],
        "summary": "Create a move out",
        "description": "Creates move out data for a single tenant on a given lease.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Leases</span> - `View` `Edit`\r\n            \r\n<span class=\"permissionBlock\">Rentals > Tenants</span> - `View` `Edit`",
        "operationId": "ExternalApiLeaseMoveOuts_CreateMoveOutData",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LeaseMoveOutDataPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseMoveOutDataMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 7
      },
      "x-path-sort-index": 5
    },
    "/v1/rentals/{propertyId}/inactivationrequest": {
      "post": {
        "tags": [
          "Rental Properties"
        ],
        "summary": "Inactivate a property",
        "description": "Inactivates a rental property and all associated units. Any associated property's owners that have no remaining active properties will be inactivated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalsActiveStatus_InactivateRentalProperty",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK - No Content."
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 5
      },
      "x-path-sort-index": 5
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}": {
      "get": {
        "tags": [
          "Ownership Accounts"
        ],
        "summary": "Retrieve an ownership account",
        "description": "Retrieves a specific ownership account.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership accounts</span> - `View`",
        "operationId": "ExternalApiOwnershipAccounts_GetOwnershipAccountById",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "description": "The ownership account identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationOwnershipAccountMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 6
      },
      "put": {
        "tags": [
          "Ownership Accounts"
        ],
        "summary": "Update an ownership account",
        "description": "Updates an ownership account.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership accounts</span> - `View` `Edit`",
        "operationId": "ExternalApiOwnershipAccounts_UpdateAssociationOwnershipAccount",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AssociationOwnershipAccountPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "associationOwnershipAccountPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationOwnershipAccountMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 6
    },
    "/v1/leases/{leaseId}/moveouts/{tenantId}": {
      "get": {
        "tags": [
          "Leases"
        ],
        "summary": "Retrieve a move out",
        "description": "Retrieves move out data for a single tenant on a given lease.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Leases</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Rentals > Tenants</span> - `View`",
        "operationId": "ExternalApiLeaseMoveOuts_GetLeaseMoveOutDataByTenantId",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseMoveOutDataMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 6
      },
      "delete": {
        "tags": [
          "Leases"
        ],
        "summary": "Delete a move out",
        "description": "Deletes move out data for a tenant on a given lease.\r\n            \r\n\r\n<h4>Required Permission(s):</h4><span class=\"permissionBlock\">Rentals > Leases</span> - `View` `Edit`\r\n            \r\n<span class=\"permissionBlock\">Rentals > Tenants</span> - `View`",
        "operationId": "ExternalApiLeaseMoveOuts_UndoTenantMoveout",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK - No Content."
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 8
      },
      "x-path-sort-index": 6
    },
    "/v1/rentals/{propertyId}/reactivationrequest": {
      "post": {
        "tags": [
          "Rental Properties"
        ],
        "summary": "Reactivate a property",
        "description": "Reactivates a rental property and all associated units. Any inactive rental owners assigned to this property will also be reactivated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalsActiveStatus_ReactivateRentalProperty",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK - No Content."
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 6
      },
      "x-path-sort-index": 6
    },
    "/v1/associations/owners": {
      "get": {
        "tags": [
          "Association Owners"
        ],
        "summary": "Retrieve all owners",
        "description": "Retrieves a list of association owners.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View`",
        "operationId": "ExternalApiAssociationOwners_GetAllAssociationOwners",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filters results to only records whose name *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "phone",
            "in": "query",
            "description": "Filters results to only records whose phone number *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filters results to only records whose email *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "associationids",
            "in": "query",
            "description": "Filters results to only records that belong to the specified set of association identifiers.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Filters results to only records whose status is equal to the specified value.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Active",
                  "Past",
                  "Future"
                ],
                "type": "string",
                "description": "Indicates the status of a lease term."
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "createddatetimeto",
            "in": "query",
            "description": "Filters results to only records that were created before this date. Must be formatted as `YYYY-MM-DD`.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "createddatetimefrom",
            "in": "query",
            "description": "Filters results to only records that were created after this date. Must be formatted as `YYYY-MM-DD`.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to any association owners that were updated on or after the specified date. The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to any association owners that were updated on or before the specified date. The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssociationOwnerMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 7
      },
      "post": {
        "tags": [
          "Association Owners"
        ],
        "summary": "Create an owner",
        "description": "Creates an association owner.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View` `Edit`\r\n\r\n<span class=\"permissionBlock\">Associations > Ownership accounts</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociationOwners_CreateAssociationOwner",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AssociationOwnerToExistingOwnershipAccountPostMessage"
                  }
                ],
                "description": "This object represents the Association Owner to add to an existing Ownership Account"
              }
            }
          },
          "required": true,
          "x-bodyName": "associationOwnerPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationOwnerMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 7
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/payments": {
      "post": {
        "tags": [
          "Ownership Account Transactions"
        ],
        "summary": "Create a payment",
        "description": "Creates a ledger payment.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership account transactions</span> - `View` `Edit`",
        "operationId": "ExternalApiOwnershipAccountLedgerPayments_CreateOwnershipAccountLedgerPayment",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OwnershipAccountLedgerPaymentPostMessage"
                  }
                ],
                "description": "This is an object that represents a Payment made in a particular Ownership Account Ledger"
              }
            }
          },
          "required": true,
          "x-bodyName": "ledgerPaymentPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnershipAccountTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 7
      },
      "x-path-sort-index": 7
    },
    "/v1/rentals/{propertyId}/vendors": {
      "get": {
        "tags": [
          "Rental Properties"
        ],
        "summary": "Retrieve all preferred vendors",
        "description": "Retrieves all preferred vendors.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Maintenance > Vendors</span> - `View`",
        "operationId": "ExternalApiRentalPreferredVendors_GetRentalPreferredVendors",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RentalPreferredVendorMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 7
      },
      "put": {
        "tags": [
          "Rental Properties"
        ],
        "summary": "Update preferred vendors",
        "description": "Updates preferred vendors.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit`\r\n            \r\n<span class=\"permissionBlock\">Maintenance > Vendors</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalPreferredVendors_UpdateRentalPreferredVendors",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RentalPreferredVendorPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "rentalPreferredVendorPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RentalPreferredVendorMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 8
      },
      "x-path-sort-index": 7
    },
    "/v1/applications/{applicationId}/payments": {
      "post": {
        "tags": [
          "Application Transactions"
        ],
        "summary": "Create a payment",
        "description": "Creates an application ledger payment.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View` `Edit`",
        "operationId": "ExternalApiApplicationLedgerPayments_CreateApplicationLedgerPayment",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "The application unique identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApplicationPaymentPostMessage"
                  }
                ],
                "description": "This is an object that represents a Payment made in a particular application ledger."
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 8
      },
      "x-path-sort-index": 8
    },
    "/v1/associations/owners/{ownerId}": {
      "get": {
        "tags": [
          "Association Owners"
        ],
        "summary": "Retrieve an owner",
        "description": "Retrieve a specific association owner.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View`",
        "operationId": "ExternalApiAssociationOwners_GetAssociationOwnerById",
        "parameters": [
          {
            "name": "ownerId",
            "in": "path",
            "description": "The association owner identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationOwnerMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 8
      },
      "put": {
        "tags": [
          "Association Owners"
        ],
        "summary": "Update an owner",
        "description": "Updates an existing association owner.\r\n\r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociationOwners_UpdateAssociationOwner",
        "parameters": [
          {
            "name": "ownerId",
            "in": "path",
            "description": "The identifier of the association owner to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AssociationOwnerPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "associationOwnerPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationOwnerMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 8
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/autoallocatedpayments": {
      "post": {
        "tags": [
          "Ownership Account Transactions"
        ],
        "summary": "Create a payment (auto allocated)",
        "description": "Creates a payment on the ownership account ledger. Note that the recorded payment will be automatically allocated to the general ledger accounts based on the payment allocation settings. These settings can be found under the Settings > Application Settings > Residents page in your account. If you'd like to specify the general ledger accounts the payment should apply to, please use the <a href=\"#operation/ExternalApiOwnershipAccountLedgerPayments_CreateOwnershipAccountLedgerPayment\">Create a payment</a> endpoint. \r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership account transactions</span> - `View` `Edit`",
        "operationId": "ExternalApiOwnershipAccountAutoAllocatedPayment_CreateOwnershipAccountAutoAllocatedPayment",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OwnershipAccountAutoAllocatedPaymentPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "paymentMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnershipAccountTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 8
      },
      "x-path-sort-index": 8
    },
    "/v1/leases/{leaseId}/payments": {
      "post": {
        "tags": [
          "Lease Transactions"
        ],
        "summary": "Create a payment",
        "description": "Creates a lease ledger payment.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View` `Edit`",
        "operationId": "ExternalApiLeaseLedgerPaymentsWrite_CreatePayment",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "description": "The lease unique identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LeaseLedgerPaymentPostMessage"
                  }
                ],
                "description": "This is an object that represents a Payment made in a particular lease ledger."
              }
            }
          },
          "required": true,
          "x-bodyName": "message"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 8
      },
      "x-path-sort-index": 8
    },
    "/v1/applications/{applicationId}/autoallocatedpayments": {
      "post": {
        "tags": [
          "Application Transactions"
        ],
        "summary": "Create a payment (auto allocated)",
        "description": "Creates a payment on the application ledger. Note that the recorded payment will be automatically allocated to the general ledger accounts based on the payment allocation settings. These settings can be found under the Settings > Application Settings > Residents page in your account. If you'd like to specify the GL accounts the payment should apply to, please use the <a href=\"#operation/ExternalApiApplicationLedgerPayments_CreateApplicationLedgerPayment\">Create a payment</a> endpoint.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View` `Edit`",
        "operationId": "ExternalApiApplicationLedgerAutoAllocatedPayments_CreateApplicationAutoAllocatedPayment",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "The application unique identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApplicationAutoAllocatedPaymentPostMessage"
                  }
                ],
                "description": "This is an object that represents an auto-allocated Payment made in a particular application ledger."
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 9
      },
      "x-path-sort-index": 9
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/payments/{paymentId}": {
      "put": {
        "tags": [
          "Ownership Account Transactions"
        ],
        "summary": "Update a payment",
        "description": "Updates a ledger payment. Each line item must have a unique general ledger account identifier. PaymentMethod, Date, Memo, and the total Amount cannot be changed for payments with a PaymentMethod of `BuildiumEFT`, `BuildiumCC` or `RetailCash`.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership account transactions</span> - `View` `Edit`",
        "operationId": "ExternalApiOwnershipAccountLedgerPayments_UpdateOwnershipAccountLedgerPayment",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OwnershipAccountLedgerPaymentPutMessage"
                  }
                ],
                "description": "This is an object that represents a Payment made in a particular Ownership Account Ledger"
              }
            }
          },
          "required": true,
          "x-bodyName": "message"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnershipAccountTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 9
      },
      "x-path-sort-index": 9
    },
    "/v1/associations/tenants": {
      "get": {
        "tags": [
          "Association Tenants"
        ],
        "summary": "Retrieve all tenants",
        "description": "Retrieves a list of association tenants.\r\n\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View`",
        "operationId": "ExternalApiAssociationTenants_GetAssociationTenants",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filters results to only records whose name *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "phone",
            "in": "query",
            "description": "Filters results to only records whose phone number *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filters results to only records whose email *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "associationids",
            "in": "query",
            "description": "Filters results to only records that belong to the specified set of association identifiers.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Filters results to only records whose status is equal to the specified value.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Active",
                  "Past",
                  "Future"
                ],
                "type": "string",
                "description": "Indicates the status of a lease term."
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "createddatetimeto",
            "in": "query",
            "description": "Filters results to only records that were created before this date. Must be formatted as `YYYY-MM-DD`.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "createddatetimefrom",
            "in": "query",
            "description": "Filters results to only records that were created after this date. Must be formatted as `YYYY-MM-DD`.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to any association owners that were updated on or after the specified date. The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to any association owners that were updated on or before the specified date. The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssociationTenantMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 9
      },
      "post": {
        "tags": [
          "Association Tenants"
        ],
        "summary": "Create a tenant",
        "description": "Creates an association tenant.\r\n\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociationTenants_CreateAssociationTenant",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AssociationTenantPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "associationTenantPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationTenantMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 9
    },
    "/v1/leases/{leaseId}/autoallocatedpayments": {
      "post": {
        "tags": [
          "Lease Transactions"
        ],
        "summary": "Create a payment (auto allocated)",
        "description": "Creates a payment on the lease ledger. Note that the recorded payment will be automatically allocated to the general ledger accounts based on the payment allocation settings. These settings can be found under the Settings > Application Settings > Residents page in your account. If you'd like to specify the GL accounts the payment should apply to, please use the <a href=\"#operation/ExternalApiLeaseLedgerPaymentsWrite_CreatePayment\">Create a payment</a> endpoint.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View` `Edit`",
        "operationId": "ExternalApiLeaseAutoAllocatedPayment_CreateLeaseAutoAllocatedPayment",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LeaseAutoAllocatedPaymentPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "paymentMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 9
      },
      "x-path-sort-index": 9
    },
    "/v1/leases/{leaseId}/notes": {
      "get": {
        "tags": [
          "Leases"
        ],
        "summary": "Retrieve all notes",
        "description": "Retrieves all lease notes.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Leases</span> - `View`",
        "operationId": "ExternalApiLeaseNotes_GetLeaseNotes",
        "parameters": [
          {
            "name": "updateddatetimefrom",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "updateddatetimeto",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedbyuserid",
            "in": "query",
            "description": "Filters results to only notes that were last updated by the specified user identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 9
      },
      "post": {
        "tags": [
          "Leases"
        ],
        "summary": "Create a note",
        "description": "Creates a lease note.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Leases</span> - `View` `Edit`",
        "operationId": "ExternalApiLeaseNotes_CreateLeaseNote",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotePostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "notePostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 11
      },
      "x-path-sort-index": 9
    },
    "/v1/applications/{applicationId}/payments/{transactionId}": {
      "put": {
        "tags": [
          "Application Transactions"
        ],
        "summary": "Update a payment",
        "description": "Updates an application ledger payment. Each line item must have a unique general ledger account identifier. PaymentMethod, Date, Memo, and the total Amount cannot be changed for payments with a PaymentMethod of `BuildiumEFT`, `BuildiumCC` or `RetailCash`.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View` `Edit`",
        "operationId": "ExternalApiApplicationLedgerPayments_UpdateApplicationLedgerPayment",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "The application unique identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApplicationPaymentPutMessage"
                  }
                ],
                "description": "This is an object that represents a Payment made in a particular application ledger."
              }
            }
          },
          "required": true,
          "x-bodyName": "putMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 10
      },
      "x-path-sort-index": 10
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/credits": {
      "post": {
        "tags": [
          "Ownership Account Transactions"
        ],
        "summary": "Create a credit",
        "description": "Creates a ledger credit.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership account transactions</span> - `View` `Edit`",
        "operationId": "ExternalApiOwnershipAccountLedgerCredits_CreateOwnershipAccountCredit",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OwnershipAccountCreditPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnershipAccountTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 10
      },
      "x-path-sort-index": 10
    },
    "/v1/associations/tenants/{tenantId}": {
      "get": {
        "tags": [
          "Association Tenants"
        ],
        "summary": "Retrieve a tenant",
        "description": "Retrieves a specific association tenant.\r\n\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View`",
        "operationId": "ExternalApiAssociationTenants_GetAssociationTenantById",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationTenantMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 10
      },
      "put": {
        "tags": [
          "Association Tenants"
        ],
        "summary": "Update a tenant",
        "description": "Updates an association tenant.\r\n\r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociationTenants_UpdateAssociationTenant",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The identifier of the association tenant to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AssociationTenantPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "associationTenantPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationTenantMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 10
    },
    "/v1/leases/{leaseId}/notes/{noteId}": {
      "get": {
        "tags": [
          "Leases"
        ],
        "summary": "Retrieve a note",
        "description": "Retrieves a lease note.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Leases</span> - `View`",
        "operationId": "ExternalApiLeaseNotes_GetLeaseNoteByNoteId",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 10
      },
      "put": {
        "tags": [
          "Leases"
        ],
        "summary": "Update a note",
        "description": "Updates a lease note.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Leases</span> - `View` `Edit`",
        "operationId": "ExternalApiLeaseNotes_UpdateLeaseNote",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotePutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "notePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 12
      },
      "x-path-sort-index": 10
    },
    "/v1/leases/{leaseId}/payments/{paymentId}": {
      "put": {
        "tags": [
          "Lease Transactions"
        ],
        "summary": "Update a payment",
        "description": "Updates a ledger payment. Each line item must have a unique general ledger account identifier. PaymentMethod, Date, Memo, and the total Amount cannot be changed for payments with a PaymentMethod of `BuildiumEFT`, `BuildiumCC` or `RetailCash`.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View` `Edit`",
        "operationId": "ExternalApiLeaseLedgerPaymentsWrite_UpdateLeaseLedgerPayment",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LeaseLedgerPaymentPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "putMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 10
      },
      "x-path-sort-index": 10
    },
    "/v1/leases/{leaseId}/reversepayments": {
      "post": {
        "tags": [
          "Lease Transactions"
        ],
        "summary": "Create a payment reversal",
        "description": "Reverses a lease ledger payment. Note, this action can only be taken on a payment that has been deposited. \r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View` `Edit`\r\n            \r\n<span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View` `Edit`",
        "operationId": "ExternalApiLeaseLedgerPaymentReversalsWrite_CreateLeaseReversePayment",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "description": "The lease unique identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LeaseLedgerReversePaymentPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 10
      },
      "x-path-sort-index": 10
    },
    "/v1/applications/{applicationId}/reversepayments": {
      "post": {
        "tags": [
          "Application Transactions"
        ],
        "summary": "Create a payment reversal",
        "description": "Reverses an application ledger payment. Note, this action can only be taken on a payment that has been deposited. \r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View` `Edit`\r\n            \r\n<span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View` `Edit`",
        "operationId": "ExternalApiApplicationLedgerPaymentReversals_CreateApplicationLedgerReversePayment",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "The application unique identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApplicationReversePaymentPostMessage"
                  }
                ],
                "description": "This is an object that represents a reversed payment tied to an application"
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 11
      },
      "x-path-sort-index": 11
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/refunds/{refundId}": {
      "get": {
        "tags": [
          "Ownership Account Transactions"
        ],
        "summary": "Retrieve a refund",
        "description": "Retrieves a refund.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View`",
        "operationId": "ExternalApiOwnershipAccountRefund_GetOwnershipAccountRefundById",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "refundId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnershipAccountRefundMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 11
      },
      "x-path-sort-index": 11
    },
    "/v1/leases/{leaseId}/refunds/{refundId}": {
      "get": {
        "tags": [
          "Lease Transactions"
        ],
        "summary": "Retrieve a refund",
        "description": "Retrieves a refund.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View`",
        "operationId": "ExternalApiLeaseLedgerRefunds_GetLeaseLedgerRefundById",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "refundId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseLedgerRefundMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 11
      },
      "x-path-sort-index": 11
    },
    "/v1/applications/{applicationId}/refunds/{transactionId}": {
      "get": {
        "tags": [
          "Application Transactions"
        ],
        "summary": "Retrieve a refund",
        "description": "Retrieves a specific application refund.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View`",
        "operationId": "ExternalApiApplicationLedgerRefunds_GetApplicationLedgerRefundById",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationRefundMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 12
      },
      "x-path-sort-index": 12
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/refunds": {
      "post": {
        "tags": [
          "Ownership Account Transactions"
        ],
        "summary": "Create a refund",
        "description": "Creates a refund.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View` `Edit`",
        "operationId": "ExternalApiOwnershipAccountRefund_CreateOwnershipAccountRefund",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OwnershipAccountRefundPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnershipAccountRefundMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 12
      },
      "x-path-sort-index": 12
    },
    "/v1/leases/{leaseId}/refunds": {
      "post": {
        "tags": [
          "Lease Transactions"
        ],
        "summary": "Create a refund",
        "description": "Creates a refund.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View` `Edit`",
        "operationId": "ExternalApiLeaseLedgerRefunds_CreateLeaseLedgerRefund",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LeaseLedgerRefundPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "leaseLedgerRefundPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseLedgerRefundMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 12
      },
      "x-path-sort-index": 12
    },
    "/v1/applications/{applicationId}/refunds": {
      "post": {
        "tags": [
          "Application Transactions"
        ],
        "summary": "Create a refund",
        "description": "Creates a refund for a specific application.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View` `Edit`",
        "operationId": "ExternalApiApplicationLedgerRefunds_CreateApplicationLedgerRefund",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApplicationRefundPostMessage"
                  }
                ],
                "description": "This is an object that represents a refund made in a particular application ledger."
              }
            }
          },
          "required": true,
          "x-bodyName": "leaseLedgerRefundPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationRefundMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 13
      },
      "x-path-sort-index": 13
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/applieddeposits": {
      "post": {
        "tags": [
          "Ownership Account Transactions"
        ],
        "summary": "Create a deposit withholding",
        "description": "Withholds an association owner deposit by reallocating the funds from a liability account to an income account to cover an expense(s).\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership account transactions</span> - `View` `Edit`\r\n            <span class=\"permissionBlock\">Accounting > General Ledger Accounts</span> - `View`",
        "operationId": "ExternalApiOwnershipAccountDepositWithholding_CreateOwnershipAccountDepositWithholding",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OwnershipAccountDepositWithholdingPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "ownershipAccountDepositWithholdingPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnershipAccountTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 13
      },
      "x-path-sort-index": 13
    },
    "/v1/leases/{leaseId}/credits": {
      "post": {
        "tags": [
          "Lease Transactions"
        ],
        "summary": "Create a credit",
        "description": "Creates a lease ledger credit.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View` `Edit`",
        "operationId": "ExternalApiLeaseLedgerCreditsWrite_CreateLeaseCredit",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "description": "The lease unique identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LeaseLedgerCreditPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 13
      },
      "x-path-sort-index": 13
    },
    "/v1/leases/renewals": {
      "get": {
        "tags": [
          "Leases"
        ],
        "summary": "Retrieve all upcoming renewals",
        "description": "Retrieves all upcoming lease renewals across all rental properties. \r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Leases</span> - `View`",
        "operationId": "ExternalApiLeaseRenewalsRead_GetAllLeaseRenewalsForAllProperties",
        "parameters": [
          {
            "name": "propertyids",
            "in": "query",
            "description": "Filters results to only include leases whose unit belongs to the specified set of property ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "rentalownerids",
            "in": "query",
            "description": "Filters results to any lease whose unit belongs to a property with rental owner in the specified set of rental owner ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "esignaturestatuses",
            "in": "query",
            "description": "Filters result to any lease renewal with an esignature status that matches the given statuses.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Unknown",
                  "NotSent",
                  "ProcessingRequest",
                  "AwaitingSignatures",
                  "FullySigned",
                  "PendingCancellation",
                  "Cancelled",
                  "Failed",
                  "SentUsingAdobe"
                ],
                "type": "string"
              }
            },
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaseRenewalMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 13
      },
      "x-path-sort-index": 13
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/applieddeposits/{depositId}": {
      "put": {
        "tags": [
          "Ownership Account Transactions"
        ],
        "summary": "Update a deposit withholding",
        "description": "Updates an ownership account deposit withholding.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership account transactions</span> - `View` `Edit`\r\n            <span class=\"permissionBlock\">Accounting > General Ledger Accounts</span> - `View`",
        "operationId": "ExternalApiOwnershipAccountDepositWithholding_UpdateOwnershipAccountDepositWithholding",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "depositId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OwnershipAccountDepositWithholdingPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "putMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnershipAccountTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 14
      },
      "x-path-sort-index": 14
    },
    "/v1/leases/{leaseId}/applieddeposits": {
      "post": {
        "tags": [
          "Lease Transactions"
        ],
        "summary": "Create a deposit withholding",
        "description": "Withholds a resident deposit by reallocating the funds from a liability account to an income account to cover an expense(s).\r\n           \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease Ledger</span> - `View` `Edit`\r\n           \r\n<span class=\"permissionBlock\">Accounting > General Ledger Accounts</span> - `View`",
        "operationId": "ExternalApiLeaseLedgerDepositWithholding_CreateLeaseLedgerDepositWithholding",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LeaseLedgerDepositWithholdingPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "leaseLedgerDepositWithholdingPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 14
      },
      "x-path-sort-index": 14
    },
    "/v1/leases/{leaseId}/renewals": {
      "get": {
        "tags": [
          "Leases"
        ],
        "summary": "Retrieve all renewals",
        "description": "Retrieves all renewals for a specific a lease.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Leases</span> - `View`",
        "operationId": "ExternalApiLeaseRenewalsRead_GetAllLeaseRenewals",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaseRenewalMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 14
      },
      "post": {
        "tags": [
          "Leases"
        ],
        "summary": "Create a lease renewal",
        "description": "Creates a lease renewal.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Leases</span> - `View` `Edit`",
        "operationId": "ExternalApiLeaseRenewalsWrite_CreateLeaseRenewal",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LeaseRenewalPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseRenewalMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "There is a request conflict with the current state of the target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "x-path-sort-index": 14
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/recurringtransactions": {
      "get": {
        "tags": [
          "Ownership Account Transactions"
        ],
        "summary": "Retrieve all recurring transactions",
        "description": "Retrieves all recurring transactions for an ownership account.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership account transactions</span> - `View`",
        "operationId": "ExternalApiOwnershipAccountRecurringTransactions_GetAssociationRecurringTransaction",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RecurringTransactionMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 15
      },
      "x-path-sort-index": 15
    },
    "/v1/leases/{leaseId}/applieddeposits/{depositId}": {
      "put": {
        "tags": [
          "Lease Transactions"
        ],
        "summary": "Update a deposit withholding",
        "description": "Updates a resident deposit withholding.\r\n            \r\n\r\n<h4>Required permission(s):</h4><h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease Ledger</span> - `View` `Edit`\r\n            \r\n<span class=\"permissionBlock\">Accounting > General Ledger Accounts</span> - `View`",
        "operationId": "ExternalApiLeaseLedgerDepositWithholding_UpdateDepositWithholding",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "depositId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LeaseLedgerDepositWithholdingPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "putMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 15
      },
      "x-path-sort-index": 15
    },
    "/v1/leases/{leaseId}/renewals/{renewalId}": {
      "get": {
        "tags": [
          "Leases"
        ],
        "summary": "Retrieve a renewal",
        "description": "Retrieves a specific renewal for a given lease. \r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Leases</span> - `View`",
        "operationId": "ExternalApiLeaseRenewalsRead_GetLeaseRenewalById",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "renewalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseRenewalMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 15
      },
      "x-path-sort-index": 15
    },
    "/v1/leases/{leaseId}/recurringtransactions": {
      "get": {
        "tags": [
          "Lease Transactions"
        ],
        "summary": "Retrieve all recurring transactions",
        "description": "Retrieves all recurring transactions for a given lease.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View`",
        "operationId": "ExternalApiLeaseRecurringTransactions_GetLeaseRecurringTransactions",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RecurringTransactionMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        },
        "x-path-sort-index": 16
      },
      "x-path-sort-index": 16
    },
    "/v1/administration/account": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Retrieve account info",
        "description": "Retrieves information related to the Buildium account. \r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Administration > Account Information</span> - `View`",
        "operationId": "ExternalApiAccountInfo_GetAccountInfo",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInfoMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/administration/accountinglockperiod": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Retrieve accounting lock periods",
        "description": "Retrieves accounting lock periods.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Administration > Application Settings</span> - `View`",
        "operationId": "ExternalApiAccountingLockPeriod_GetAccountingLockPeriodSettings",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingLockPeriodMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/administration/residentsettings/partialpaymentsettings": {
      "get": {
        "tags": [
          "Administration"
        ],
        "summary": "Retrieve the partial payment settings for residents",
        "description": "Retrieves the partial payment settings for residents.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Administration > Application Settings</span> - `View`",
        "operationId": "ExternalApiPartialPaymentGlobalSettings_GetGlobalPartialPaymentSettings",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartialPaymentSettingsMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Administration"
        ],
        "summary": "Update the partial payment settings for residents",
        "description": "Updates the partial payment settings for residents.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Administration > Application Settings</span> - `View` `Edit`",
        "operationId": "ExternalApiPartialPaymentGlobalSettings_PatchGlobalPartialPaymentSettings",
        "requestBody": {
          "description": "<span>Represents the structure of the data that can be provided to a <a target=\"_blank\" href=\"https://datatracker.ietf.org/doc/html/rfc6902\">JSON patch document</a> as path values via <a target=\"_blank\" href=\"https://datatracker.ietf.org/doc/html/rfc6901/\">JSON pointer</a> syntax.</span>",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PartialPaymentSettingsPatchMessage"
                  }
                ]
              }
            },
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PartialPaymentSettingsPatchMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "patchDocument"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartialPaymentSettingsMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/applicants": {
      "get": {
        "tags": [
          "Applicants"
        ],
        "summary": "Retrieve all applicants",
        "description": "Retrieves all applicants.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Applicants</span> - `View`",
        "operationId": "ExternalApiApplicants_GetApplicants",
        "parameters": [
          {
            "name": "entityid",
            "in": "query",
            "description": "Filters results to any applicant associated with the specified entity identifier. This filter is used in conjunction with the `EntityType` field which must be set to the type of entity this identifier references.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "entitytype",
            "in": "query",
            "description": "Specifies the type of entity that `EntityId` refers to. This field is required if `EntityId` is specified.",
            "schema": {
              "enum": [
                "Rental",
                "RentalOwner"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "applicationstatuses",
            "in": "query",
            "description": "Filters results by the applicant application status. If no status is specified, applicants with an application in any status will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Undecided",
                  "Approved",
                  "Rejected",
                  "AddedToLease",
                  "Cancelled",
                  "Deferred",
                  "New",
                  "Draft",
                  "AddedToDraftLease"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "unitids",
            "in": "query",
            "description": "Filters results to applicants associated to any of the specified rental property unit identifiers.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filters results to applicants whose name *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filters results to applicants whose email *contains* the specified value",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "applicationsubmittedstartdate",
            "in": "query",
            "description": "Filters results to any applicant who submitted an application on or after the date specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "applicationsubmittedenddate",
            "in": "query",
            "description": "Filters results to any applicant who submitted an application on or prior to the date specified.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to any applicants that were updated on or after the specified date and time. The value must be formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to any applicants that were updated on or before the specified date and time. The value must be formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicantDetailsMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Applicants"
        ],
        "summary": "Create an applicant",
        "description": "Creates an applicant.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Applicants</span> - `View` `Edit`",
        "operationId": "ExternalApiApplicants_CreateApplicant",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApplicantPostMessage"
                  }
                ],
                "description": "This object represents an applicant."
              }
            }
          },
          "required": true,
          "x-bodyName": "applicantPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicantDetailsMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/applicants/{applicantId}": {
      "get": {
        "tags": [
          "Applicants"
        ],
        "summary": "Retrieve an applicant",
        "description": "Retrieves an applicant.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Applicants</span> - `View`",
        "operationId": "ExternalApiApplicants_GetApplicantById",
        "parameters": [
          {
            "name": "applicantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicantDetailsMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Applicants"
        ],
        "summary": "Update an applicant",
        "description": "Updates an applicant.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Applicants</span> - `View` `Edit`",
        "operationId": "ExternalApiApplicants_UpdateApplicant",
        "parameters": [
          {
            "name": "applicantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApplicantPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "putMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicantDetailsMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/applicants/{applicantId}/applications": {
      "get": {
        "tags": [
          "Applicants"
        ],
        "summary": "Retrieve all applications",
        "description": "Retrieves all the applications for a given applicant.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Applicants</span> - `View`",
        "operationId": "ExternalApiApplicantApplications_GetApplicationsForApplicant",
        "parameters": [
          {
            "name": "applicantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/applicants/{applicantId}/applications/{applicationId}": {
      "get": {
        "tags": [
          "Applicants"
        ],
        "summary": "Retrieve an application",
        "description": "Retrieves an application.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Applicants</span> - `View`",
        "operationId": "ExternalApiApplicantApplications_GetApplicationForApplicantById",
        "parameters": [
          {
            "name": "applicantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Applicants"
        ],
        "summary": "Update an application",
        "description": "Updates a rental application.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Applicants</span> - `View` `Edit`",
        "operationId": "ExternalApiApplicantApplications_UpdateApplication",
        "parameters": [
          {
            "name": "applicantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "applicationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApplicationPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "applicationPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/applicants/{applicantId}/notes": {
      "get": {
        "tags": [
          "Applicants"
        ],
        "summary": "Retrieve all applicant notes",
        "description": "Retrieves all applicant notes.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Applicants</span> - `View`",
        "operationId": "ExternalApiApplicantNotes_GetAllApplicantNotes",
        "parameters": [
          {
            "name": "applicantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "updateddatetimefrom",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "updateddatetimeto",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedbyuserid",
            "in": "query",
            "description": "Filters results to only notes that were last updated by the specified user identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Applicants"
        ],
        "summary": "Create an applicant note",
        "description": "Creates an applicant note.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Applicants</span> -  `View` `Edit`",
        "operationId": "ExternalApiApplicantNotes_CreateApplicantNote",
        "parameters": [
          {
            "name": "applicantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotePostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "applicantNotePostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/applicants/{applicantId}/notes/{noteId}": {
      "get": {
        "tags": [
          "Applicants"
        ],
        "summary": "Retrieve an applicant note",
        "description": "Retrieves an applicant note.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Applicants</span> - `View`",
        "operationId": "ExternalApiApplicantNotes_GetApplicantNoteById",
        "parameters": [
          {
            "name": "applicantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/applicants/groups": {
      "get": {
        "tags": [
          "Applicants"
        ],
        "summary": "Retrieve all applicant groups",
        "description": "Retrieves all applicant groups.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Applicants</span> - `View`",
        "operationId": "ExternalApiApplicantGroups_GetApplicantGroups",
        "parameters": [
          {
            "name": "entitytype",
            "in": "query",
            "description": "Filters results to any applicant groups associated with the specified entity identifier. This filter is used in conjunction with the `EntityType` field which must be set to the type of entity this identifier references.",
            "schema": {
              "enum": [
                "Rental",
                "RentalOwner"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "entityid",
            "in": "query",
            "description": "Specifies the type of entity that `EntityId` refers to. This field is required if `EntityId` is specified.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "applicationgroupstatuses",
            "in": "query",
            "description": "Filters results by the applicant group status. If no status is specified, applicant groups in any status will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Undecided",
                  "Approved",
                  "Rejected",
                  "AddedToLease",
                  "Cancelled",
                  "Deferred",
                  "New",
                  "Draft",
                  "AddedToDraftLease"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "unitids",
            "in": "query",
            "description": "Filters results to applicant groups associated to any of the specified rental property unit identifiers.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filters results to applicant groups that includes applicants whose name *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicantGroupMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Applicants"
        ],
        "summary": "Create an applicant group",
        "description": "Creates an applicant group.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Applicants</span> - `View` `Edit`",
        "operationId": "ExternalApiApplicantGroups_CreateApplicantGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApplicantGroupPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "applicantGroupPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicantGroupMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/applicants/groups/{applicantGroupId}": {
      "get": {
        "tags": [
          "Applicants"
        ],
        "summary": "Retrieve an applicant group",
        "description": "Retrieves an applicant group.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Applicants</span> - `View`",
        "operationId": "ExternalApiApplicantGroups_GetApplicantGroupById",
        "parameters": [
          {
            "name": "applicantGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicantGroupMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Applicants"
        ],
        "summary": "Update an applicant group",
        "description": "Updates an applicant group.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Applicants</span> - `View` `Edit`",
        "operationId": "ExternalApiApplicantGroups_UpdateApplicantGroup",
        "parameters": [
          {
            "name": "applicantGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApplicantGroupPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "applicantGroupPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicantGroupMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/applicants/groups/{applicantGroupId}/notes": {
      "get": {
        "tags": [
          "Applicants"
        ],
        "summary": "Retrieve all applicant group notes",
        "description": "Retrieves all applicant group notes.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Applicants</span> - `View`",
        "operationId": "ExternalApiApplicantGroupNotes_GetApplicantGroupNotes",
        "parameters": [
          {
            "name": "updateddatetimefrom",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "updateddatetimeto",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedbyuserid",
            "in": "query",
            "description": "Filters results to only notes that were last updated by the specified user identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "applicantGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Applicants"
        ],
        "summary": "Create an applicant group note",
        "description": "Creates an applicant group note.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Applicants</span> - `View` `Edit`",
        "operationId": "ExternalApiApplicantGroupNotes_CreateApplicationGroupNote",
        "parameters": [
          {
            "name": "applicantGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotePostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "notePostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/applicants/groups/{applicantGroupId}/notes/{noteId}": {
      "get": {
        "tags": [
          "Applicants"
        ],
        "summary": "Retrieve an applicant group note",
        "description": "Retrieves an applicant group note.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Applicants</span> - `View`",
        "operationId": "ExternalApiApplicantGroupNotes_GetApplicantGroupNoteByNoteId",
        "parameters": [
          {
            "name": "applicantGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Applicants"
        ],
        "summary": "Update an applicant group note",
        "description": "Updates an applicant group note.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Applicants</span> - `View` `Edit`",
        "operationId": "ExternalApiApplicantGroupNotes_UpdateApplicationGroupNote",
        "parameters": [
          {
            "name": "applicantGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotePutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "notePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/{associationId}/boardmembers": {
      "get": {
        "tags": [
          "Board Members"
        ],
        "summary": "Retrieve all board members",
        "description": "Retrieves all association board members.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View`",
        "operationId": "ExternalApiAssociationBoardMembers_GetAllAssociationBoardMembers",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Filters results to only records whose status is equal to the specified values.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Current",
                  "Former",
                  "Future"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "boardpositiontypes",
            "in": "query",
            "description": "Filters results to only records whose board position type is equal to the specified values.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "President",
                  "VicePresident",
                  "Treasurer",
                  "Secretary",
                  "BoardMember"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "createddatetimeto",
            "in": "query",
            "description": "Filters results to only records that were created before this date. Must be formatted as `YYYY-MM-DD`.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "createddatetimefrom",
            "in": "query",
            "description": "Filters results to only records that were created after this date. Must be formatted as `YYYY-MM-DD`.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssociationBoardMemberMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Board Members"
        ],
        "summary": "Create a board member",
        "description": "Creates a board member for a given association.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociationBoardMembers_CreateBoardMember",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AssociationBoardMemberPostMessage"
                  }
                ],
                "description": "This object represents the Board Member for an Association."
              }
            }
          },
          "required": true,
          "x-bodyName": "associationBoardMemberPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationBoardMemberMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/{associationId}/boardmembers/{boardMemberId}": {
      "get": {
        "tags": [
          "Board Members"
        ],
        "summary": "Retrieve a board member",
        "description": "Retrieves an association board member.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View`",
        "operationId": "ExternalApiAssociationBoardMembers_GetAssociationBoardMemberById",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "boardMemberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationBoardMemberMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Board Members"
        ],
        "summary": "Update a board member",
        "description": "Updates a board member for a given association.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociationBoardMembers_UpdateBoardMember",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "boardMemberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AssociationBoardMemberPutMessage"
                  }
                ],
                "description": "This object represents the Board Member for an Association."
              }
            }
          },
          "required": true,
          "x-bodyName": "putMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationBoardMemberMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Board Members"
        ],
        "summary": "Delete a board member",
        "description": "Deletes a board member. Note, this is a hard delete from the database and data can not be restored. \r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View` `Edit` `Delete`",
        "operationId": "ExternalApiAssociationBoardMembers_DeleteBoardMember",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "boardMemberId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK - No Content."
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/{associationId}/epaysettings": {
      "get": {
        "tags": [
          "Associations"
        ],
        "summary": "Retrieve ePay settings",
        "description": "Retrieves ePay settings for an association.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View`",
        "operationId": "ExternalApiAssociationsEPaySettings_GetEPaySettingsForAssociationById",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EPaySettingsMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Associations"
        ],
        "summary": "Update ePay settings",
        "description": "Updates ePay settings for an association.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociationsEPaySettings_UpdateEPaySettingsForAssociation",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EPaySettingsPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "ePaySettingsPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EPaySettingsMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/{associationId}/inactivationrequest": {
      "post": {
        "tags": [
          "Associations"
        ],
        "summary": "Inactivate an association",
        "description": "Inactivates an association along with associated units and ownership accounts. \r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociationActiveStatus_InactivateAssociation",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK - No Content."
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/{associationId}/meterreadings": {
      "get": {
        "tags": [
          "Association Meter Readings"
        ],
        "summary": "Retrieve all meter readings",
        "description": "Retrieves all meter readings for an association.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View`",
        "operationId": "ExternalApiAssociationMeterReadingsRead_GetMeterReadingsForAssociation",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "readingdatefrom",
            "in": "query",
            "description": "Filters results to any meter readings whose entry date that is greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD. The maximum date range is 365 days.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "readingdateto",
            "in": "query",
            "description": "Filters results to any meter readings whose entry date is less than or equal to the specified value. The value must be formatted as YYYY-MM-DD. The maximum date range is 365 days.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "metertypes",
            "in": "query",
            "description": "Filters results to the specified meter types.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Electric",
                  "Gas",
                  "Oil",
                  "Water",
                  "Sewer"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeterReadingMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/{associationId}/meterreadings/summary": {
      "delete": {
        "tags": [
          "Association Meter Readings"
        ],
        "summary": "Delete meter reading details for a given date",
        "description": "Delete meter reading details for an association for a given date.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership account transactions</span> - `View` `Edit` `Delete`",
        "operationId": "ExternalApiAssociationDeleteMeterReadingDetails_DeleteMeterReadingDetailsForAssociation",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "readingdate",
            "in": "query",
            "description": "Filters results to any meter readings whose entry date is equal to the specified value. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "metertype",
            "in": "query",
            "description": "Filters results to the specified meter type.",
            "required": true,
            "schema": {
              "enum": [
                "Electric",
                "Gas",
                "Oil",
                "Water",
                "Sewer"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK - No Content."
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Association Meter Readings"
        ],
        "summary": "Retrieve all meter reading details",
        "description": "Retrieves all meter reading details for an association.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View`",
        "operationId": "ExternalApiAssociationMeterReadingDetails_GetAssociationMeterReadingDetailsAsync",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "readingdate",
            "in": "query",
            "description": "Filters results to any meter readings whose entry date is equal to the specified value. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "metertype",
            "in": "query",
            "description": "Filters results to the specified meter type.",
            "required": true,
            "schema": {
              "enum": [
                "Electric",
                "Gas",
                "Oil",
                "Water",
                "Sewer"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReadingDetailsMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Association Meter Readings"
        ],
        "summary": "Create/Update meter reading details",
        "description": "This endpoint can be used to both create and update a meter reading detail for an association.\r\n            <ul><li>There can only be one meter reading detail for a given combination of MeterType and ReadingDate for an association</li><li>If you are updating an existing meter reading detail, use the query parameters to specify the existing meter reading detail to update.</li><li>If you are creating a new meter reading detail, do not pass any query parameters.</li><li>When adding a new item to the Details array, leave out the `Id` field.</li><li>When updating an existing item in the Details array, the `Id` field of the existing item must be included.</li></ul>\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociationMeterReadingDetailsUpsert_UpsertAssociationMeterReadingDetailsAsync",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "readingdate",
            "in": "query",
            "description": "Filters results to any meter readings whose entry date is equal to the specified value. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "metertype",
            "in": "query",
            "description": "Filters results to the specified meter type.",
            "schema": {
              "enum": [
                "Electric",
                "Gas",
                "Oil",
                "Water",
                "Sewer"
              ],
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MeterReadingDetailsPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "meterReadingDetailsPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReadingDetailsMessage"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReadingDetailsMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "There is a request conflict with the current state of the target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/{associationId}/notes": {
      "get": {
        "tags": [
          "Associations"
        ],
        "summary": "Retrieve all notes",
        "description": "Retrieves all notes.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View`",
        "operationId": "ExternalApiAssociationNotes_GetAssociationNotes",
        "parameters": [
          {
            "name": "updateddatetimefrom",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "updateddatetimeto",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedbyuserid",
            "in": "query",
            "description": "Filters results to only notes that were last updated by the specified user identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Associations"
        ],
        "summary": "Create a note",
        "description": "Creates a note.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociationNotes_CreateAssociationNote",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotePostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "notesPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/{associationId}/notes/{noteId}": {
      "get": {
        "tags": [
          "Associations"
        ],
        "summary": "Retrieve a note",
        "description": "Retrieves a note.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View`",
        "operationId": "ExternalApiAssociationNotes_GetAssociationNoteByNoteId",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Associations"
        ],
        "summary": "Update a note",
        "description": "Updates a note.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociationNotes_UpdateAssociationNote",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotePutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "notePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/{associationId}/reactivationrequest": {
      "post": {
        "tags": [
          "Associations"
        ],
        "summary": "Reactivate an association",
        "description": "Reactivates an association along with associated units and ownership accounts. \r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociationActiveStatus_ReactivateAssociation",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK - No Content."
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/{associationId}/vendors": {
      "get": {
        "tags": [
          "Associations"
        ],
        "summary": "Retrieve all preferred vendors",
        "description": "Retrieves all preferred vendors.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Maintenance > Vendors</span> - `View`",
        "operationId": "ExternalApiAssociationPreferredVendors_GetAssociationPreferredVendors",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssociationPreferredVendorMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Associations"
        ],
        "summary": "Update preferred vendors",
        "description": "Updates preferred vendors.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\n\r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View` `Edit`\r\n            \r\n<span class=\"permissionBlock\">Maintenance > Vendors</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociationPreferredVendors_UpdateAssociationPreferredVendors",
        "parameters": [
          {
            "name": "associationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AssociationPreferredVendorPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "associationPreferredVendorPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssociationPreferredVendorMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/appliances": {
      "get": {
        "tags": [
          "Appliances"
        ],
        "summary": "Retrieve all appliances",
        "description": "Retrieves all association appliances.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View`",
        "operationId": "ExternalApiAssociationAppliances_GetAssociationAppliances",
        "parameters": [
          {
            "name": "associationids",
            "in": "query",
            "description": "Filters results to appliances associated to any of the specified association identifiers.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "unitids",
            "in": "query",
            "description": "Filters results to appliances associated to any of the specified association unit identifiers.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssociationApplianceMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Appliances"
        ],
        "summary": "Create an appliance",
        "description": "Creates an association appliance.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociationAppliances_CreateAssociationAppliance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AssociationAppliancePostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationApplianceMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/appliances/{applianceId}": {
      "get": {
        "tags": [
          "Appliances"
        ],
        "summary": "Retrieve an appliance",
        "description": "Retrieves an association appliance by id.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View`",
        "operationId": "ExternalApiAssociationAppliances_GetAssociationApplianceById",
        "parameters": [
          {
            "name": "applianceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationApplianceMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Appliances"
        ],
        "summary": "Update an appliance",
        "description": "Updates an association appliance.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociationAppliances_UpdateAssociationAppliance",
        "parameters": [
          {
            "name": "applianceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AssociationAppliancePutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "putMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationApplianceMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Appliances"
        ],
        "summary": "Delete an appliance",
        "description": "Deletes an associations appliance.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociationAppliances_DeleteAssociationAppliances",
        "parameters": [
          {
            "name": "applianceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK - No Content."
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/appliances/{applianceId}/servicehistory": {
      "get": {
        "tags": [
          "Appliances"
        ],
        "summary": "Retrieve all service history",
        "description": "Retrieves all of the service history records for an appliance.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View`",
        "operationId": "ExternalApiAssociationApplianceServiceHistory_GetAllAssociationApplianceServiceHistory",
        "parameters": [
          {
            "name": "applianceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssociationApplianceServiceHistoryMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Appliances"
        ],
        "summary": "Create a service history",
        "description": "Creates a service history for an appliance.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociationApplianceServiceHistory_CreateAssociationApplianceServiceHistory",
        "parameters": [
          {
            "name": "applianceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AssociationApplianceServiceHistoryPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationApplianceServiceHistoryMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/appliances/{applianceId}/servicehistory/{serviceHistoryId}": {
      "get": {
        "tags": [
          "Appliances"
        ],
        "summary": "Retrieve a service history",
        "description": "Retrieves a specific service history record for a given appliance.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View`",
        "operationId": "ExternalApiAssociationApplianceServiceHistory_GetAssociationApplianceServiceHistoryById",
        "parameters": [
          {
            "name": "applianceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "serviceHistoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationApplianceServiceHistoryMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/banklockboxdata": {
      "get": {
        "tags": [
          "Associations"
        ],
        "summary": "Retrieve all association bank lockbox data",
        "description": "Retrieves all association bank lockbox data.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View`",
        "operationId": "ExternalApiAssociationBankLockBoxData_GetBankLockBoxData",
        "parameters": [
          {
            "name": "associationids",
            "in": "query",
            "description": "Filters results to only include Associations with matching IDs",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankLockboxDataMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/owners/{ownerId}/notes": {
      "get": {
        "tags": [
          "Association Owners"
        ],
        "summary": "Retrieve all notes",
        "description": "Retrieves all association owner notes.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View`",
        "operationId": "ExternalApiAssociationOwnerNotes_GetAssociationOwnerNotes",
        "parameters": [
          {
            "name": "updateddatetimefrom",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "updateddatetimeto",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedbyuserid",
            "in": "query",
            "description": "Filters results to only notes that were last updated by the specified user identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "ownerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Association Owners"
        ],
        "summary": "Create a note",
        "description": "Creates an association owner note.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociationOwnerNotes_CreateAssociationOwnerNote",
        "parameters": [
          {
            "name": "ownerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotePostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "notePostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/owners/{ownerId}/notes/{noteId}": {
      "get": {
        "tags": [
          "Association Owners"
        ],
        "summary": "Retrieve a note",
        "description": "Retrieves an association owner note.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View`",
        "operationId": "ExternalApiAssociationOwnerNotes_GetAssociationOwnerNoteByNoteId",
        "parameters": [
          {
            "name": "ownerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Association Owners"
        ],
        "summary": "Update a note",
        "description": "Updates an association owner note.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociationOwnerNotes_UpdateAssociationOwnerNote",
        "parameters": [
          {
            "name": "ownerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotePutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "notePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/owners/{ownerId}/units": {
      "get": {
        "tags": [
          "Association Owners"
        ],
        "summary": "Retrieve all occupancy statuses",
        "description": "Retrieves the occupancy status for all of the units owned by the association owner. \r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View` \r\n<span class=\"permissionBlock\">Associations > Ownership Accounts</span> - `View`",
        "operationId": "ExternalApiAssociationOwnerUnits_GetUnitOccupancyStatusesForAssociationOwner",
        "parameters": [
          {
            "name": "ownerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssociationOwnerUnitOccupancyStatusMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "This service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/owners/{ownerId}/units/{unitId}": {
      "get": {
        "tags": [
          "Association Owners"
        ],
        "summary": "Retrieve an occupancy status",
        "description": "Retrieves the owner occupancy status for an association unit.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View` \r\n<span class=\"permissionBlock\">Associations > Ownership Accounts</span> - `View`",
        "operationId": "ExternalApiAssociationOwnerUnits_GetUnitOccupancyStatusesByIdForAssociationOwner",
        "parameters": [
          {
            "name": "ownerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationOwnerUnitOccupancyStatusMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "This service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Association Owners"
        ],
        "summary": "Update occupancy status",
        "description": "Updates whether a unit is occupied by the association owner.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View` `Edit` \r\n<span class=\"permissionBlock\">Associations > Ownership Accounts</span> - `View`",
        "operationId": "ExternalApiAssociationOwnerUnits_UpdateAssociationOwnerOccupancyStatus",
        "parameters": [
          {
            "name": "ownerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AssociationOwnerUnitOccupancyPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "occupancyStatus"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationOwnerUnitOccupancyStatusMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "This service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/notes": {
      "get": {
        "tags": [
          "Ownership Accounts"
        ],
        "summary": "Retrieve all notes",
        "description": "Retrieves notes for an ownership account.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > OwnershipAccounts</span> - `View`",
        "operationId": "ExternalApiOwnershipAccountNotes_GetAssociationOwnershipAccountNotes",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "updateddatetimefrom",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "updateddatetimeto",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedbyuserid",
            "in": "query",
            "description": "Filters results to only notes that were last updated by the specified user identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Ownership Accounts"
        ],
        "summary": "Create a note",
        "description": "Creates a new ownership account note.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership accounts</span> - `View` `Edit`",
        "operationId": "ExternalApiOwnershipAccountNotes_CreateAssociationOwnershipAccountNote",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotePostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "notesPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/notes/{noteId}": {
      "get": {
        "tags": [
          "Ownership Accounts"
        ],
        "summary": "Retrieve a note",
        "description": "Retrieves an ownership account note.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > OwnershipAccounts</span> - `View`",
        "operationId": "ExternalApiOwnershipAccountNotes_GetAssociationOwnershipAccountNoteByNoteId",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Ownership Accounts"
        ],
        "summary": "Update a note",
        "description": "Updates an association ownership account note.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership Accounts</span> - `View` `Edit`",
        "operationId": "ExternalApiOwnershipAccountNotes_UpdateAssociationOwnershipAccountNote",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotePutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "notePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/partialpaymentsettings": {
      "get": {
        "tags": [
          "Ownership Accounts"
        ],
        "summary": "Retrieve all partial payment settings for an ownership account",
        "description": "Retrieves partial payment settings for an ownership account.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > OwnershipAccounts</span> - `View`",
        "operationId": "ExternalApiOwnershipAccountsPartialPaymentSettings_GetOwnershipAccountPartialPaymentSettings",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartialPaymentSettingsMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Ownership Accounts"
        ],
        "summary": "Update partial payment settings for an ownership account",
        "description": "Updates partial payment settings for an ownership account.\r\n            \r\n\r\n<h4>Required Permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership Accounts</span> - `View` `Edit`\r\n            <span class=\"permissionBlock\">Administration > Application Settings</span> - `View` `Edit`",
        "operationId": "ExternalApiOwnershipAccountUpdatePartialPaymentSettings_PatchOwnershipAccountPartialPayment",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "<span>Represents the structure of the data that can be provided to a <a target=\"_blank\" href=\"https://datatracker.ietf.org/doc/html/rfc6902\">JSON patch document</a> as path values via <a target=\"_blank\" href=\"https://datatracker.ietf.org/doc/html/rfc6901/\">JSON pointer</a> syntax.</span>",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PartialPaymentSettingsPatchMessage"
                  }
                ]
              }
            },
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PartialPaymentSettingsPatchMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "patchDocument"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartialPaymentSettingsMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/recurringcharges": {
      "post": {
        "tags": [
          "Ownership Account Transactions"
        ],
        "summary": "Create a recurring charge",
        "description": "Creates a recurring charge transaction that will post automatically on the specified ownership account ledger.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership account transactions</span> - `View` `Edit`",
        "operationId": "ExternalApiOwnershipAccountChargeRecurringTransactions_CreateOwnershipAccountsChargeRecurringTransaction",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ChargeRecurringTransactionPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnershipAccountChargeRecurringTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/recurringcharges/{transactionId}": {
      "get": {
        "tags": [
          "Ownership Account Transactions"
        ],
        "summary": "Retrieve a recurring charge",
        "description": "Retrieves a recurring charge.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership account transactions</span> - `View`",
        "operationId": "ExternalApiOwnershipAccountChargeRecurringTransactions_GetOwnershipAccountsChargeRecurringTransactionById",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnershipAccountChargeRecurringTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/recurringcredits": {
      "post": {
        "tags": [
          "Ownership Account Transactions"
        ],
        "summary": "Create a recurring credit",
        "description": "Creates a recurring credit transaction that will post automatically on the specified ownership account ledger.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership account transactions</span> - `View` `Edit`",
        "operationId": "ExternalApiOwnershipAccountRecurringCredits_CreateOwnershipAccountCreditRecurringTransaction",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreditRecurringTransactionPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnershipAccountRecurringCreditMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/recurringcredits/{transactionId}": {
      "get": {
        "tags": [
          "Ownership Account Transactions"
        ],
        "summary": "Retrieve a recurring credit",
        "description": "Retrieves a recurring credit.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership account transactions</span> - `View`",
        "operationId": "ExternalApiOwnershipAccountRecurringCredits_GetOwnershipAccountRecurringCreditById",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnershipAccountRecurringCreditMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/recurringpayments": {
      "post": {
        "tags": [
          "Ownership Account Transactions"
        ],
        "summary": "Create a recurring payment",
        "description": "Creates a recurring payment that will post automatically on the specified ownership account ledger.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership account transactions</span> - `View` `Edit`",
        "operationId": "ExternalApiOwnershipAccountRecurringPayments_CreateOwnershipAccountRecurringPayment",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PaymentRecurringTransactionPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "paymentRecurringTransactionPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnershipAccountRecurringPaymentMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/ownershipaccounts/{ownershipAccountId}/recurringpayments/{paymentId}": {
      "get": {
        "tags": [
          "Ownership Account Transactions"
        ],
        "summary": "Retrieve a recurring payment",
        "description": "Retrieves a recurring payment.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership account transactions</span> - `View`",
        "operationId": "ExternalApiOwnershipAccountRecurringPayments_GetRecurringOwnershipAccountPaymentsById",
        "parameters": [
          {
            "name": "ownershipAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnershipAccountRecurringPaymentMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/ownershipaccounts/architecturalrequests/{architecturalRequestId}/files/{fileId}": {
      "get": {
        "tags": [
          "Architectural Requests"
        ],
        "summary": "Retrieve an architectural request file",
        "description": "Retrieves an architectural request file.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Associations > Ownership accounts</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Associations > Architectural requests</span> - `View`",
        "operationId": "ExternalApiAssociationArchitecturalRequests_GetArchitecturalRequestFileAsync",
        "parameters": [
          {
            "name": "architecturalRequestId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssociationArchitecturalRequestFileMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/ownershipaccounts/architecturalrequests/{architecturalRequestId}/files/{fileId}/downloadrequests": {
      "post": {
        "tags": [
          "Architectural Requests"
        ],
        "summary": "Download an architectural request file",
        "description": "Downloads a specific file associated to the architectural request.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Associations > Ownership accounts</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Associations > Architectural requests</span> - `View`",
        "operationId": "ExternalApiAssociationArchitecturalRequests_DownloadArchitecturalRequestFileAsync",
        "parameters": [
          {
            "name": "architecturalRequestId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileDownloadMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/ownershipaccounts/recurringtransactions": {
      "get": {
        "tags": [
          "Ownership Account Transactions"
        ],
        "summary": "Retrieve all recurring transactions for all ownership accounts",
        "description": "Retrieves all recurring transactions for all ownership accounts.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Ownership account transactions</span> - `View`",
        "operationId": "ExternalApiOwnershipAccountRecurringTransactions_GetRecurringTransactionsForAllOwnershipAccounts",
        "parameters": [
          {
            "name": "ownershipaccountids",
            "in": "query",
            "description": "Filters results to only include records associated with the provided ownership account Ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "createddatetimefrom",
            "in": "query",
            "description": "Filters results to recurring transactions created after the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS. The maximum date range is 365 days.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "createddatetimeto",
            "in": "query",
            "description": "Filters results to recurring transactions created before the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS. The maximum date range is 365 days.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to recurring transactions last updated after the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS. The maximum date range is 365 days.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to recurring transactions last updated before the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS. The maximum date range is 365 days.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BulkOwnershipAccountRecurringTransactionMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/tenants/{tenantId}/notes": {
      "get": {
        "tags": [
          "Association Tenants"
        ],
        "summary": "Retrieve all notes",
        "description": "Retrieves all association tenant notes.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View`",
        "operationId": "ExternalApiAssociationTenantNotes_GetAssociationTenantNotes",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "updateddatetimefrom",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "updateddatetimeto",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedbyuserid",
            "in": "query",
            "description": "Filters results to only notes that were last updated by the specified user identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Association Tenants"
        ],
        "summary": "Create a note",
        "description": "Creates an association tenant note.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociationTenantNotes_CreateAssociationTenantNote",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotePostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "notePostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/tenants/{tenantId}/notes/{noteId}": {
      "get": {
        "tags": [
          "Association Tenants"
        ],
        "summary": "Retrieve a note",
        "description": "Retrieves an association tenant note.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View`",
        "operationId": "ExternalApiAssociationTenantNotes_GetAssociationTenantNoteById",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Association Tenants"
        ],
        "summary": "Update a note",
        "description": "Updates an association tenant note.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociationTenantNotes_UpdateAssociationTenantNote",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotePutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "notePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/units/{unitId}/notes": {
      "get": {
        "tags": [
          "Association Units"
        ],
        "summary": "Retrieve all notes",
        "description": "Retrieves all association unit notes.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View`",
        "operationId": "ExternalApiAssociationUnitNotes_GetAssociationUnitNotes",
        "parameters": [
          {
            "name": "updateddatetimefrom",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "updateddatetimeto",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedbyuserid",
            "in": "query",
            "description": "Filters results to only notes that were last updated by the specified user identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Association Units"
        ],
        "summary": "Create a note",
        "description": "Creates a new association unit note.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociationUnitNotes_CreateAssociationUnitNote",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotePostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "notesPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/associations/units/{unitId}/notes/{noteId}": {
      "get": {
        "tags": [
          "Association Units"
        ],
        "summary": "Retrieve a note",
        "description": "Retrieves an association unit note.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View`",
        "operationId": "ExternalApiAssociationUnitNotes_GetAssociationUnitNoteByNoteId",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Association Units"
        ],
        "summary": "Update a note",
        "description": "Updates an association unit note.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Associations > Associations and units</span> - `View` `Edit`",
        "operationId": "ExternalApiAssociationUnitNotes_UpdateAssociationUnitNote",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotePutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "notePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts": {
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Retrieve all bank accounts",
        "description": "Retrieves a list of bank accounts.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View`",
        "operationId": "ExternalApiBankAccounts_GetAllBankAccounts",
        "parameters": [
          {
            "name": "bankaccountstatus",
            "in": "query",
            "description": "Filters results by the status of the bank account. If no status is specified, bank accounts with any status will be returned.",
            "schema": {
              "enum": [
                "Active",
                "InActive"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "bankname",
            "in": "query",
            "description": "Filters results to any bank account whose name *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "routingnumbers",
            "in": "query",
            "description": "Filters results to any bank accounts whose routing number *contains* the specified value.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankAccountMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Create a bank account",
        "description": "Creates a bank account.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Banking</span> - `View` `Edit`",
        "operationId": "ExternalApiBankAccounts_CreateBankAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BankAccountPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}": {
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Retrieve a bank account",
        "description": "Retrieves a specific bank account.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View`",
        "operationId": "ExternalApiBankAccounts_GetBankAccount",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "description": "The bank account identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Update a bank account",
        "description": "Updates a bank account.;\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Banking</span> - `View` `Edit`",
        "operationId": "ExternalApiBankAccounts_UpdateBankAccount",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BankAccountPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "message"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/checks": {
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Retrieve all checks",
        "description": "Retrieves all bank account checks.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Accounting > General Ledger Transactions</span> - `View` <span class=\"permissionBlock\">(Required for checks associated with a Company) </span>",
        "operationId": "ExternalApiBankAccountChecks_GetBankAccountChecks",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "Filters results to any transactions that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "Filters results to any transactions that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankAccountCheckMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Create a check",
        "description": "Creates a check.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View` `Edit`",
        "operationId": "ExternalApiBankAccountChecks_CreateBankAccountCheck",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BankAccountCheckPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountCheckMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/checks/{checkId}": {
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Retrieve a check",
        "description": "Retrieves a bank account check.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Accounting > General Ledger Transactions</span> - `View` <span class=\"permissionBlock\">(Required for checks associated with a Company) </span>",
        "operationId": "ExternalApiBankAccountChecks_GetCheckForBankAccount",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountCheckMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Update a check",
        "description": "Updates a check.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View` `Edit`",
        "operationId": "ExternalApiBankAccountChecks_UpdateCheckForBankAccount",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BankAccountCheckPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "putMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountCheckMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/checks/{checkId}/files": {
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Retrieve all files for a check",
        "description": "Retrieves the metadata for all files associated to the specified check.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Accounting > General Ledger Transactions</span> - `View` <span class=\"permissionBlock\">(Required for checks associated with a Company) </span>",
        "operationId": "ExternalApiBankAccountCheckFiles_GetFilesForBankAccountCheck",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankAccountCheckFileMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/checks/{checkId}/files/{fileId}": {
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Retrieve a file for a check",
        "description": "Retrieves the metadata for a specific file associated with the specified check.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Accounting > General Ledger Transactions</span> - `View` <span class=\"permissionBlock\">(Required for checks associated with a Company) </span>",
        "operationId": "ExternalApiBankAccountCheckFiles_GetBankAccountCheckFileById",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountCheckFileMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Delete a file for a check",
        "description": "Deletes a file for a check\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > BankAccounts</span> - `View` `Edit` `Delete`\r\n            \r\n<span class=\"permissionBlock\">Accounting > General Ledger Transactions</span> - `View` <span class=\"permissionBlock\">(Required for checks associated with a Company) </span>",
        "operationId": "ExternalApiBankAccountCheckFiles_DeleteBankAccountCheckFile",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK - No Content."
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/checks/{checkId}/files/{fileId}/downloadrequests": {
      "post": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Download a file for a check",
        "description": "Downloads a specific file associated to the check.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Accounting > General Ledger Transactions</span> - `View` <span class=\"permissionBlock\">(Required for checks associated with a Company) </span>",
        "operationId": "ExternalApiBankAccountCheckFileDownloadRequests_DownloadCheckFile",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileDownloadMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/checks/{checkId}/files/uploadrequests": {
      "post": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Upload a file for a check",
        "description": "Uploads a file and associates it to the specified check record.\r\n\r\n\r\nUploading a file requires making two API requests. Each step is outlined below.\r\n\r\n\r\n<strong>Step 1 - Save file metadata</strong>\r\n\r\nThe first step in the file upload process is to submit the file metadata to `/v1/bankaccounts/{bankAccountId:int}/checks/{checkId:int}/files/uploadrequests`. The response of this call will contain a URL and a collection of form data that will be used in step 2 to generate the request for the file binary upload.\r\n\r\n\r\n<strong>NOTE:</strong> The response data will expire after 5 minutes. The file metadata will not be saved in the Buildium system if step 2 of this process is not completed successfully.\r\n\r\n\r\n<strong>Step 2 - Upload the file binary</strong>\r\n\r\nUploading the file binary will require using the response from step 1 to form a POST request to the Buildium file provider. Follow these steps to create the request:\r\n\r\n\r\n1. Form a POST request using the value of the `BucketUrl` property as the URL. \r\n\r\n\r\n\r\n2. Set the `Content-Type` header to `multipart/form-data`.\r\n\r\n\r\n\r\n3. Copy the fields from the `FormData`  property to this request as form-data key/value pairs.\r\n\r\n<strong>NOTE:</strong> These values must added to the request form-data in the order they were received in the response.\r\n\r\n\r\n\r\n4. Lastly create a form-data key named `file` and set the value to the file binary.\r\n\r\n<strong>NOTE:</strong> This must be the last field in the form-data list.\r\n\r\n\r\nThis image shows what the POST request should look like if you're using Postman:\r\n<img src=\"file-upload-example.png\" />\r\n\r\n\r\n5. Send the POST request! A successful request will return with a `204 - NO CONTENT` HTTP response code. For any failure responses, please refer to <a target=\"_blank\" href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#RESTErrorResponses\">AWS documentation</a> on REST error responses.\r\n\r\n\r\n<strong>NOTE:</strong> The file identifier is not generated in this response. To retrieve the file identifier, call `/v1/files` and pass the `PhysicalFileName` value received from the response of this endpoint into the `physicalfilenames` query parameter.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Checks</span> - `View` `Edit`\r\n<span class=\"permissionBlock\">Accounting > General Ledger Transactions</span> - `View` <span class=\"permissionBlock\">(Required for checks associated with a Company) </span>",
        "operationId": "ExternalApiBankAccountCheckFileUploads_CreateCheckUploadFileRequest",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "checkId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FileNamePostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "fileNamePostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileUploadTicketMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "There is a request conflict with the current state of the target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/deposits": {
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Retrieve all deposits",
        "description": "Retrieves all bank account deposits.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > BankAccount</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Accounting > General Ledger Transactions</span> - `View` <span class=\"permissionBlock\">(Required for deposits associated with a Company) </span>",
        "operationId": "ExternalApiBankAccountDeposits_GetBankAccountDeposits",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "Filters results to any deposits that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "Filters results to any deposits that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankAccountDepositMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Create a deposit",
        "description": "Creates a deposit.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View` `Edit`",
        "operationId": "ExternalApiBankAccountDeposits_CreateBankAccountDeposit",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BankAccountDepositPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "depositPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountDepositMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/deposits/{depositId}": {
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Retrieve a deposit",
        "description": "Retrieves a bank account deposit.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > BankAccount</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Accounting > General Ledger Transactions</span> - `View` <span class=\"permissionBlock\">(Required for deposits associated with a Company) </span>",
        "operationId": "ExternalApiBankAccountDeposits_GetBankAccountDepositById",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "depositId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountDepositMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Update a deposit",
        "description": "Updates a deposit.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View` `Edit`",
        "operationId": "ExternalApiBankAccountDeposits_UpdateBankAccountDeposit",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "depositId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BankAccountDepositPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "depositPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountDepositMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/quickdeposits": {
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Retrieve all quick deposits",
        "description": "Retrieves all quick deposits.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > BankAccount</span> - `View`",
        "operationId": "ExternalApiBankAccountQuickDeposits_GetAllQuickDeposits",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "Filters results to any transactions that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "Filters results to any transactions that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankAccountQuickDepositMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Create a quick deposit",
        "description": "Creates a quick deposit.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > BankAccount</span> - `View` `Edit`",
        "operationId": "ExternalApiBankAccountQuickDeposits_CreateQuickDeposit",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BankAccountQuickDepositSaveMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "bankAccountQuickDepositSaveMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountQuickDepositMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/quickdeposits/{quickDepositId}": {
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Retrieve a quick deposit",
        "description": "Retrieves a quick deposit.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > BankAccount</span> - `View`",
        "operationId": "ExternalApiBankAccountQuickDeposits_GetQuickDepositById",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "quickDepositId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountQuickDepositMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Update a quick deposit",
        "description": "Updates a quick deposit.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View` `Edit`",
        "operationId": "ExternalApiBankAccountQuickDeposits_UpdateQuickDeposit",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "quickDepositId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BankAccountQuickDepositSaveMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "saveMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountQuickDepositMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/reconciliations": {
      "post": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Create a reconciliation",
        "description": "Creates a reconciliation. Reconciliations can only be created for bank accounts that are not linked externally.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > BankAccount</span> - `View` `Edit`",
        "operationId": "ExternalApiBankAccountPendingReconciliations_CreatePendingReconciliations",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BankPendingReconciliationPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "bankPendingReconciliationPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountReconciliationMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "There is a request conflict with the current state of the target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Retrieve all reconciliations",
        "description": "Retrieves all bank account reconciliations. Reconciliations can only be retrieved for bank accounts that are not linked externally.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > BankAccount</span> - `View`",
        "operationId": "ExternalApiBankAccountReconciliationsRead_GetReconciliations",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankAccountReconciliationMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "There is a request conflict with the current state of the target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/reconciliations/{reconciliationId}": {
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Retrieve a reconciliation",
        "description": "Retrieves a bank account reconciliation. Reconciliations can only be retrieved for bank accounts that are not linked externally.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > BankAccount</span> - `View`",
        "operationId": "ExternalApiBankAccountReconciliationsRead_GetReconciliationById",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reconciliationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountReconciliationMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "There is a request conflict with the current state of the target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Update a reconciliation",
        "description": "Updates a reconciliation. Reconciliations can only be updated for bank accounts that are not linked externally.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > BankAccount</span> - `View` `Edit`",
        "operationId": "ExternalApiBankAccountReconciliationsWrite_UpdateReconciliation",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reconciliationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BankReconciliationPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "putMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountReconciliationMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "There is a request conflict with the current state of the target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/reconciliations/{reconciliationId}/balances": {
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Retrieve a reconciliation's balance",
        "description": "Retrieves a bank account reconciliation's balance. Reconciliation balances can only be retrieved for bank accounts that are not linked externally.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > BankAccount</span> - `View`",
        "operationId": "ExternalApiBankAccountReconciliationsRead_GetReconciliationBalanceById",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reconciliationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountReconciliationBalanceMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "There is a request conflict with the current state of the target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Update a reconciliation's balance",
        "description": "Updates a bank account reconciliation's balance. Reconciliation balances can only be updated for bank accounts that are not linked externally.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > BankAccount</span> - `View` `Edit`",
        "operationId": "ExternalApiBankAccountReconciliationsWrite_UpdateReconciliationBalances",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reconciliationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BankAccountReconciliationBalancePutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "putMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountReconciliationBalanceMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "There is a request conflict with the current state of the target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/reconciliations/{reconciliationId}/cleartransactionsrequest": {
      "post": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Clear transactions for a reconciliation",
        "description": "Clears transactions for a reconciliation. Reconciliation transactions can only be cleared for bank accounts that are not linked externally.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > BankAccount</span> - `View` `Edit`",
        "operationId": "ExternalApiBankAccountReconciliationsWrite_ClearTransactions",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reconciliationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BankReconciliationClearTransactionsPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "There is a request conflict with the current state of the target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/reconciliations/{reconciliationId}/finalizerequest": {
      "post": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Finalize a manual reconciliation",
        "description": "Finalizes a manual reconciliation. Reconciliations can only be finalized for bank accounts that are not linked externally.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > BankAccount</span> - `View` `Edit`",
        "operationId": "ExternalApiBankAccountReconciliationFinalize_FinalizeReconciliation",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reconciliationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The specified bank account or reconciliation could not be found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "There is a request conflict with the current state of the target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/reconciliations/{reconciliationId}/transactions": {
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Retrieve all transactions for a reconciliation",
        "description": "Retrieves all transactions, both cleared and uncleared, up to the Statement Ending Date of the related reconciliation. This is true for pending and completed reconciliations. Transactions can only be retrieved for bank accounts that are not linked externally.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > BankAccount</span> - `View`",
        "operationId": "ExternalApiBankAccountReconciliationsRead_GetBankAccountReconciliationTransactions",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reconciliationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankAccountReconciliationTransactionMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "There is a request conflict with the current state of the target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/reconciliations/{reconciliationId}/uncleartransactionsrequest": {
      "post": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Un-clear transactions for a reconciliation",
        "description": "Un-clears transactions for a reconciliation. Reconciliation transactions can only be un-cleared for bank accounts that are not linked externally.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > BankAccount</span> - `View` `Edit`",
        "operationId": "ExternalApiBankAccountReconciliationsWrite_UnclearTransactions",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "reconciliationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BankReconciliationUnclearTransactionsPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "There is a request conflict with the current state of the target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/transactions": {
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Retrieve all transactions",
        "description": "Retrieves all bank account transactions.\r\n            \r\n\r\n\r\n            Note: When using the `orderby` query string parameter, the only supported parameter is `EntryDate`.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View`",
        "operationId": "ExternalApiBankAccountTransactions_GetBankAccountTransactions",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "selectionentityid",
            "in": "query",
            "description": "Filters results to any transaction containing journal lines for an entity associated with the specified entity id value. The id must be of the type specified in SelectionEntityType.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "selectionentitytype",
            "in": "query",
            "description": "Specifies the type of entity that SelectionEntityId refers to.",
            "schema": {
              "enum": [
                "Company",
                "Rental",
                "RentalOwner",
                "Association"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "Filters results to any transactions that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "Filters results to any transactions that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankAccountTransactionMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/transactions/{transactionId}": {
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Retrieve a transaction",
        "description": "Retrieves a specific bank account transaction.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bank Account</span> - `View`",
        "operationId": "ExternalApiBankAccountTransactions_GetBankAccountTransactionById",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/transfers": {
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Retrieve all transfers",
        "description": "Retrieves all bank account transfers.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > BankAccount</span> - `View`",
        "operationId": "ExternalApiBankAccountTransfers_GetBankAccountTransfers",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "Filters results to any transfers that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "Filters results to any transfers that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankAccountTransferMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Create a transfer",
        "description": "Creates a bank account transfer.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View` `Edit`",
        "operationId": "ExternalApiBankAccountTransfers_CreateBankAccountTransfer",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BankAccountTransferSaveMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "saveMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountTransferMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/transfers/{transferId}": {
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Retrieve a transfer",
        "description": "Retrieves a bank account transfer.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View`",
        "operationId": "ExternalApiBankAccountTransfers_GetBankAccountTransferById",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "description": "The bank account identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transferId",
            "in": "path",
            "description": "The transfer identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Update a transfer",
        "description": "Updates a bank account transfer.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View` `Edit`",
        "operationId": "ExternalApiBankAccountTransfers_UpdateBankAccountTransfer",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transferId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BankAccountTransferSaveMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "saveMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountTransferMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/undepositedfunds": {
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Retrieve all undeposited funds",
        "description": "Retrieve all bank account undeposited funds.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View`",
        "operationId": "ExternalApiBankAccountUndepositedFunds_GetUndepositedFunds",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UndepositedFundsMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/withdrawals": {
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Retrieve all withdrawals",
        "description": "Retrieves all bank account withdrawals.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > BankAccounts</span> - `View`",
        "operationId": "ExternalApiBankAccountWithdrawals_GetBankAccountWithdrawals",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "Filters results to any transactions that were recorded on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "Filters results to any transactions that were recorded on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BankAccountWithdrawalMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Create a withdrawal",
        "description": "Creates a bank account withdrawal.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View` `Edit`",
        "operationId": "ExternalApiBankAccountWithdrawals_CreateWithdrawalForBankAccount",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BankAccountWithdrawalSaveMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "withdrawalPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountWithdrawalMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bankaccounts/{bankAccountId}/withdrawals/{withdrawalId}": {
      "get": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Retrieve a withdrawal",
        "description": "Retrieves a bank account withdrawal.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > BankAccounts</span> - `View`",
        "operationId": "ExternalApiBankAccountWithdrawals_GetBankAccountWithdrawalById",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "withdrawalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountWithdrawalMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Bank Accounts"
        ],
        "summary": "Update a withdrawal",
        "description": "Updates a bank account withdrawal.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View` `Edit`",
        "operationId": "ExternalApiBankAccountWithdrawals_UpdateBankAccountWithdrawal",
        "parameters": [
          {
            "name": "bankAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "withdrawalId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BankAccountWithdrawalSaveMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "saveMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountWithdrawalMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bills": {
      "get": {
        "tags": [
          "Bills"
        ],
        "summary": "Retrieve all bills",
        "description": "Retrieves a list of bills.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bills</span> - `View`",
        "operationId": "ExternalApiBills_GetBillsAsync",
        "parameters": [
          {
            "name": "entityid",
            "in": "query",
            "description": "Filters results to any bill containing line items associated with the specified entity identifier. This filter is used in conjunction with the `EntityType` field which must be set to the type of entity this identifier references.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "entitytype",
            "in": "query",
            "description": "Specifies the type of entity that `EntityId` refers to. This field is required if `EntityId` is specified.",
            "schema": {
              "enum": [
                "Rental",
                "RentalOwner",
                "Association"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "vendorid",
            "in": "query",
            "description": "Filters results to bills associated with a specific vendor.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "referencenumber",
            "in": "query",
            "description": "Filters results to bills whose reference number contains the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "paidstatus",
            "in": "query",
            "description": "Filters results by the bill's paid status. If no status is specified, bills with any status will be returned.",
            "schema": {
              "enum": [
                "Paid",
                "Unpaid",
                "UncollectedMarkups"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "frompaiddate",
            "in": "query",
            "description": "Filters results to any bill whose paid date is greater than or equal to the specified value.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "topaiddate",
            "in": "query",
            "description": "Filters results to any bill whose paid date is less than or equal to the specified value.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "approvalstatuses",
            "in": "query",
            "description": "Filters the results to bills matching the specified approval statuses. If no approval status is specified, bills with any status will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "NotNeeded",
                  "ApprovalRequired",
                  "Approved",
                  "Pending",
                  "Rejected"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BillMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Bills"
        ],
        "summary": "Create a bill",
        "description": "Creates a bill.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bills</span> - `View` `Edit`",
        "operationId": "ExternalApiBills_CreateBill",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BillPostMessage"
                  }
                ],
                "description": "This object represents a bill."
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bills/{billId}": {
      "get": {
        "tags": [
          "Bills"
        ],
        "summary": "Retrieve a bill",
        "description": "Retrieves a single bill.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bills</span> - `View`",
        "operationId": "ExternalApiBills_GetBillById",
        "parameters": [
          {
            "name": "billId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Bills"
        ],
        "summary": "Update a bill",
        "description": "Use this operation to update any of the writable fields of an existing bill resource. When updating this resource keep the following in mind: \r\n<ul><li>Writable fields omitted from the request or that do not have a value in the request message are set to `NULL`. If you do not want to update the field, submit the original field value.</li><li>When a bill has an existing payment any edits to the line items that change the total bill amount must result in the new total bill amount being equal to or greater than the amount paid.</li><li>When adding a new line item leave the `LineItem.Id` field empty.</li><li>You cannot update a bill that has a pending EFT associated with it.</li></ul>\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bills</span> - `View` `Edit`",
        "operationId": "ExternalApiBills_UpdateBill",
        "parameters": [
          {
            "name": "billId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BillPutMessage"
                  }
                ],
                "description": "This object represents a bill."
              }
            }
          },
          "required": true,
          "x-bodyName": "billPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "There is a request conflict with the current state of the target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Bills"
        ],
        "summary": "Update a bill",
        "description": "Updates a bill.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bills</span> - `View` `Edit`",
        "operationId": "ExternalApiBills_PatchBill",
        "parameters": [
          {
            "name": "billId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "<span>Represents the structure of the data that can be provided to a <a target=\"_blank\" href=\"https://datatracker.ietf.org/doc/html/rfc6902\">JSON patch document</a> as path values via <a target=\"_blank\" href=\"https://datatracker.ietf.org/doc/html/rfc6901/\">JSON pointer</a> syntax.</span>",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BillPatchMessage"
                  }
                ]
              }
            },
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BillPatchMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "patchDocument"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "There is a request conflict with the current state of the target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bills/{billId}/files": {
      "get": {
        "tags": [
          "Bills"
        ],
        "summary": "Retrieve all files for a bill",
        "description": "Retrieves the metadata for all files associated to the specified bill. To download the actual file view the [Download a bill file](#tag/Bills/operation/ExternalApiBillFileDownloadRequests_DownloadBillFile).\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bills</span> - `View`",
        "operationId": "ExternalApiBillsFiles_GetAllFilesForBill",
        "parameters": [
          {
            "name": "billId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BillFileMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bills/{billId}/files/{fileId}": {
      "get": {
        "tags": [
          "Bills"
        ],
        "summary": "Retrieve a file for a bill",
        "description": "Retrieves the metadata for a specific file associated with the specified bill.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bills</span> - `View`",
        "operationId": "ExternalApiBillsFiles_GetBillFileById",
        "parameters": [
          {
            "name": "billId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillFileMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Bills"
        ],
        "summary": "Delete a bill file",
        "description": "Deletes the specified file from a bill. The file will be permanently deleted from the Buildium platform and can not be recovered.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bills</span> - `View` `Edit` `Delete`",
        "operationId": "ExternalApiBillsFiles_DeleteBillFile",
        "parameters": [
          {
            "name": "billId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK - No Content."
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bills/{billId}/files/{fileId}/downloadrequest": {
      "post": {
        "tags": [
          "Bills"
        ],
        "summary": "Download a bill file",
        "description": "Downloads a specific file associated to the bill.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bills</span> - `View`",
        "operationId": "ExternalApiBillFileDownloadRequests_DownloadBillFile",
        "parameters": [
          {
            "name": "billId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileDownloadMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bills/{billId}/files/uploadrequests": {
      "post": {
        "tags": [
          "Bills"
        ],
        "summary": "Upload a bill file",
        "description": "Uploads a file and associates it to the specified bill record.\r\n\r\n\r\nUploading a file requires making two API requests. Each step is outlined below.\r\n\r\n\r\n<strong>Step 1 - Save file metadata</strong>\r\n\r\nThe first step in the file upload process is to submit the file metadata to `/v1/bills/{billId:int}/files/uploadrequests`. The response of this call will contain a URL and a collection of form data that will be used in step 2 to generate the request for the file binary upload.\r\n\r\n\r\n<strong>NOTE:</strong> The response data will expire after 5 minutes. The file metadata will not be saved in the Buildium system if step 2 of this process is not completed successfully.\r\n\r\n\r\n<strong>Step 2 - Upload the file binary</strong>\r\n\r\nUploading the file binary will require using the response from step 1 to form a POST request to the Buildium file provider. Follow these steps to create the request:\r\n\r\n\r\n1. Form a POST request using the value of the `BucketUrl` property as the URL. \r\n\r\n\r\n\r\n2. Set the `Content-Type` header to `multipart/form-data`.\r\n\r\n\r\n\r\n3. Copy the fields from the `FormData`  property to this request as form-data key/value pairs.\r\n\r\n<strong>NOTE:</strong> These values must added to the request form-data in the order they were received in the response.\r\n\r\n\r\n\r\n4. Lastly create a form-data key named `file` and set the value to the file binary.\r\n\r\n<strong>NOTE:</strong> This must be the last field in the form-data list.\r\n\r\n\r\nThis image shows what the POST request should look like if you're using Postman:\r\n<img src=\"file-upload-example.png\" />\r\n\r\n\r\n5. Send the POST request! A successful request will return with a `204 - NO CONTENT` HTTP response code. For any failure responses, please refer to <a target=\"_blank\" href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#RESTErrorResponses\">AWS documentation</a> on REST error responses.\r\n\r\n\r\n<strong>NOTE:</strong> The file identifier is not generated in this response. To retrieve the file identifier, call `/v1/files` and pass the `PhysicalFileName` value received from the response of this endpoint into the `physicalfilenames` query parameter.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bills</span> - `View` `Edit`",
        "operationId": "ExternalApiBillFileUploads_CreateUploadFileRequest",
        "parameters": [
          {
            "name": "billId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FileNamePostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "fileNamePostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileUploadTicketMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "There is a request conflict with the current state of the target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bills/{billId}/payments": {
      "get": {
        "tags": [
          "Bills"
        ],
        "summary": "Retrieve all bill payments",
        "description": "Retrieves a list of bill payments for a specific bill.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bills</span> - `View`",
        "operationId": "ExternalApiBillPaymentsRead_GetBillPayments",
        "parameters": [
          {
            "name": "billId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BillPaymentMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Bills"
        ],
        "summary": "Create a bill payment",
        "description": "Creates a bill payment.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bills</span> - `View` `Edit`\r\n            <span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View` `Edit`",
        "operationId": "ExternalApiBillPaymentsWrite_CreateBillPayment",
        "parameters": [
          {
            "name": "billId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BillPaymentPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillPaymentMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "There is a request conflict with the current state of the target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bills/{billId}/payments/{paymentId}": {
      "get": {
        "tags": [
          "Bills"
        ],
        "summary": "Retrieve a bill payment",
        "description": "Retrieves specific bill payment.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bills</span> - `View`",
        "operationId": "ExternalApiBillPaymentsRead_GetBillPaymentById",
        "parameters": [
          {
            "name": "billId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillPaymentMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/bills/payments": {
      "post": {
        "tags": [
          "Bills"
        ],
        "summary": "Create a payment for multiple bills with one check",
        "description": "Creates a payment for multiple bills with one check.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bills</span> - `View` `Edit`\r\n            <span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View` `Edit`",
        "operationId": "ExternalApiBillPaymentsWrite_CreateMultipleBillPayments",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MultipleBillPaymentsPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillPaymentMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "There is a request conflict with the current state of the target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/budgets": {
      "get": {
        "tags": [
          "Budgets"
        ],
        "summary": "Retrieve all budgets",
        "description": "Retrieves all budgets.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Budgets</span> - `View`",
        "operationId": "ExternalApiBudgets_GetBudgets",
        "parameters": [
          {
            "name": "propertyids",
            "in": "query",
            "description": "Filters results to any budget associated to any of the specified set of property ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "fiscalyear",
            "in": "query",
            "description": "Filters results to any budgets that end in the given fiscal year. FiscalYear must be a positive number.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filters results to any budgets whose name *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BudgetMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Budgets"
        ],
        "summary": "Create a budget",
        "description": "Creates a budget.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Budgets</span> - `View` `Edit`",
        "operationId": "ExternalApiBudgets_CreateBudgetAsync",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BudgetPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "budgetPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/budgets/{budgetId}": {
      "get": {
        "tags": [
          "Budgets"
        ],
        "summary": "Retrieve a budget",
        "description": "Retrieves a budget.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Budgets</span> - `View`",
        "operationId": "ExternalApiBudgets_GetBudgetById",
        "parameters": [
          {
            "name": "budgetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Budgets"
        ],
        "summary": "Update a budget",
        "description": "Updates a budget.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Budgets</span> - `View` `Edit`",
        "operationId": "ExternalApiBudgets_UpdateBudget",
        "parameters": [
          {
            "name": "budgetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BudgetPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "budgetPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BudgetMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/clientleads": {
      "get": {
        "tags": [
          "Client Leads"
        ],
        "summary": "Retrieve all client leads",
        "description": "Retrieves all client leads\r\n            \r\n\r\n\r\n            Note: When using the `orderby` query string parameter, the only supported options are DateReceived.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Administration > All Property Management</span> - `View`",
        "operationId": "ExternalApiClientLeads_GetClientLeads",
        "parameters": [
          {
            "name": "leadstatuses",
            "in": "query",
            "description": "Filters results to any client leads that are in one of the given statuses.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Unknown",
                  "New",
                  "Contacting",
                  "Qualifying",
                  "Closing",
                  "ClosedWon",
                  "ClosedLost"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "propertytypes",
            "in": "query",
            "description": "Filters results to any client leads that have a property in one of the given property types.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "SingleHomeUpToThreeHundredThousand",
                  "SingleHomeThreeHundredToFiveHundredThousand",
                  "SingleHomeFiveHundredThousandToOneMillion",
                  "SingleHomeOverOneMillion",
                  "MultiFamilyTwoToFourUnits",
                  "MultiFamilyFiveToNineteenUnits",
                  "MultiFamilyTwentyToFortyNineUnits",
                  "MultiFamilyOverOneHundredUnits",
                  "OfficeLessThanTenThousandSqFt",
                  "OfficeTenThousandToOneHundredThousandSqFt",
                  "OfficeOverOneHundredThousandSqFt",
                  "RetailLessThanTenThousandSqFt",
                  "RetailTenThousandToOneHundredThousandSqFt",
                  "RetailOverOneHundredThousandSqFt",
                  "LightManufacturingUpToOneHundredThousandSqFt",
                  "LightManufacturingOverOneHundredThousandSqFt",
                  "WarehouseUpToOneHundredThousandSqFt",
                  "WarehouseOverOneHundredThousandSqFt",
                  "VacationOneToTwoUnits",
                  "VacationOverThreeUnits",
                  "ParkingGarage",
                  "OtherAssociation",
                  "BiotechMissionCritical",
                  "HOATwoToFortyNineUnits",
                  "HOAFiftyToNinetyNineUnits",
                  "HOAOverOneHundredUnits",
                  "COATwoToFortyNineUnits",
                  "COAFiftyToNinetyNineUnits",
                  "COAOverOneHundredUnits",
                  "MobileHomeCommunity"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "datereceivedfrom",
            "in": "query",
            "description": "Filters results to any client leads that were received on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "datereceivedto",
            "in": "query",
            "description": "Filters results to any client leads that were received on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "includecreditedleads",
            "in": "query",
            "description": "This will also return client leads that were credited. By default credited leads will not be returned.",
            "schema": {
              "type": "boolean"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientLeadMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/clientleads/{clientLeadId}": {
      "get": {
        "tags": [
          "Client Leads"
        ],
        "summary": "Retrieve a client lead",
        "description": "Retrieves a specific client lead\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Administration > All Property Management</span> - `View`",
        "operationId": "ExternalApiClientLeads_GetProspectiveClient",
        "parameters": [
          {
            "name": "clientLeadId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientLeadMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/communications/announcements": {
      "get": {
        "tags": [
          "Communications"
        ],
        "summary": "Retrieve all announcements",
        "description": "Retrieves all announcements.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Communications > Announcements</span> - `View`",
        "operationId": "ExternalApiAnnouncements_GetAllAnnouncements",
        "parameters": [
          {
            "name": "announcementdatefrom",
            "in": "query",
            "description": "Filters results to any announcements created on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "announcementdateto",
            "in": "query",
            "description": "Filters results to any announcements created on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "entityid",
            "in": "query",
            "description": "Filters results to any announcement associated with the specified entity id value. The value must be of the type specified in the `EntityType` field.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "entitytype",
            "in": "query",
            "description": "Specifies the type of entity that the `EntityId` field refers to. This field is required if the `EntityId` field is provided.",
            "schema": {
              "enum": [
                "Rental",
                "RentalOwner",
                "Association"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "senderid",
            "in": "query",
            "description": "Unique identifier of the user that published the announcement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnnouncementMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Communications"
        ],
        "summary": "Create an announcement",
        "description": "Creates and publishes an announcement.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Communications > Announcements</span> - `View` `Edit`",
        "operationId": "ExternalApiAnnouncements_CreateAnnouncement",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AnnouncementPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnouncementMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/communications/announcements/{announcementId}": {
      "get": {
        "tags": [
          "Communications"
        ],
        "summary": "Retrieve an announcement",
        "description": "Retrieves an announcement.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Communications > Announcements</span> - `View`",
        "operationId": "ExternalApiAnnouncements_GetAnnouncementById",
        "parameters": [
          {
            "name": "announcementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnnouncementMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/communications/announcements/{announcementId}/expirationrequest": {
      "post": {
        "tags": [
          "Communications"
        ],
        "summary": "Expire an announcement",
        "description": "Removes the announcement from the Resident Center immediately.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Communications > Announcements</span> - `View` `Edit`",
        "operationId": "ExternalApiAnnouncementsExpiration_ExpireAnnouncement",
        "parameters": [
          {
            "name": "announcementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "NoContent"
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/communications/announcements/{announcementId}/properties": {
      "get": {
        "tags": [
          "Communications"
        ],
        "summary": "Retrieve all announcement properties",
        "description": "Retrieves a list of association and/or rental properties whose residents received the announcement. An empty response collection indicates that the announcement was sent to all properties at the time of its creation.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Communications > Announcements</span> - `View`",
        "operationId": "ExternalApiAnnouncementProperties_GetAnnouncementProperties",
        "parameters": [
          {
            "name": "announcementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PropertyMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/communications/emails": {
      "get": {
        "tags": [
          "Communications"
        ],
        "summary": "Retrieve all emails",
        "description": "Retrieves all emails.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Communication > Emails</span> - `View`",
        "operationId": "ExternalApiEmails_GetEmails",
        "parameters": [
          {
            "name": "sentdatetimefrom",
            "in": "query",
            "description": "Filters results to any emails whose sent date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DDTHH:MM:SSZ. The maximum date range is 90 days.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "sentdatetimeto",
            "in": "query",
            "description": "Filters results to any emails whose sent date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DDTHH:MM:SSZ. The maximum date range is 90 days.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "subject",
            "in": "query",
            "description": "Filters results to any email whose subject *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "recipientnameoremail",
            "in": "query",
            "description": "Filters results to any email with a recipient whose name or email address *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "senderuserid",
            "in": "query",
            "description": "Filters results to only emails that were sent by the specified user identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Communications"
        ],
        "summary": "Send an email",
        "description": "Sends an email to one or more recipients using the specified email template. \r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Communication > Emails</span> - `View` `Edit`",
        "operationId": "ExternalApiEmailsWrite_CreateEmail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EmailPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "202": {
            "description": "Sent email."
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/communications/emails/{emailId}": {
      "get": {
        "tags": [
          "Communications"
        ],
        "summary": "Retrieve an email",
        "description": "Retrieves the content of an email. To retrieve the recipients of the email see the [Retrieve all email recipients](#tag/Communications/operation/ExternalApiEmailRecipients_GetEmailRecipients) endpoint.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Communications > Emails</span> - `View`",
        "operationId": "ExternalApiEmails_GetEmailById",
        "parameters": [
          {
            "name": "emailId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/communications/emails/{emailId}/recipients": {
      "get": {
        "tags": [
          "Communications"
        ],
        "summary": "Retrieve all email recipients",
        "description": "Retrieves all email recipients.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Communications > Email</span> - `View`\r\n            \r\n<h4>Optional Permissions:</h4>\r\n\r\n            The following permissions are optional, but results with a missing permission will be filtered out.\r\n            <span class=\"permissionBlock\">Maintenance > Vendors</span> - `View` In order to retrieve recipients that are Vendors, you must have this permission.\r\n            <span class=\"permissionBlock\">Administration > Users</span> - `View` In order to see recipients that are Staff, you must have this permission.",
        "operationId": "ExternalApiEmailRecipients_GetEmailRecipients",
        "parameters": [
          {
            "name": "emailId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EmailRecipientMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/communications/phonelogs": {
      "get": {
        "tags": [
          "Communications"
        ],
        "summary": "Retrieve all phone logs",
        "description": "Retrieves all phone logs.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Communications > Timelines (Phone Logs)</span> - `View`",
        "operationId": "ExternalApiPhoneLogs_GetPhoneLogs",
        "parameters": [
          {
            "name": "fromdate",
            "in": "query",
            "description": "Filters results to any phone log whose call date is greater than or equal to the specified value.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "todate",
            "in": "query",
            "description": "Filters results to any phone log whose call date is less than or equal to the specified value.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "loggedbystaffuserids",
            "in": "query",
            "description": "Filters results to any phone log that was logged by staff user(s).",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "subject",
            "in": "query",
            "description": "Filters results to any phone log whose subject *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "participantentityid",
            "in": "query",
            "description": "Filters results to any phone logs that match the participant identifier. Note, if a value is provided in this field the `ParticipantEntityType` must also be provided.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "participantentitytype",
            "in": "query",
            "description": "Filters results to any phone log with the specified participant type. This field is required if a value is provided for the `ParticipantEntityId` field.",
            "schema": {
              "enum": [
                "Vendor",
                "RentalOwner",
                "RentalTenant",
                "AssociationOwner"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "unitagreementid",
            "in": "query",
            "description": "Filters results to any phone log with the specified unit agreement identifier. Note, if a value is provided in this field the `UnitAgreementType` must also be provided.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "unitagreementtype",
            "in": "query",
            "description": "Filters results to any phone log with the specified unit agreement type. This field is required if a value is provided for the `UnitAgreementId` field.",
            "schema": {
              "enum": [
                "Lease",
                "OwnershipAccount"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PhoneLogMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Communications"
        ],
        "summary": "Create a phone log",
        "description": "Creates a phone log.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Communications > Timelines (Phone Logs)</span> - `View` `Edit`",
        "operationId": "ExternalApiPhoneLogs_CreatePhoneLog",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneLogPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "phoneLogPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneLogMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/communications/phonelogs/{phoneLogId}": {
      "get": {
        "tags": [
          "Communications"
        ],
        "summary": "Retrieve a phone log",
        "description": "Retrieves a specific phone log.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Communications > Timelines (Phone Logs)</span> - `View`",
        "operationId": "ExternalApiPhoneLogs_GetPhoneLogById",
        "parameters": [
          {
            "name": "phoneLogId",
            "in": "path",
            "description": "The phone log identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneLogMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Communications"
        ],
        "summary": "Update a phone log",
        "description": "Update a phone log\r\n\r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Communications > Timelines (Phone Logs)</span> - `View` `Edit`",
        "operationId": "ExternalApiPhoneLogs_UpdatePhoneLog",
        "parameters": [
          {
            "name": "phoneLogId",
            "in": "path",
            "description": "The phone log identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PhoneLogPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "phoneLogPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneLogMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/communications/templates": {
      "get": {
        "tags": [
          "Communications"
        ],
        "summary": "Retrieve all communication templates",
        "description": "Retrieves all mailing and email templates. A template is a tool in Buildium that allows you to create \"mail merge\" templates for emails and postal mailings to easily send common messages to residents, rental owners and vendors. \r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Communications > Mailing Templates</span> - `View`\r\n            \r\n<h4>Optional Permissions:</h4><span class=\"permissionBlock\">Rentals > Tenants</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Rentals > Property Rental owners</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Maintenance > Vendors</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Rentals > Applicants</span> - `View`",
        "operationId": "ExternalApiMailingTemplates_GetMailingTemplates",
        "parameters": [
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MailingTemplateMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/communications/templates/{templateId}": {
      "get": {
        "tags": [
          "Communications"
        ],
        "summary": "Retrieve a communication template",
        "description": "Retrieves a communication template. A template is a tool in Buildium that allows you to create \"mail merge\" templates for emails and postal mailings to easily send common messages to residents, rental owners and vendors.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Communications > Mailing Templates</span> - `View`\r\n            \r\n<h4>Optional Permissions:</h4><span class=\"permissionBlock\">Rentals > Tenants</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Rentals > Property Rental owners</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Maintenance > Vendors</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Rentals > Applicants</span> - `View`",
        "operationId": "ExternalApiMailingTemplates_GetMailingTemplatesById",
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MailingTemplateMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/files/{fileId}/sharing": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Retrieve file share settings",
        "description": "Retrieves a file's share settings. Note, that the response JSON schema includes share setting fields for all file entity types, however only fields that pertain to the queried file entity type will be populated. For example, if a file of entity type Rental is retrieved only the fields in the Rental section of the response will have values.\r\n            \r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Documents > Files</span> - `View`",
        "operationId": "ExternalApiFileSharing_GetFileShareSettingsById",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSharingMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Files"
        ],
        "summary": "Update file share settings",
        "description": "Updates a file's share settings. Note, can only update a file's share settings based on the file's entity type (ie: If the file belongs to a rental property, you can only update the rental file sharing settings). The response payload contains file share setting values for all file entity types, but the relevant setting values correlate to the file's entity type.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Documents > Files</span> - `View` `Edit`",
        "operationId": "ExternalApiFileSharing_UpdateFileSharingSetting",
        "parameters": [
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FileSharingPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "putMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileSharingMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/files/categories": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Retrieve all categories",
        "description": "Retrieves a list of file categories.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Documents > Files</span> - `View`",
        "operationId": "ExternalApiFileCategories_GetFileCategories",
        "parameters": [
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileCategoryMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Create a category",
        "description": "Creates a file category.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Documents > Files</span> - `View` `Edit`",
        "operationId": "ExternalApiFileCategories_CreateFileCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FileCategoryPostMessage"
                  }
                ],
                "description": "File category."
              }
            }
          },
          "required": true,
          "x-bodyName": "fileCategoryPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileCategoryMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/files/categories/{fileCategoryId}": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Retrieve a category",
        "description": "Retrieves a specific file category.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Documents > Files</span> - `View`",
        "operationId": "ExternalApiFileCategories_GetFileCategoryById",
        "parameters": [
          {
            "name": "fileCategoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileCategoryMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Files"
        ],
        "summary": "Update a category",
        "description": "Updates a file category. Note that file categories where `IsEditable` is `false` can not be updated.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Documents > Files</span> - `View` `Edit`",
        "operationId": "ExternalApiFileCategories_UpdateFileCategory",
        "parameters": [
          {
            "name": "fileCategoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FileCategoryPutMessage"
                  }
                ],
                "description": "File Category"
              }
            }
          },
          "required": true,
          "x-bodyName": "fileCategoryPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileCategoryMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/generalledger": {
      "get": {
        "tags": [
          "General Ledger"
        ],
        "summary": "Retrieve all general ledger entries",
        "description": "Retrieves all general ledger entries\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > General Ledger Transactions</span> - `View`",
        "operationId": "ExternalApiGeneralLedger_GetGeneralLedgerEntries",
        "parameters": [
          {
            "name": "accountingbasis",
            "in": "query",
            "description": "The methodology in which revenues and expenses are recognized when calculating the balances. Specifying `Cash` calculates balances based on when money changes hands. Specifying `Accrual` calculates balances based on the period in which the transaction originally happened.",
            "required": true,
            "schema": {
              "enum": [
                "Accrual",
                "Cash"
              ],
              "type": "string"
            }
          },
          {
            "name": "entitytype",
            "in": "query",
            "description": "Specifies the type of entity that `EntityId` field refers to.",
            "schema": {
              "enum": [
                "Company",
                "Rental",
                "RentalOwner",
                "Association"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "entityid",
            "in": "query",
            "description": "Filters results to any general ledger entry containing line items associated with the specified entity identifier. This filter is used in conjunction with the `EntityType` field which must be set to the type of entity this identifier references.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "glaccountids",
            "in": "query",
            "description": "Filters results to entries whose general ledger account belongs to the specified set of general ledger account ids.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "Filters results to any entries whose start date is greater than or equal to the specified value.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "Filters results to any entries whose end date is less than or equal to the specified value.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeneralLedgerMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/generalledger/journalentries": {
      "post": {
        "tags": [
          "General Ledger"
        ],
        "summary": "Create a general journal entry",
        "description": "Creates a general journal entry.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > General Ledger Transactions</span> - `View` `Edit`",
        "operationId": "ExternalApiGeneralLedgerJournalEntries_CreateGeneralJournalEntry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GeneralJournalEntryPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "generalJournalEntryPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralLedgerTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/generalledger/journalentries/{journalEntryId}": {
      "put": {
        "tags": [
          "General Ledger"
        ],
        "summary": "Update a general journal entry",
        "description": "Updates a general journal entry.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > General Ledger Transactions</span> - `View` `Edit`",
        "operationId": "ExternalApiGeneralLedgerJournalEntries_UpdateGeneralJournalEntry",
        "parameters": [
          {
            "name": "journalEntryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GeneralJournalEntryPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "putMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralLedgerTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/generalledger/transactions": {
      "get": {
        "tags": [
          "General Ledger"
        ],
        "summary": "Retrieve all general ledger transactions",
        "description": "Retrieves a list of general ledger transactions.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > General Ledger Transactions</span> - `View`",
        "operationId": "ExternalApiGeneralLedgerTransactions_GetAllTransactions",
        "parameters": [
          {
            "name": "selectionentityid",
            "in": "query",
            "description": "Filters results to any transaction containing journal lines for an entity associated with the specified entity id value. The id must be of the type specified in SelectionEntityType.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "selectionentitytype",
            "in": "query",
            "description": "Specifies the type of entity that SelectionEntityId refers to.",
            "schema": {
              "enum": [
                "Rental",
                "RentalOwner",
                "Association"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "startdate",
            "in": "query",
            "description": "Filters results to any transaction whose date is greater than or equal to the specified value.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "enddate",
            "in": "query",
            "description": "Filters results to any transaction whose date is less than or equal to the specified value.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "glaccountids",
            "in": "query",
            "description": "Filters results to transactions whose general ledger account belongs to the specified set of general ledger account ids.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "selectionentityunitid",
            "in": "query",
            "description": "Filters results to any transaction containing journal lines for the unitId specified. Only applicable when the SelectionEntityType is Rentals or Associations.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to any transactions that were updated on or after the specified date. The value must be formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to any transactions that were updated on or before the specified date. The value must be formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GeneralLedgerTransactionMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/generalledger/transactions/{transactionId}": {
      "get": {
        "tags": [
          "General Ledger"
        ],
        "summary": "Retrieve a general ledger transaction",
        "description": "Retrieves a specific general ledger transaction.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > General Ledger Transactions</span> - `View`",
        "operationId": "ExternalApiGeneralLedgerTransactions_GetTransactionById",
        "parameters": [
          {
            "name": "transactionId",
            "in": "path",
            "description": "The general ledger transaction identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralLedgerTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/glaccounts": {
      "get": {
        "tags": [
          "General Ledger"
        ],
        "summary": "Retrieve all general ledger accounts",
        "description": "Retrieves a list of general ledger accounts.\r\n\r\nGeneral ledger accounts are used to categorize transactions for accounting purposes.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > General Ledger Accounts</span> - `View`",
        "operationId": "ExternalApiGeneralLedgerAccounts_GetAllGLAccounts",
        "parameters": [
          {
            "name": "accounttypes",
            "in": "query",
            "description": "Filters results by the specified general ledger account types.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Asset",
                  "Liability",
                  "Equity",
                  "Income",
                  "Expense"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GLAccountMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "General Ledger"
        ],
        "summary": "Create a general ledger account",
        "description": "Creates a general ledger account.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > General Ledger Accounts</span> - `View` `Edit`",
        "operationId": "ExternalApiGeneralLedgerAccounts_CreateGeneralLedgerAccount",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GLAccountPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "glAccountPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GLAccountMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/glaccounts/{glAccountId}": {
      "get": {
        "tags": [
          "General Ledger"
        ],
        "summary": "Retrieve a general ledger account",
        "description": "Retrieves a specific general ledger account.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > General Ledger Accounts</span> - `View`",
        "operationId": "ExternalApiGeneralLedgerAccounts_GetGlAccountById",
        "parameters": [
          {
            "name": "glAccountId",
            "in": "path",
            "description": "The general ledger account identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GLAccountMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "General Ledger"
        ],
        "summary": "Update a general ledger account",
        "description": "Updates a general ledger account.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > General Ledger Accounts</span> - `View` `Edit`",
        "operationId": "ExternalApiGeneralLedgerAccounts_UpdateGLAccount",
        "parameters": [
          {
            "name": "glAccountId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GLAccountPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "putMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GLAccountMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/glaccounts/balances": {
      "get": {
        "tags": [
          "General Ledger"
        ],
        "summary": "Retrieve all general ledger account balances",
        "description": "Retrieves all general ledger account balances as of a given date. The response includes the total balance of each account along with the subtotals for any accounting entities (company, associations or rental properties) that have transactions assigned to the account.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > General Ledger Accounts</span> - `View`",
        "operationId": "ExternalApiGLAccountBalances_GetGlAccountBalances",
        "parameters": [
          {
            "name": "entitytype",
            "in": "query",
            "description": "Specifies the type of entity that `EntityId` field refers to.",
            "schema": {
              "enum": [
                "Association",
                "Rental",
                "RentalOwner"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "entityid",
            "in": "query",
            "description": "Filters transactions used in calculating the general ledger account balances to only those containing journal lines for with the specified entity id value. The entity id specified must be of the type specified in `EntityType`.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "glaccountids",
            "in": "query",
            "description": "Filters results to the specified set of general ledger account identifiers.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "accountingbasis",
            "in": "query",
            "description": "The methodology in which revenues and expenses are recognized when calculating the balances. Specifying `Cash` calculates balances based on when money changes hands. Specifying `Accrual` calculates balances based on the period in which the transaction originally happened.",
            "required": true,
            "schema": {
              "enum": [
                "Accrual",
                "Cash"
              ],
              "type": "string"
            }
          },
          {
            "name": "asofdate",
            "in": "query",
            "description": "Indicates the end date through which the balances will be calculated. This will include all transactions in your account until this specified date.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "aggregatebalancesbyunitid",
            "in": "query",
            "description": "Indicates whether to aggregate the AccountingEntityBalances by unit identifier in the response. If the value is set to true the AccountingEntityBalances will be aggregated by AccountingEntity.Unit.Id otherwise the response will have the balances aggregated by AccountingEntity.Id.",
            "schema": {
              "type": "boolean"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GLAccountBalanceMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/{leaseId}/epaysettings": {
      "get": {
        "tags": [
          "Leases"
        ],
        "summary": "Retrieve ePay settings",
        "description": "Retrieves ePay settings for a lease.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Leases</span> - `View`",
        "operationId": "ExternalApiLeaseEpaySettings_GetLeaseEpaySettingsById",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EPaySettingsMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Leases"
        ],
        "summary": "Update ePay settings",
        "description": "Updates ePay settings for a lease\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Leases</span> - `View` `Edit`",
        "operationId": "ExternalApiLeaseEpaySettings_UpdateLeaseEpaySettings",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EPaySettingsPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "ePaySettingsPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EPaySettingsMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/{leaseId}/partialpaymentsettings": {
      "get": {
        "tags": [
          "Leases"
        ],
        "summary": "Retrieve all partial payment settings for a lease",
        "description": "Retrieves partial payment settings for a lease.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Leases</span> - `View`",
        "operationId": "ExternalApiLeasePartialPaymentSettings_GetLeasePartialPaymentSettings",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartialPaymentSettingsMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Leases"
        ],
        "summary": "Update partial payment settings for a lease",
        "description": "Updates partial payment settings for a lease.\r\n            \r\n\r\n<h4>Required Permission(s):</h4><span class=\"permissionBlock\">Rentals > Leases</span> - `View` `Edit`\r\n            <span class=\"permissionBlock\">Administration > Application Settings</span> - `View` `Edit`",
        "operationId": "ExternalApiLeaseUpdatePartialPaymentSettings_PatchLeasePartialPaymentSettings",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "<span>Represents the structure of the data that can be provided to a <a target=\"_blank\" href=\"https://datatracker.ietf.org/doc/html/rfc6902\">JSON patch document</a> as path values via <a target=\"_blank\" href=\"https://datatracker.ietf.org/doc/html/rfc6901/\">JSON pointer</a> syntax.</span>",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PartialPaymentSettingsPatchMessage"
                  }
                ]
              }
            },
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PartialPaymentSettingsPatchMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "patchDocument"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartialPaymentSettingsMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/{leaseId}/recurringcharges": {
      "post": {
        "tags": [
          "Lease Transactions"
        ],
        "summary": "Create a recurring charge",
        "description": "Creates a recurring charge transaction that will post automatically on the specified lease ledger.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View` `Edit`",
        "operationId": "ExternalApiLeaseChargeRecurringTransactions_CreateLeaseChargeRecurringTransaction",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ChargeRecurringTransactionPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseChargeRecurringTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/{leaseId}/recurringcharges/{transactionId}": {
      "get": {
        "tags": [
          "Lease Transactions"
        ],
        "summary": "Retrieve a recurring charge",
        "description": "Retrieves a recurring charge.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View`",
        "operationId": "ExternalApiLeaseChargeRecurringTransactions_GetLeaseChargeRecurringTransactionById",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseChargeRecurringTransactionMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/{leaseId}/recurringcredits": {
      "post": {
        "tags": [
          "Lease Transactions"
        ],
        "summary": "Create a recurring credit",
        "description": "Creates a recurring credit transaction on the specified lease ledger. \r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View` `Edit`",
        "operationId": "ExternalApiLeaseRecurringCredits_CreateLeaseCreditRecurringTransaction",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreditRecurringTransactionPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseRecurringCreditMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/{leaseId}/recurringcredits/{transactionId}": {
      "get": {
        "tags": [
          "Lease Transactions"
        ],
        "summary": "Retrieve a recurring credit",
        "description": "Retrieves a recurring credit.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View`",
        "operationId": "ExternalApiLeaseRecurringCredits_GetLeaseRecurringCreditById",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "transactionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseRecurringCreditMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/{leaseId}/recurringpayments": {
      "post": {
        "tags": [
          "Lease Transactions"
        ],
        "summary": "Create a recurring payment",
        "description": "Creates a recurring payment that will post automatically on the specified lease ledger.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease Transactions</span> - `View` `Edit`",
        "operationId": "ExternalApiLeaseRecurringPayments_CreateLeaseRecurringPayment",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PaymentRecurringTransactionPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "paymentRecurringTransactionPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseRecurringPaymentMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/{leaseId}/recurringpayments/{paymentId}": {
      "get": {
        "tags": [
          "Lease Transactions"
        ],
        "summary": "Retrieve a recurring payment",
        "description": "Retrieves a recurring payment.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease Transactions</span> - `View`",
        "operationId": "ExternalApiLeaseRecurringPayments_GetRecurringLeasePaymentsById",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseRecurringPaymentMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/{leaseId}/rent": {
      "get": {
        "tags": [
          "Leases"
        ],
        "summary": "Retrieve all rent schedules",
        "description": "The rent schedule provides details (dollar amount, day of the month, etc) of the recurring charges that are applied to the lease ledger each rent cycle. A lease may have more than one rent schedule associated with it if the rent terms change within the duration of the lease.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View`",
        "operationId": "ExternalApiLeaseRent_GetRent",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaseRentMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Leases"
        ],
        "summary": "Create a rent schedule",
        "description": "Creates a rent schedule.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease Transactions</span> - `View` `Edit`",
        "operationId": "ExternalApiLeaseRent_CreateRentSchedule",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RentSchedulePostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "rentSchedulePostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseRentMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/{leaseId}/rent/{rentId}": {
      "get": {
        "tags": [
          "Leases"
        ],
        "summary": "Retrieve a rent schedule",
        "description": "Retrieves a specific rent schedule for a lease. The rent schedule provides details (dollar amount, day of the month, etc) of the recurring charges that are applied to the lease ledger each rent cycle.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View`",
        "operationId": "ExternalApiLeaseRent_GetRentById",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "rentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseRentMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Leases"
        ],
        "summary": "Update a rent schedule",
        "description": "Updates a rent schedule.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease Transactions</span> - `View` `Edit`",
        "operationId": "ExternalApiLeaseRent_UpdateRentSchedule",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "rentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RentSchedulePutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "rentSchedulePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LeaseRentMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/{leaseId}/rentersinsurance": {
      "get": {
        "tags": [
          "Leases"
        ],
        "summary": "Retrieve all insurance policies",
        "description": "Retrieves all renters insurance policies for a lease.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Leases</span> - `View`",
        "operationId": "ExternalApiRentersInsurance_GetRentersInsurancePolicies",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RentersInsurancePolicyMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/{leaseId}/rentersinsurance/{policyId}": {
      "get": {
        "tags": [
          "Leases"
        ],
        "summary": "Retrieve an insurance policy",
        "description": "Retrieves a renters insurance policy.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Leases</span> - `View`",
        "operationId": "ExternalApiRentersInsurance_GetRentersInsurancePolicyById",
        "parameters": [
          {
            "name": "leaseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentersInsurancePolicyMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/recurringtransactions": {
      "get": {
        "tags": [
          "Lease Transactions"
        ],
        "summary": "Retrieve all recurring transactions for all leases",
        "description": "Retrieves all recurring transactions for all leases.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View`",
        "operationId": "ExternalApiLeaseRecurringTransactions_GetRecurringTransactionsForAllLeases",
        "parameters": [
          {
            "name": "leaseids",
            "in": "query",
            "description": "Filters results to only include records associated with the provided lease Ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "createddatetimefrom",
            "in": "query",
            "description": "Filters results to recurring transactions created after the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS. The maximum date range is 365 days.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "createddatetimeto",
            "in": "query",
            "description": "Filters results to recurring transactions created before the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS. The maximum date range is 365 days.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to recurring transactions last updated after the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS. The maximum date range is 365 days.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to recurring transactions last updated before the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS. The maximum date range is 365 days.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BulkLeaseRecurringTransactionMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/renewalhistory": {
      "get": {
        "tags": [
          "Leases"
        ],
        "summary": "Retrieve all lease renewal history",
        "description": "Retrieves all lease renewal history\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Leases</span> - `View`",
        "operationId": "ExternalApiLeaseRenewalsRead_GetLeaseRenewalHistory",
        "parameters": [
          {
            "name": "leaseids",
            "in": "query",
            "description": "Filters results to only include lease renewals whose renewals belongs to the specified set of lease ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "createddatetimefrom",
            "in": "query",
            "description": "Filters results to only lease renewals that were created after this date.  The value must be in UTC and formatted as `YYYY-MM-DDTHH:MM:SSZ`. The maximum date range is 365 days.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "createddatetimeto",
            "in": "query",
            "description": "Filters results to only lease renewals that were created before this date.The value must be in UTC and formatted as `YYYY-MM-DDTHH:MM:SSZ`. The maximum date range is 365 days.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to any lease renewals that were updated on or after the specified date. The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ. The maximum date range is 365 days.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to any lease renewals were updated on or before the specified date.The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ. The maximum date range is 365 days.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LeaseRenewalHistoryMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/rent": {
      "get": {
        "tags": [
          "Leases"
        ],
        "summary": "Retrieve all rent schedules",
        "description": "The rent schedule provides details (dollar amount, day of the month, etc) of the recurring charges that are applied to the lease ledger each rent cycle. A lease may have more than one rent schedule associated with it if the rent terms change within the duration of the lease.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease transactions</span> - `View`",
        "operationId": "ExternalApiLeaseRent_GetRentPaged",
        "parameters": [
          {
            "name": "leaseids",
            "in": "query",
            "description": "Filters results to only include rents whose lease belongs to the specified set of lease ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "createddatetimefrom",
            "in": "query",
            "description": "Filters results to only rents that were created after this date. The value must be in UTC and formatted as `YYYY-MM-DDTHH:MM:SSZ`. The maximum date range is 365 days.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "createddatetimeto",
            "in": "query",
            "description": "Filters results to only rents that were created before this date.The value must be in UTC and formatted as `YYYY-MM-DDTHH:MM:SSZ`. The maximum date range is 365 days.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to any rents that were updated on or after the specified date. The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ. The maximum date range is 365 days.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to any rents were updated on or before the specified date.The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ. The maximum date range is 365 days.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RentMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/tenants": {
      "get": {
        "tags": [
          "Rental Tenants"
        ],
        "summary": "Retrieve all tenants",
        "description": "Retrieves a list of tenants.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Tenants</span> - `View`",
        "operationId": "ExternalApiRentalTenants_GetAllTenants",
        "parameters": [
          {
            "name": "buildingstatuses",
            "in": "query",
            "description": "Filters results by the status of the rental property the tenants are associated with. If no status is specified tenants in either `active` and `inactive` rental properties will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Active",
                  "InActive"
                ],
                "type": "string",
                "description": "This enumeration represents building statuses."
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "leasetermstatuses",
            "in": "query",
            "description": "Filters results to any tenant whose lease term matches the specified status.  If no status is specified tenants with any lease terms status will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Active",
                  "Past",
                  "Future"
                ],
                "type": "string",
                "description": "Indicates the status of a lease term."
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "unitnumber",
            "in": "query",
            "description": "Filters results to any tenant whose unit number *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filters results to any tenant whose name *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "phone",
            "in": "query",
            "description": "Filters results to any tenant whose phone number *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filters results to any tenant whose email *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "propertyids",
            "in": "query",
            "description": "Filters results to tenants whose rental unit belongs to the specified set of property ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "rentalownerids",
            "in": "query",
            "description": "Filters results to tenants whose rental unit belongs to a property with a rental owner in the specified set of rental owner ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to any rental tenants that were updated on or after the specified date. The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to any rental tenants that were updated on or before the specified date. The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "unitids",
            "in": "query",
            "description": "Filters results to only tenants associated with the specified set of unit ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TenantMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Rental Tenants"
        ],
        "summary": "Create a tenant",
        "description": "Creates a rental tenant.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Tenants</span> - `View` `Edit`\r\n\r\n<span class=\"permissionBlock\">Rentals > Leases</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalTenants_CreateRentalTenant",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RentalTenantPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "rentalTenantPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "There is a request conflict with the current state of the target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/tenants/{tenantId}": {
      "get": {
        "tags": [
          "Rental Tenants"
        ],
        "summary": "Retrieve a tenant",
        "description": "Retrieve a specific tenant.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Tenants</span> - `View`",
        "operationId": "ExternalApiRentalTenants_GetTenantById",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Rental Tenants"
        ],
        "summary": "Update a tenant",
        "description": "Updates a rental tenant.\r\n\r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Tenants</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalTenants_UpdateRentalTenant",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RentalTenantPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "rentalTenantPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/tenants/{tenantId}/notes": {
      "get": {
        "tags": [
          "Rental Tenants"
        ],
        "summary": "Retrieve all notes",
        "description": "Retrieves all tenant notes.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Tenants</span> - `View`",
        "operationId": "ExternalApiTenantNotes_GetAllTenantNotes",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "description": "The tenant identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "updateddatetimefrom",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "updateddatetimeto",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedbyuserid",
            "in": "query",
            "description": "Filters results to only notes that were last updated by the specified user identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Rental Tenants"
        ],
        "summary": "Create a note",
        "description": "Creates a tenant note.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Tenants</span> - `View` `Edit`",
        "operationId": "ExternalApiTenantNotes_CreateTenantNote",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotePostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "notePostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/leases/tenants/{tenantId}/notes/{noteId}": {
      "get": {
        "tags": [
          "Rental Tenants"
        ],
        "summary": "Retrieve a note",
        "description": "Retrieves a tenant note.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Tenants</span> - `View`",
        "operationId": "ExternalApiTenantNotes_GetTenantNoteById",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Rental Tenants"
        ],
        "summary": "Update a note",
        "description": "Updates a tenant note.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Tenants</span> - `View` `Edit`",
        "operationId": "ExternalApiTenantNotes_UpdateLeaseTenantNote",
        "parameters": [
          {
            "name": "tenantId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotePutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "notePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/propertygroups": {
      "get": {
        "tags": [
          "Property Groups"
        ],
        "summary": "Retrieve all property groups",
        "description": "Retrieves all property groups.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units or</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Associations > Associations and units</span> - `View`",
        "operationId": "ExternalApiPropertyGroups_GetPropertyGroups",
        "parameters": [
          {
            "name": "propertyids",
            "in": "query",
            "description": "Filters results to property groups that contain any of the specified property ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "nameordescription",
            "in": "query",
            "description": "Filters results to any property group whose name or description contains the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PropertyGroupMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Property Groups"
        ],
        "summary": "Create a property group",
        "description": "Creates a property group.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units or</span> - `View` `Edit`\r\n            <span class=\"permissionBlock\">Associations > Associations and units</span> - `View` `Edit`",
        "operationId": "ExternalApiPropertyGroups_CreatePropertyGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PropertyGroupPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyGroupMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/propertygroups/{propertyGroupId}": {
      "get": {
        "tags": [
          "Property Groups"
        ],
        "summary": "Retrieve a property group",
        "description": "Retrieves a property group.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units or</span> - `View`\r\n            <span class=\"permissionBlock\">Associations > Associations and units</span> - `View`",
        "operationId": "ExternalApiPropertyGroups_GetPropertyGroupById",
        "parameters": [
          {
            "name": "propertyGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyGroupMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Property Groups"
        ],
        "summary": "Update a property group",
        "description": "Updates a property group. A property group can only be updated by the user that created it.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units or</span> - `View` `Edit`\r\n            <span class=\"permissionBlock\">Associations > Associations and units</span> - `View` `Edit`",
        "operationId": "ExternalApiPropertyGroups_UpdatePropertyGroup",
        "parameters": [
          {
            "name": "propertyGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PropertyGroupPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "putMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertyGroupMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/{propertyId}/amenities": {
      "get": {
        "tags": [
          "Rental Properties"
        ],
        "summary": "Retrieve all amenities",
        "description": "Retrieve all the amenities for a rental property.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View`",
        "operationId": "ExternalApiRentalFeatures_GetFeaturesByRentalPropertyId",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalFeaturesMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Rental Properties"
        ],
        "summary": "Update amenities",
        "description": "Updates the amenities for a rental property.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalFeatures_UpdateRentalFeatures",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RentalFeaturesPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "putMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalFeaturesMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/{propertyId}/epaysettings": {
      "get": {
        "tags": [
          "Rental Properties"
        ],
        "summary": "Retrieve ePay settings",
        "description": "Retrieves ePay settings for a rental property.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View`",
        "operationId": "ExternalApiRentalEpaySettings_GetEPaySettingsForRentalProperty",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EPaySettingsMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Rental Properties"
        ],
        "summary": "Update ePay settings",
        "description": "Updates ePay settings for a rental property.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalEpaySettings_UpdateEPaySettingsForRental",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EPaySettingsPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "ePaySettingsPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EPaySettingsMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/{propertyId}/images": {
      "get": {
        "tags": [
          "Rental Properties"
        ],
        "summary": "Retrieve all property images",
        "description": "Retrieves all images for a rental property. Note this endpoint will only return file metadata such as file names and descriptions. To download files make requests to the [Download File](#tag/Rental-Properties/operation/ExternalApiRentalImageDownloadRequests_GetRentalImageDownloadUrlById) endpoint.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View`",
        "operationId": "ExternalApiRentalImages_GetRentalImages",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RentalImageMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/{propertyId}/images/{imageId}": {
      "get": {
        "tags": [
          "Rental Properties"
        ],
        "summary": "Retrieve a property image",
        "description": "Retrieves a rental property image.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View`",
        "operationId": "ExternalApiRentalImages_GetRentalImageById",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "imageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalImageMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Rental Properties"
        ],
        "summary": "Update a property image",
        "description": "Updates a rental property image.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalImages_UpdateRentalImage",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "imageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RentalImagePutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "putMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalImageMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Rental Properties"
        ],
        "summary": "Delete a property image",
        "description": "Deletes a rental property image.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit` `Delete`",
        "operationId": "ExternalApiRentalImages_DeleteRentalImage",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "imageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK - No Content."
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/{propertyId}/images/{imageId}/downloadrequests": {
      "post": {
        "tags": [
          "Rental Properties"
        ],
        "summary": "Download a property image",
        "description": "Use this endpoint to create a temporary URL that can be used to download a property image. This URL expires after 5 minutes.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View`",
        "operationId": "ExternalApiRentalImageDownloadRequests_GetRentalImageDownloadUrlById",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "imageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileDownloadMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/{propertyId}/images/order": {
      "put": {
        "tags": [
          "Rental Properties"
        ],
        "summary": "Update property image order",
        "description": "Updates the image display order within the Buildium web application and in any associated rental listings.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalImageOrder_ReorderRentalImages",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ImageReorderRequestPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "putMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RentalImageMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/{propertyId}/images/uploadrequests": {
      "post": {
        "tags": [
          "Rental Properties"
        ],
        "summary": "Upload a rental image",
        "description": "Uploads an image and associates it to the specified rental record.\r\n            \r\n\r\nUploading a file requires making two API requests. Each step is outlined below.\r\n            \r\n\r\n<strong>Step 1 - Save file metadata</strong>\r\n\r\n            The first step in the file upload process is to submit the file metadata to `/v1/rentals/{rentalId}/images/uploadrequests`. The response of this call will contain a URL and a collection of form data that will be used in step 2 to generate the request for the file binary upload.\r\n            \r\n\r\n<strong>NOTE:</strong> The response data will expire after 5 minutes. The file metadata will not be saved in the Buildium system if step 2 of this process is not completed successfully.\r\n            \r\n\r\n<strong>Step 2 - Upload the file binary</strong>\r\n\r\n            Uploading the file binary will require using the response from step 1 to form a POST request to the Buildium file provider. Follow these steps to create the request:\r\n            \r\n\r\n            1. Form a POST request using the value of the `BucketUrl` property as the URL. \r\n            \r\n\r\n\r\n            2. Set the `Content-Type` header to `multipart/form-data`.\r\n            \r\n\r\n\r\n            3. Copy the fields from the `FormData`  property to this request as form-data key/value pairs.\r\n            \r\n<strong>NOTE:</strong> These values must added to the request form-data in the order they were received in the response.\r\n            \r\n\r\n\r\n            4. Lastly create a form-data key named `file` and set the value to the file binary.\r\n            \r\n<strong>NOTE:</strong> This must be the last field in the form-data list.\r\n            \r\n\r\nThis image shows what the POST request should look like if you're using Postman:\r\n            <img src=\"file-upload-example.png\" />\r\n\r\n\r\n            5. Send the POST request! A successful request will return with a `204 - NO CONTENT` HTTP response code. For any failure responses, please refer to <a target=\"_blank\" href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#RESTErrorResponses\">AWS documentation</a> on REST error responses.\r\n            \r\n\r\n<strong>NOTE:</strong> The file identifier is not generated in this response. To retrieve the file identifier, call `/v1/files` and pass the `PhysicalFileName` value received from the response of this endpoint into the `physicalfilenames` query parameter.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalImageUploadRequests_CreateUploadFileRequestAsync",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ListingEntityFilePostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileUploadTicketMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/{propertyId}/images/videolinkrequests": {
      "post": {
        "tags": [
          "Rental Properties"
        ],
        "summary": "Create an image for a rental using a video link",
        "description": "Creates an image for a rental using a video link.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalImageVideoLinkRequests_CreateVideoLinkRequest",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VideoLinkRequestPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalImageMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/{propertyId}/meterreadings": {
      "get": {
        "tags": [
          "Rental Meter Readings"
        ],
        "summary": "Retrieve all meter readings",
        "description": "Retrieves all meter readings for a rental property.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View`",
        "operationId": "ExternalApiRentalMeterReadingsRead_GetMeterReadingsForRental",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "readingdatefrom",
            "in": "query",
            "description": "Filters results to any meter readings whose entry date that is greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD. The maximum date range is 365 days.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "readingdateto",
            "in": "query",
            "description": "Filters results to any meter readings whose entry date is less than or equal to the specified value. The value must be formatted as YYYY-MM-DD. The maximum date range is 365 days.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "metertypes",
            "in": "query",
            "description": "Filters results to the specified meter types.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Electric",
                  "Gas",
                  "Oil",
                  "Water",
                  "Sewer"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MeterReadingMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/{propertyId}/meterreadings/summary": {
      "delete": {
        "tags": [
          "Rental Meter Readings"
        ],
        "summary": "Delete meter reading details for a given date",
        "description": "Delete meter reading details for a property for a given date.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Lease Transactions</span> - `View` `Edit` `Delete`",
        "operationId": "ExternalApiRentalDeleteMeterReadingDetails_DeleteMeterReadingDetailsForRental",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "readingdate",
            "in": "query",
            "description": "Filters results to any meter readings whose entry date is equal to the specified value. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "metertype",
            "in": "query",
            "description": "Filters results to the specified meter type.",
            "required": true,
            "schema": {
              "enum": [
                "Electric",
                "Gas",
                "Oil",
                "Water",
                "Sewer"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK - No Content."
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Rental Meter Readings"
        ],
        "summary": "Retrieve all meter reading details",
        "description": "Retrieves all meter reading details for a property.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View`",
        "operationId": "ExternalApiRentalMeterReadingDetails_GetMeterReadingDetailsForRentalAsync",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "readingdate",
            "in": "query",
            "description": "Filters results to any meter readings whose entry date is equal to the specified value. The value must be formatted as YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "metertype",
            "in": "query",
            "description": "Filters results to the specified meter type.",
            "required": true,
            "schema": {
              "enum": [
                "Electric",
                "Gas",
                "Oil",
                "Water",
                "Sewer"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReadingDetailsMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Rental Meter Readings"
        ],
        "summary": "Create/Update meter reading details",
        "description": "This endpoint can be used to both create and update a meter reading detail for a property.\r\n            <ul><li>There can only be one meter reading detail for a given combination of MeterType and ReadingDate for a property.</li><li>If you are updating an existing meter reading detail, use the query parameters to specify the existing meter reading detail to update.</li><li>If you are creating a new meter reading detail, do not pass any query parameters.</li><li>When adding a new item to the Details array, leave out the `Id` field.</li><li>When updating an existing item in the Details array, the `Id` field of the existing item must be included.</li></ul>\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalMeterReadingDetailsUpsert_UpsertMeterReadingDetailsForRentalAsync",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "readingdate",
            "in": "query",
            "description": "Filters results to any meter readings whose entry date is equal to the specified value. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "metertype",
            "in": "query",
            "description": "Filters results to the specified meter type.",
            "schema": {
              "enum": [
                "Electric",
                "Gas",
                "Oil",
                "Water",
                "Sewer"
              ],
              "type": "string"
            },
            "required": false
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MeterReadingDetailsPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "meterReadingDetailsPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReadingDetailsMessage"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterReadingDetailsMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "There is a request conflict with the current state of the target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/{propertyId}/notes": {
      "get": {
        "tags": [
          "Rental Properties"
        ],
        "summary": "Retrieve all notes",
        "description": "Retrieves all notes.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View`",
        "operationId": "ExternalApiRentalNotes_GetRentalNotes",
        "parameters": [
          {
            "name": "updateddatetimefrom",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "updateddatetimeto",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedbyuserid",
            "in": "query",
            "description": "Filters results to only notes that were last updated by the specified user identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Rental Properties"
        ],
        "summary": "Create a note",
        "description": "Creates a note.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalNotes_CreateRentalPropertyNote",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotePostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "notesPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/{propertyId}/notes/{noteId}": {
      "get": {
        "tags": [
          "Rental Properties"
        ],
        "summary": "Retrieve a note",
        "description": "Retrieves a note.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View`",
        "operationId": "ExternalApiRentalNotes_GetRentalNoteByNoteId",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Rental Properties"
        ],
        "summary": "Update a note",
        "description": "Updates a note.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalNotes_UpdateRentalPropertyNote",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotePutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "notePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/appliances": {
      "get": {
        "tags": [
          "Rental Appliances"
        ],
        "summary": "Retrieve all appliances",
        "description": "Retrieves all rental appliances.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View`",
        "operationId": "ExternalApiRentalAppliances_GetRentalAppliances",
        "parameters": [
          {
            "name": "propertyids",
            "in": "query",
            "description": "Filters results to appliances associated to any of the specified rental property identifiers.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "unitids",
            "in": "query",
            "description": "Filters results to appliances associated to any of the specified rental unit identifiers.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RentalApplianceMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Rental Appliances"
        ],
        "summary": "Create an appliance",
        "description": "Creates a rental property appliance.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalAppliances_CreateRentalAppliance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RentalAppliancePostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalApplianceMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/appliances/{applianceId}": {
      "get": {
        "tags": [
          "Rental Appliances"
        ],
        "summary": "Retrieve an appliance",
        "description": "Retrieves a rental appliance.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View`",
        "operationId": "ExternalApiRentalAppliances_GetRentalApplianceById",
        "parameters": [
          {
            "name": "applianceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalApplianceMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Rental Appliances"
        ],
        "summary": "Delete an appliance",
        "description": "Deletes an appliance.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalAppliances_DeleteRentalAppliances",
        "parameters": [
          {
            "name": "applianceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK - No Content."
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Rental Appliances"
        ],
        "summary": "Update an appliance",
        "description": "Updates a rental appliance.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalAppliances_UpdateRentalAppliance",
        "parameters": [
          {
            "name": "applianceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RentalAppliancePutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "rentalAppliancePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalApplianceMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/appliances/{applianceId}/servicehistory": {
      "get": {
        "tags": [
          "Rental Appliances"
        ],
        "summary": "Retrieve all service history",
        "description": "Retrieves all of the service history records for an appliance.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View`",
        "operationId": "ExternalApiRentalApplianceServiceHistory_GetRentalApplianceServiceHistory",
        "parameters": [
          {
            "name": "applianceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RentalApplianceServiceHistoryMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Rental Appliances"
        ],
        "summary": "Create a service history",
        "description": "Creates a service history record for an appliance.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalApplianceServiceHistory_CreateRentalApplianceServiceHistory",
        "parameters": [
          {
            "name": "applianceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RentalApplianceServiceHistoryPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalApplianceServiceHistoryMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/appliances/{applianceId}/servicehistory/{serviceHistoryId}": {
      "get": {
        "tags": [
          "Rental Appliances"
        ],
        "summary": "Retrieve a service history",
        "description": "Retrieves a specific service history record for a given appliance.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View`",
        "operationId": "ExternalApiRentalApplianceServiceHistory_GetRentalApplianceServiceHistoryById",
        "parameters": [
          {
            "name": "applianceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "serviceHistoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalApplianceServiceHistoryMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/owners": {
      "get": {
        "tags": [
          "Rental Owners"
        ],
        "summary": "Retrieve all owners",
        "description": "Retrieves a list of rental owners.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Property Rental Owners</span> - `View`",
        "operationId": "ExternalApiRentalOwners_GetRentalOwners",
        "parameters": [
          {
            "name": "propertyids",
            "in": "query",
            "description": "Filters results to any lease whose unit belongs to the specified set of property ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filters results by the status of the user. If no status is specified both `active` and `inactive` users will be returned.",
            "schema": {
              "enum": [
                "Inactive",
                "Active"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "agreementdaysremaining",
            "in": "query",
            "description": "Filters results by the days remaining on their lease agreement.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "ownername",
            "in": "query",
            "description": "Filters results to any owner whose name *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "phone",
            "in": "query",
            "description": "Filters results to any owner who has a phone number that *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to any rental owners that were updated on or after the specified date. The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to any rental owners that were updated on or before the specified date. The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RentalOwnerMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Rental Owners"
        ],
        "summary": "Create an owner",
        "description": "Creates a rental owner.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Property Rental Owners</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalOwners_CreateRentalOwner",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RentalOwnerPostMessage"
                  }
                ],
                "description": "This is an object that represents a rental property owner."
              }
            }
          },
          "required": true,
          "x-bodyName": "rentalOwnerPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalOwnerMessage"
                }
              }
            }
          },
          "400": {
            "description": "The request data had some invalid information in it.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/owners/{rentalOwnerId}": {
      "get": {
        "tags": [
          "Rental Owners"
        ],
        "summary": "Retrieve an owner",
        "description": "Retrieves a specific rental owner.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Property Rental Owners</span> - `View`",
        "operationId": "ExternalApiRentalOwners_GetRentalOwnerById",
        "parameters": [
          {
            "name": "rentalOwnerId",
            "in": "path",
            "description": "The rental owner identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalOwnerMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Rental Owners"
        ],
        "summary": "Update an owner",
        "description": "Updates a rental owner.\r\n\r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Property Rental Owners</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalOwners_UpdateRentalOwner",
        "parameters": [
          {
            "name": "rentalOwnerId",
            "in": "path",
            "description": "The identifier of the rental owner to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RentalOwnerPutMessage"
                  }
                ],
                "description": "This is an object that represents a rental property owner."
              }
            }
          },
          "required": true,
          "x-bodyName": "rentalOwnerPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalOwnerMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/owners/{rentalOwnerId}/notes": {
      "get": {
        "tags": [
          "Rental Owners"
        ],
        "summary": "Retrieves all notes",
        "description": "Retrieves all rental owner notes.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Property Rental Owners</span> - `View`",
        "operationId": "ExternalApiRentalOwnerNotes_GetRentalOwnerNotes",
        "parameters": [
          {
            "name": "updateddatetimefrom",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "updateddatetimeto",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedbyuserid",
            "in": "query",
            "description": "Filters results to only notes that were last updated by the specified user identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "rentalOwnerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Rental Owners"
        ],
        "summary": "Create a note",
        "description": "Creates a new Rental Owner note.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Property Rental Owners</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalOwnerNotes_CreateRentalOwnerNote",
        "parameters": [
          {
            "name": "rentalOwnerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotePostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "notesPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/owners/{rentalOwnerId}/notes/{noteId}": {
      "get": {
        "tags": [
          "Rental Owners"
        ],
        "summary": "Retrieve a note",
        "description": "Retrieves a rental owner note.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Property Rental Owners</span> - `View`",
        "operationId": "ExternalApiRentalOwnerNotes_GetRentalOwnerNoteById",
        "parameters": [
          {
            "name": "rentalOwnerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Rental Owners"
        ],
        "summary": "Update a note",
        "description": "Updates a Rental Owner note.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Property Rental Owners</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalOwnerNotes_UpdateRentalOwnerNote",
        "parameters": [
          {
            "name": "rentalOwnerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotePutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "notePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/units": {
      "get": {
        "tags": [
          "Rental Units"
        ],
        "summary": "Retrieve all units",
        "description": "Retrieves a list of rental property units.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View`",
        "operationId": "ExternalApiRentalUnits_GetAllRentalUnits",
        "parameters": [
          {
            "name": "propertyids",
            "in": "query",
            "description": "Filters results to rental units that belong to the specified set of property ids.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to any rental units that were updated on or after the specified date. The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to any rental units that were updated on or before the specified date. The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RentalUnitMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Rental Units"
        ],
        "summary": "Create a unit",
        "description": "Creates a rental unit.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalUnits_CreateRentalUnit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RentalUnitsPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "rentalUnitsPostmessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalUnitMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/units/{unitId}": {
      "get": {
        "tags": [
          "Rental Units"
        ],
        "summary": "Retrieve a unit",
        "description": "Retrieves a specific rental property unit.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View`",
        "operationId": "ExternalApiRentalUnits_GetRentalUnitById",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "description": "The rental unit identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalUnitMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Rental Units"
        ],
        "summary": "Update a unit",
        "description": "Updates a rental unit.\r\n\r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalUnits_UpdateRentalUnit",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "description": "The identifier of the unit to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RentalUnitPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "rentalUnitPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalUnitMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/units/{unitId}/amenities": {
      "get": {
        "tags": [
          "Rental Units"
        ],
        "summary": "Retrieve all amenities",
        "description": "Retrieves all amenities for a rental unit.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View`",
        "operationId": "ExternalApiRentalUnitAmenities_GetFeaturesForRentalUnitById",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalUnitFeaturesMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Rental Units"
        ],
        "summary": "Update amenities",
        "description": "Updates the amenities for a rental unit.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalUnitAmenities_UpdateRentalUnitFeatures",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RentalUnitFeaturesPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "rentalUnitFeaturesPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalUnitFeaturesMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/units/{unitId}/images": {
      "get": {
        "tags": [
          "Rental Units"
        ],
        "summary": "Retrieve all unit images",
        "description": "Retrieves all images for a unit. Note this endpoint will only return file metadata such as file names and descriptions. To download files make requests to the [Download File](#tag/Rental-Units/operation/ExternalApiRentalUnitImageDownloadRequests_GetRentalUnitImageDownloadUrlById) endpoint.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View`",
        "operationId": "ExternalApiRentalUnitImages_GetRentalUnitImages",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RentalUnitImageMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/units/{unitId}/images/{imageId}": {
      "get": {
        "tags": [
          "Rental Units"
        ],
        "summary": "Retrieve a unit image",
        "description": "Retrieves a unit image.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View`",
        "operationId": "ExternalApiRentalUnitImages_GetRentalUnitImageById",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "imageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalUnitImageMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Rental Units"
        ],
        "summary": "Update a unit image",
        "description": "Updates a unit image.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalUnitImages_UpdateRentalUnitImage",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "imageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RentalUnitImagePutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "putMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalImageMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Rental Units"
        ],
        "summary": "Delete a unit image",
        "description": "Deletes a unit image.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit` `Delete`",
        "operationId": "ExternalApiRentalUnitImages_DeleteRentalUnitImage",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "imageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK - No Content."
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/units/{unitId}/images/{imageId}/downloadrequests": {
      "post": {
        "tags": [
          "Rental Units"
        ],
        "summary": "Download a unit image",
        "description": "Use this endpoint to create a temporary URL that can be used to download a unit image. This URL expires after 5 minutes.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View`",
        "operationId": "ExternalApiRentalUnitImageDownloadRequests_GetRentalUnitImageDownloadUrlById",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "imageId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileDownloadMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/units/{unitId}/images/order": {
      "put": {
        "tags": [
          "Rental Units"
        ],
        "summary": "Update unit image order",
        "description": "Updates the image display order within the Buildium web application and in any associated rental listings.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalUnitImageOrder_ReorderRentalUnitImages",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ImageReorderRequestPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "putMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RentalUnitImageMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/units/{unitId}/images/uploadrequests": {
      "post": {
        "tags": [
          "Rental Units"
        ],
        "summary": "Upload a unit image",
        "description": "Uploads an image and associates it to the specified unit record.\r\n            \r\n\r\nUploading a file requires making two API requests. Each step is outlined below.\r\n            \r\n\r\n<strong>Step 1 - Save file metadata</strong>\r\n\r\n            The first step in the file upload process is to submit the file metadata to `/v1/rentals/units/{unitId:int}/images/uploadrequests`. The response of this call will contain a URL and a collection of form data that will be used in step 2 to generate the request for the file binary upload.\r\n            \r\n\r\n<strong>NOTE:</strong> The response data will expire after 5 minutes. The file metadata will not be saved in the Buildium system if step 2 of this process is not completed successfully.\r\n            \r\n\r\n<strong>Step 2 - Upload the file binary</strong>\r\n\r\n            Uploading the file binary will require using the response from step 1 to form a POST request to the Buildium file provider. Follow these steps to create the request:\r\n            \r\n\r\n            1. Form a POST request using the value of the `BucketUrl` property as the URL. \r\n            \r\n\r\n\r\n            2. Set the `Content-Type` header to `multipart/form-data`.\r\n            \r\n\r\n\r\n            3. Copy the fields from the `FormData`  property to this request as form-data key/value pairs.\r\n            \r\n<strong>NOTE:</strong> These values must added to the request form-data in the order they were received in the response.\r\n            \r\n\r\n\r\n            4. Lastly create a form-data key named `file` and set the value to the file binary.\r\n            \r\n<strong>NOTE:</strong> This must be the last field in the form-data list.\r\n            \r\n\r\nThis image shows what the POST request should look like if you're using Postman:\r\n            <img src=\"file-upload-example.png\" />\r\n\r\n\r\n            5. Send the POST request! A successful request will return with a `204 - NO CONTENT` HTTP response code. For any failure responses, please refer to <a target=\"_blank\" href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#RESTErrorResponses\">AWS documentation</a> on REST error responses.\r\n            \r\n\r\n<strong>NOTE:</strong> The file identifier is not generated in this response. To retrieve the file identifier, call `/v1/files` and pass the `PhysicalFileName` value received from the response of this endpoint into the `physicalfilenames` query parameter.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalUnitImageUploadRequests_CreateUploadFileRequestAsync",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ListingEntityFilePostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileUploadTicketMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/units/{unitId}/images/videolinkrequests": {
      "post": {
        "tags": [
          "Rental Units"
        ],
        "summary": "Create an image for a unit using a video link",
        "description": "Creates an image for a rental unit using a video link.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalUnitImageVideoLinkRequests_CreateUnitVideoLinkRequest",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VideoLinkRequestPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalUnitImageMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/units/{unitId}/notes": {
      "get": {
        "tags": [
          "Rental Units"
        ],
        "summary": "Retrieve all notes",
        "description": "Retrieves all rental unit notes.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View`",
        "operationId": "ExternalApiRentalUnitNotes_GetRentalUnitNotes",
        "parameters": [
          {
            "name": "updateddatetimefrom",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "updateddatetimeto",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedbyuserid",
            "in": "query",
            "description": "Filters results to only notes that were last updated by the specified user identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Rental Units"
        ],
        "summary": "Create a note",
        "description": "Creates a rental unit note.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalUnitNotes_CreateRentalUnitNote",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotePostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "notePostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/rentals/units/{unitId}/notes/{noteId}": {
      "get": {
        "tags": [
          "Rental Units"
        ],
        "summary": "Retrieve a note",
        "description": "Retrieves a rental unit note.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View`",
        "operationId": "ExternalApiRentalUnitNotes_GetRentalUnitNoteByNoteId",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Rental Units"
        ],
        "summary": "Update a note",
        "description": "Updates a rental unit note.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Rental properties and units</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalUnitNotes_UpdateNoteForRentalUnit",
        "parameters": [
          {
            "name": "unitId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotePutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "notePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/residentCenterUsers": {
      "get": {
        "tags": [
          "Resident Center"
        ],
        "summary": "Retrieve all resident center users",
        "description": "Retrieves all resident center users for both rentals and associations.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Communications > Resident Center Users</span> - `View`\r\n            \r\n<span class=\"permissionBlock\">Rentals > Tenants</span> - `View` is required to retrieve resident center users that are tenants.\r\n            \r\n<span class=\"permissionBlock\">Associations > Association owners and tenants</span> - `View` is required to retrieve resident center users that are association owners.",
        "operationId": "ExternalApiResidentCenterUsers_GetResidentCenterUsers",
        "parameters": [
          {
            "name": "unitagreementids",
            "in": "query",
            "description": "Filters results to any resident center user who is associated with the specified lease and/or association ownership account identifiers.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "userids",
            "in": "query",
            "description": "Filters results to any resident center user with the specified tenant and/or association owner identifiers.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "usertypes",
            "in": "query",
            "description": "Filters results to any resident center user with the specified types.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Tenant",
                  "AssociationOwner"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "residentcenteruserstatuses",
            "in": "query",
            "description": "Filters results to any resident center user with the specified resident center user statuses.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "AccountExistsButNoEmailSent",
                  "PasswordSent",
                  "EmailFailed",
                  "SignedIn",
                  "Blocked"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "isautopayenabled",
            "in": "query",
            "description": "If true, filters results to any resident center users who have automatic payments scheduled for the future. If false, filters results to any resident center users\r\nwho do not have automatic payments scheduled for the future. If not provided, will not filter results based on automatic payments.",
            "schema": {
              "type": "boolean"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResidentCenterUserMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/retailcashusers": {
      "get": {
        "tags": [
          "Resident Center"
        ],
        "summary": "Retrieve all retail cash users",
        "description": "Retrieves all retail cash users.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Tenants</span> - `View`\r\n            OR\r\n            <span class=\"permissionBlock\"> Associations > Association owners and tenants</span> - `View`",
        "operationId": "ExternalApiRetailCashRead_GetRetailCashUsers",
        "parameters": [
          {
            "name": "entityid",
            "in": "query",
            "description": "Filters results to any users associated with the specified entity id value. The value must be of the type specified in the `EntityType` field.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "entitytype",
            "in": "query",
            "description": "Specifies the type of entity that the `EntityId` field refers to. This field is required if the `EntityId` field is provided.",
            "schema": {
              "enum": [
                "Rental",
                "RentalOwner",
                "Association"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Filters results to any users whose lease is in one of the provided statuses.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Active",
                  "Past",
                  "Future"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filters results to any users whose name *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "unitaddress",
            "in": "query",
            "description": "Filters results to any users whose unit address *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "isaccountcreated",
            "in": "query",
            "description": "Filters results to any users whose retail cash account is created.",
            "schema": {
              "type": "boolean"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RetailCashUserMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/retailcashusers/{userId}/{unitAgreementId}": {
      "get": {
        "tags": [
          "Resident Center"
        ],
        "summary": "Retrieve a retail cash user",
        "description": "Retrieves a retail cash user.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Tenants</span> - `View`\r\n            OR\r\n            <span class=\"permissionBlock\"> Associations > Association owners and tenants</span> - `View`",
        "operationId": "ExternalApiRetailCashRead_GetRetailCashUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "unitAgreementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetailCashUserMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Resident Center"
        ],
        "summary": "Update a retail cash user",
        "description": "Updates a retail cash user.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Rentals > Tenants</span> - `View` `Edit`\r\n            OR\r\n            <span class=\"permissionBlock\"> Associations > Association owners and tenants</span> - `View` `Edit`",
        "operationId": "ExternalApiRetailCashWrite_UpdateRetailCashUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "unitAgreementId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RetailCashUserPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "putMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetailCashUserMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Retrieve all tasks",
        "description": "Retrieves a list of all task/request types (Contact, Owner, Resident and To Do). Note, the response payload only contains fields common across all of the request types. To retrieve the full details of the task query the retrieve endpoint specific to the task type.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View`",
        "operationId": "ExternalApiTasks_GetAllTasks",
        "parameters": [
          {
            "name": "entitytype",
            "in": "query",
            "description": "Specifies the type of entity that the `EntityId` field refers to. This field is required if the `EntityId` field is populated.",
            "schema": {
              "enum": [
                "Rental",
                "RentalOwner",
                "Association"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "entityid",
            "in": "query",
            "description": "Filters results to any task associated with the specified entity id value. The value must be of the type specified in the `EntityType` field.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Filters results by the status of the task. If no status is specified, tasks with any status will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "New",
                  "InProgress",
                  "Completed",
                  "Deferred",
                  "Closed"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filters results to any task associated with the task type specified.",
            "schema": {
              "enum": [
                "ContactRequest",
                "ResidentRequest",
                "Todo",
                "RentalOwnerRequest"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "unitid",
            "in": "query",
            "description": "Filters results to any task associated with the unit identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "unitagreementid",
            "in": "query",
            "description": "Filters results to any task associated with the unit agreement identifier specified.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to any tasks were updated on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to any tasks were updated on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "duedatefrom",
            "in": "query",
            "description": "Filters results to any tasks with a due date on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "duedateto",
            "in": "query",
            "description": "Filters results to any tasks with a due date on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "taskcategoryid",
            "in": "query",
            "description": "Filters results to any tasks with the specified category identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "priorities",
            "in": "query",
            "description": "Filters results to any tasks whose priority matches the specified values. If no priority is specified, tasks with any priority will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Low",
                  "Normal",
                  "High"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "assignedtoid",
            "in": "query",
            "description": "Filters results to any tasks that have been assigned to the specified staff user identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "tasktitle",
            "in": "query",
            "description": "Filters results to any task whose title *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AllTasksMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/{taskId}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Retrieve a task",
        "description": "Retrieves a specific task. This endpoint can be used for any task type - contact requests, rental owner requests, resident requests or to do's. Note, the response payload only contains fields common across all of the request types. To retrieve the full details of the task query the retrieve endpoint specific to the task type.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View`",
        "operationId": "ExternalApiTasks_GetTaskById",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "The task identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllTasksMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/{taskId}/history": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Retrieve all task history",
        "description": "Retrieves all task history records for a specific task.\r\n            \r\n\r\nThis endpoint can be used for any task type - contact requests, rental owner requests, resident requests or to do's.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View`",
        "operationId": "ExternalApiTaskHistory_GetTaskHistories",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskHistoryMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/{taskId}/history/{taskHistoryId}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Retrieve a task history",
        "description": "Retrieves a specific task history record for a task.\r\n            \r\n\r\nThis endpoint can be used for any task type - contact requests, rental owner requests, resident requests or to do's.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View`",
        "operationId": "ExternalApiTaskHistory_GetTaskHistoryById",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskHistoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskHistoryMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "Update a task history",
        "description": "Updates a specific task history record for a task.\r\n            \r\n\r\nThis endpoint can be used for any task type - contact requests, rental owner requests, resident requests or to do's.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View` `Edit`",
        "operationId": "ExternalApiTaskHistory_UpdateTaskHistory",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskHistoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskHistoryPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "taskHistoryPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskHistoryMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/{taskId}/history/{taskHistoryId}/files": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Retrieve all task history files",
        "description": "Retrieves the metadata for all files associated with a task history record.\r\n            \r\n\r\nThis endpoint can be used for any task type - contact requests, rental owner requests, resident requests or to do's.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View`",
        "operationId": "ExternalApiTaskHistoryFiles_GetAllTaskHistoryFiles",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskHistoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskHistoryFileMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/{taskId}/history/{taskHistoryId}/files/{fileId}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Retrieve a task history file",
        "description": "Retrieves the metadata for a specific file associated with a task history record.\r\n            \r\n\r\nThis endpoint can be used for any task type - contact requests, rental owner requests, resident requests or to do's.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View`",
        "operationId": "ExternalApiTaskHistoryFiles_GetTaskHistoryFileById",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskHistoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskHistoryFileMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "summary": "Delete task history file",
        "description": "Deletes a specific file from a task history record. The file will be permanently deleted from the Buildium platform an can not be recovered.\r\n            \r\n\r\nThis endpoint can be used for any task type - contact requests, rental owner requests, resident requests or to do's.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View` `Edit` `Delete`",
        "operationId": "ExternalApiTaskHistoryFiles_DeleteTaskHistoryFile",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskHistoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OK - No Content."
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/{taskId}/history/{taskHistoryId}/files/{fileId}/downloadrequest": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Download a task history file",
        "description": "Downloads a specific file associated to the task history record.\r\n            \r\n\r\nThis endpoint can be used for any task type - contact requests, rental owner requests, resident requests or to do's.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View`",
        "operationId": "ExternalApiTaskHistoryFileDownloads_GetFileDownloadRequest",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskHistoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileDownloadMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "The file download service is currently unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/{taskId}/history/{taskHistoryId}/files/uploadrequests": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Upload a task history file",
        "description": "Uploads a file and associates it to the specified task history record.\r\n\r\n\r\nThis endpoint can be used for any task type - contact requests, rental owner requests, resident requests or to do's.\r\n\r\n\r\nUploading a file requires making two API requests. Each step is outlined below.\r\n\r\n\r\n<strong>Step 1 - Save file metadata</strong>\r\n\r\nThe first step in the file upload process is to submit the file metadata to `/v1/tasks/{taskId}/history/{taskHistoryId}/files/uploadrequests`. The response of this call will contain a URL and a collection of form data that will be used in step 2 to generate the request for the file binary upload.\r\n\r\n\r\n<strong>NOTE:</strong> The response data will expire after 5 minutes. The file metadata will not be saved in the Buildium system if step 2 of this process is not completed successfully.\r\n\r\n\r\n<strong>Step 2 - Upload the file binary</strong>\r\n\r\nUploading the file binary will require using the response from step 1 to form a POST request to the Buildium file provider. Follow these steps to create the request:\r\n\r\n\r\n1. Form a POST request using the value of the `BucketUrl` property as the URL. \r\n\r\n\r\n\r\n2. Set the `Content-Type` header to `multipart/form-data`.\r\n\r\n\r\n\r\n3. Copy the fields from the `FormData`  property to this request as form-data key/value pairs.\r\n\r\n<strong>NOTE:</strong> These values must added to the request form-data in the order they were received in the response.\r\n\r\n\r\n\r\n4. Lastly create a form-data key named `file` and set the value to the file binary.\r\n\r\n<strong>NOTE:</strong> This must be the last field in the form-data list.\r\n\r\n\r\nThis image shows what the POST request should look like if you're using Postman:\r\n<img src=\"file-upload-example.png\" />\r\n\r\n\r\n5. Send the POST request! A successful request will return with a `204 - NO CONTENT` HTTP response code. For any failure responses, please refer to <a target=\"_blank\" href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#RESTErrorResponses\">AWS documentation</a> on REST error responses.\r\n\r\n\r\n<strong>NOTE:</strong> The file identifier is not generated in this response. To retrieve the file identifier, call `/v1/files` and pass the `PhysicalFileName` value received from the response of this endpoint into the `physicalfilenames` query parameter.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View` `Edit`",
        "operationId": "ExternalApiTaskHistoryFileUploads_CreateUploadFileRequestAsync",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "taskHistoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskHistoryFileUploadPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileUploadTicketMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/categories": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Retrieve all task categories",
        "description": "Retrieves a list of task categories.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View`",
        "operationId": "ExternalApiTaskCategories_GetAllTaskCategories",
        "parameters": [
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskCategoryMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Create a task category",
        "description": "Create a task category.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View` `Edit`",
        "operationId": "ExternalApiTaskCategories_CreateTaskCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskCategorySaveMessage"
                  }
                ],
                "description": "Task category."
              }
            }
          },
          "required": true,
          "x-bodyName": "taskCategorySaveMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCategoryMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/categories/{taskCategoryId}": {
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Retrieve a task category",
        "description": "Retrieves a specific task category.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View`",
        "operationId": "ExternalApiTaskCategories_GetTaskCategoryById",
        "parameters": [
          {
            "name": "taskCategoryId",
            "in": "path",
            "description": "The task category identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCategoryMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "Update a task category",
        "description": "Updates a task category.\r\n\r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View` `Edit`",
        "operationId": "ExternalApiTaskCategories_UpdateTaskCategory",
        "parameters": [
          {
            "name": "taskCategoryId",
            "in": "path",
            "description": "The task category identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskCategoryPutMessage"
                  }
                ],
                "description": "Task category."
              }
            }
          },
          "required": true,
          "x-bodyName": "taskCategoryPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskCategoryMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/contactrequests": {
      "get": {
        "tags": [
          "Contact Requests"
        ],
        "summary": "Retrieve all contact requests",
        "description": "Retrieves a list of contact requests.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View`",
        "operationId": "ExternalApiContactRequestTasks_GetContactRequestTasks",
        "parameters": [
          {
            "name": "entitytype",
            "in": "query",
            "description": "Specifies the type of entity that the `EntityId` field refers to. This field is required if the `EntityId` field is populated.",
            "schema": {
              "enum": [
                "Rental",
                "RentalOwner",
                "Association"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "entityid",
            "in": "query",
            "description": "Filters results to any task associated with the specified entity id value. The value must be of the type specified in the `EntityType` field.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Filters results by the status of the task. If no status is specified, tasks with any status will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "New",
                  "InProgress",
                  "Completed",
                  "Deferred",
                  "Closed"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "unitid",
            "in": "query",
            "description": "Filters results to any task associated with the unit identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to any tasks were updated on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to any tasks were updated on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "duedatefrom",
            "in": "query",
            "description": "Filters results to any tasks with a due date on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "duedateto",
            "in": "query",
            "description": "Filters results to any tasks with a due date on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "taskcategoryid",
            "in": "query",
            "description": "Filters results to any tasks with the specified category identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "priorities",
            "in": "query",
            "description": "Filters results to any tasks whose priority matches the specified values. If no priority is specified, tasks with any priority will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Low",
                  "Normal",
                  "High"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "assignedtoid",
            "in": "query",
            "description": "Filters results to any tasks that have been assigned to the specified staff user identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "tasktitle",
            "in": "query",
            "description": "Filters results to any task whose title *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactRequestTaskMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Contact Requests"
        ],
        "summary": "Create a contact request",
        "description": "Creates a contact request.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View` `Edit`",
        "operationId": "ExternalApiContactRequestTasks_CreateContactRequestTask",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactRequestTaskPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "contactRequestTaskPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactRequestTaskMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/contactrequests/{contactRequestTaskId}": {
      "get": {
        "tags": [
          "Contact Requests"
        ],
        "summary": "Retrieve a contact request",
        "description": "Retrieves a contact request.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View`",
        "operationId": "ExternalApiContactRequestTasks_GetContactRequestTaskById",
        "parameters": [
          {
            "name": "contactRequestTaskId",
            "in": "path",
            "description": "The contact request identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactRequestTaskMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Contact Requests"
        ],
        "summary": "Update a contact request",
        "description": "Updates a contact request.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View` `Edit`",
        "operationId": "ExternalApiContactRequestTasks_UpdateContactRequestTask",
        "parameters": [
          {
            "name": "contactRequestTaskId",
            "in": "path",
            "description": "The contact request identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ContactRequestTaskPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "contactRequestTaskPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactRequestTaskMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/rentalownerrequests": {
      "get": {
        "tags": [
          "Rental Owner Requests"
        ],
        "summary": "Retrieve all rental owner requests",
        "description": "Retrieves all rental owner requests.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View`",
        "operationId": "ExternalApiRentalOwnerRequestTasks_GetAllRentalOwnerRequestTasks",
        "parameters": [
          {
            "name": "entitytype",
            "in": "query",
            "description": "Specifies the type of entity that the `EntityId` field refers to. This field is required if the `EntityId` field is populated.",
            "schema": {
              "enum": [
                "Rental",
                "RentalOwner",
                "Association"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "entityid",
            "in": "query",
            "description": "Filters results to any task associated with the specified entity id value. The value must be of the type specified in the `EntityType` field.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Filters results by the status of the task. If no status is specified, tasks with any status will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "New",
                  "InProgress",
                  "Completed",
                  "Deferred",
                  "Closed"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "unitid",
            "in": "query",
            "description": "Filters results to any task associated with the unit identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to any tasks were updated on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to any tasks were updated on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "duedatefrom",
            "in": "query",
            "description": "Filters results to any tasks with a due date on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "duedateto",
            "in": "query",
            "description": "Filters results to any tasks with a due date on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "taskcategoryid",
            "in": "query",
            "description": "Filters results to any tasks with the specified category identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "priorities",
            "in": "query",
            "description": "Filters results to any tasks whose priority matches the specified values. If no priority is specified, tasks with any priority will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Low",
                  "Normal",
                  "High"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "assignedtoid",
            "in": "query",
            "description": "Filters results to any tasks that have been assigned to the specified staff user identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "tasktitle",
            "in": "query",
            "description": "Filters results to any task whose title *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RentalOwnerRequestTaskMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Rental Owner Requests"
        ],
        "summary": "Create a rental owner request",
        "description": "Creates a rental owner request.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalOwnerRequestTasks_CreateRentalOwnerRequestTask",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RentalOwnerRequestTaskPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalOwnerRequestTaskMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/rentalownerrequests/{rentalOwnerRequestTaskId}": {
      "get": {
        "tags": [
          "Rental Owner Requests"
        ],
        "summary": "Retrieve a rental owner request",
        "description": "Retrieves a specific rental owner request.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View`",
        "operationId": "ExternalApiRentalOwnerRequestTasks_GetRentalOwnerRequestTaskById",
        "parameters": [
          {
            "name": "rentalOwnerRequestTaskId",
            "in": "path",
            "description": "The rental owner request identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalOwnerRequestTaskMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Rental Owner Requests"
        ],
        "summary": "Update a rental owner request",
        "description": "Updates a rental owner request.\r\n\r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalOwnerRequestTasks_UpdateRentalOwnerRequestTask",
        "parameters": [
          {
            "name": "rentalOwnerRequestTaskId",
            "in": "path",
            "description": "The rental owner request identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RentalOwnerRequestTaskPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "rentalOwnerRequestTaskPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalOwnerRequestTaskMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/rentalownerrequests/{rentalOwnerRequestTaskId}/contributiondata": {
      "get": {
        "tags": [
          "Rental Owner Requests"
        ],
        "summary": "Retrieve rental owner contribution request",
        "description": "Retrieves the contribution details for a rental owner contribution request.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View`",
        "operationId": "ExternalApiRentalOwnerRequestTasks_GetRentalOwnerRequestTaskContributionData",
        "parameters": [
          {
            "name": "rentalOwnerRequestTaskId",
            "in": "path",
            "description": "The rental owner request identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalOwnerContributionDataMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Rental Owner Requests"
        ],
        "summary": "Update a rental owner contribution request",
        "description": "Updates the contribution details for a rental owner contribution request.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View` `Edit`",
        "operationId": "ExternalApiRentalOwnerRequestTasks_UpdateRentalOwnerRequestTaskContributionData",
        "parameters": [
          {
            "name": "rentalOwnerRequestTaskId",
            "in": "path",
            "description": "The rental owner request identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/RentalOwnerContributionDataPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "rentalOwnerContributionDataPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RentalOwnerContributionDataMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/residentrequests": {
      "get": {
        "tags": [
          "Resident Requests"
        ],
        "summary": "Retrieve all resident requests",
        "description": "Retrieves a list of resident requests.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View`",
        "operationId": "ExternalApiResidentRequestTasks_GetResidentRequestTasks",
        "parameters": [
          {
            "name": "entitytype",
            "in": "query",
            "description": "Specifies the type of entity that the `EntityId` field refers to. This field is required if the `EntityId` field is populated.",
            "schema": {
              "enum": [
                "Rental",
                "RentalOwner",
                "Association"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "entityid",
            "in": "query",
            "description": "Filters results to any task associated with the specified entity id value. The value must be of the type specified in the `EntityType` field.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Filters results by the status of the task. If no status is specified, tasks with any status will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "New",
                  "InProgress",
                  "Completed",
                  "Deferred",
                  "Closed"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "unitid",
            "in": "query",
            "description": "Filters results to any task associated with the unit identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "unitagreementid",
            "in": "query",
            "description": "Filters results to any task associated with the unit agreement identifier specified.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to any tasks were updated on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to any tasks were updated on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "duedatefrom",
            "in": "query",
            "description": "Filters results to any tasks with a due date on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "duedateto",
            "in": "query",
            "description": "Filters results to any tasks with a due date on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "taskcategoryid",
            "in": "query",
            "description": "Filters results to any tasks with the specified category identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "priorities",
            "in": "query",
            "description": "Filters results to any tasks whose priority matches the specified values. If no priority is specified, tasks with any priority will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Low",
                  "Normal",
                  "High"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "assignedtoid",
            "in": "query",
            "description": "Filters results to any tasks that have been assigned to the specified staff user identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "tasktitle",
            "in": "query",
            "description": "Filters results to any task whose title *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResidentRequestTaskMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Resident Requests"
        ],
        "summary": "Create a resident request",
        "description": "Creates a resident request.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View` `Edit`",
        "operationId": "ExternalApiResidentRequestTasks_CreateResource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResidentRequestTaskPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "residentRequestPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResidentRequestTaskMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/residentrequests/{residentRequestTaskId}": {
      "get": {
        "tags": [
          "Resident Requests"
        ],
        "summary": "Retrieve a resident request",
        "description": "Retrieves a specific resident request.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View`",
        "operationId": "ExternalApiResidentRequestTasks_GetResidentRequestTask",
        "parameters": [
          {
            "name": "residentRequestTaskId",
            "in": "path",
            "description": "The resident request identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResidentRequestTaskMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Resident Requests"
        ],
        "summary": "Update a resident request",
        "description": "Update a resident request.\r\n\r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View` `Edit`",
        "operationId": "ExternalApiResidentRequestTasks_UpdateResource",
        "parameters": [
          {
            "name": "residentRequestTaskId",
            "in": "path",
            "description": "The resident request identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ResidentRequestTaskPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "residentRequestTaskPutMessageV1"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResidentRequestTaskMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/todorequests": {
      "get": {
        "tags": [
          "To Do Requests"
        ],
        "summary": "Retrieve all to do requests",
        "description": "Retrieves a list of to do tasks.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View`",
        "operationId": "ExternalApiToDoTasks_GetToDoTasks",
        "parameters": [
          {
            "name": "entitytype",
            "in": "query",
            "description": "Specifies the type of entity that the `EntityId` field refers to. This field is required if the `EntityId` field is populated.",
            "schema": {
              "enum": [
                "Rental",
                "RentalOwner",
                "Association"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "entityid",
            "in": "query",
            "description": "Filters results to any task associated with the specified entity id value. The value must be of the type specified in the `EntityType` field.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Filters results by the status of the task. If no status is specified, tasks with any status will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "New",
                  "InProgress",
                  "Completed",
                  "Deferred",
                  "Closed"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "unitid",
            "in": "query",
            "description": "Filters results to any task associated with the unit identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to any tasks were updated on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to any tasks were updated on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "duedatefrom",
            "in": "query",
            "description": "Filters results to any tasks with a due date on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "duedateto",
            "in": "query",
            "description": "Filters results to any tasks with a due date on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "taskcategoryid",
            "in": "query",
            "description": "Filters results to any tasks with the specified category identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "priorities",
            "in": "query",
            "description": "Filters results to any tasks whose priority matches the specified values. If no priority is specified, tasks with any priority will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Low",
                  "Normal",
                  "High"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "assignedtoid",
            "in": "query",
            "description": "Filters results to any tasks that have been assigned to the specified staff user identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "tasktitle",
            "in": "query",
            "description": "Filters results to any task whose title *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ToDoTaskMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "To Do Requests"
        ],
        "summary": "Create a to do request",
        "description": "Creates a to do task.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View` `Edit`",
        "operationId": "ExternalApiToDoTasks_CreateToDoTask",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ToDoTaskPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "toDoMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToDoTaskMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/tasks/todorequests/{toDoTaskId}": {
      "get": {
        "tags": [
          "To Do Requests"
        ],
        "summary": "Retrieve a to do request",
        "description": "Retrieves a to do task.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View`",
        "operationId": "ExternalApiToDoTasks_GetToDoTaskById",
        "parameters": [
          {
            "name": "toDoTaskId",
            "in": "path",
            "description": "The to do task identifier",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToDoTaskMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "To Do Requests"
        ],
        "summary": "Update a to do request",
        "description": "Updates a to do task\r\n\r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Tasks > Tasks</span> - `View` `Edit`",
        "operationId": "ExternalApiToDoTasks_UpdateToDoTask",
        "parameters": [
          {
            "name": "toDoTaskId",
            "in": "path",
            "description": "The to do task identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ToDoTaskPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "toDoTaskPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ToDoTaskMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/vendors": {
      "get": {
        "tags": [
          "Vendors"
        ],
        "summary": "Retrieve all vendors",
        "description": "Retrieves a list of vendors.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance > Vendors</span> - `View`",
        "operationId": "ExternalApiVendors_GetAllVendors",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Filters results by the status of the vendor. If no status is specified both `active` and `inactive` vendors will be returned.",
            "schema": {
              "enum": [
                "Inactive",
                "Active"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filters results to any vendor whose email *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "website",
            "in": "query",
            "description": "Filters results to any vendor whose website *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filters results to any vendor whose name *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "insuranceexpiration",
            "in": "query",
            "description": "Filters results to any vendor whose insurance will expire in the specified date range.",
            "schema": {
              "enum": [
                "Expired",
                "ThirtyDaysOrLess",
                "SixtyDaysOrLess",
                "NinetyDaysOrLess",
                "None",
                "Any"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "phone",
            "in": "query",
            "description": "Filters results to any vendor who has a phone number that *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to any vendors that were updated on or after the specified date. The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to any vendors that were updated on or before the specified date. The value must be in UTC and formatted as YYYY-MM-DDTHH:MM:SSZ.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VendorMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Vendors"
        ],
        "summary": "Create a vendor",
        "description": "Creates a vendor.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance > Vendors</span> - `View` `Edit`",
        "operationId": "ExternalApiVendors_CreateVendor",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VendorPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "vendorPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/vendors/{vendorId}": {
      "get": {
        "tags": [
          "Vendors"
        ],
        "summary": "Retrieve a vendor",
        "description": "Retrieve a specific vendor.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance > Vendors</span> - `View`",
        "operationId": "ExternalApiVendors_GetVendorById",
        "parameters": [
          {
            "name": "vendorId",
            "in": "path",
            "description": "The vendor identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Vendors"
        ],
        "summary": "Update a vendor",
        "description": "Updates a vendor.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance > Vendors</span> - `View` `Edit`",
        "operationId": "ExternalApiVendors_UpdateVendor",
        "parameters": [
          {
            "name": "vendorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VendorPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "vendorPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/vendors/{vendorId}/credits": {
      "post": {
        "tags": [
          "Vendors"
        ],
        "summary": "Create a credit",
        "description": "Creates a credit.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bills</span> - `View` `Edit`",
        "operationId": "ExternalApiVendorCreditsWrite_CreateVendorCredit",
        "parameters": [
          {
            "name": "vendorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VendorCreditPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorCreditMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/vendors/{vendorId}/credits/{vendorCreditId}": {
      "get": {
        "tags": [
          "Vendors"
        ],
        "summary": "Retrieve a credit",
        "description": "Retrieves a credit.\r\n             \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Accounting > Bills</span> - `View`",
        "operationId": "ExternalApiVendorCredits_GetVendorCredit",
        "parameters": [
          {
            "name": "vendorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "vendorCreditId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorCreditMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/vendors/{vendorId}/notes": {
      "get": {
        "tags": [
          "Vendors"
        ],
        "summary": "Retrieve all notes",
        "description": "Retrieves all vendor notes.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance > Vendors</span> - `View`",
        "operationId": "ExternalApiVendorNotes_GetVendorNotes",
        "parameters": [
          {
            "name": "updateddatetimefrom",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are greater than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "updateddatetimeto",
            "in": "query",
            "description": "Filters results to any note whose updated date and time are less than or equal to the specified value. The value must be formatted as YYYY-MM-DD HH:MM:SS.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": false
          },
          {
            "name": "lastupdatedbyuserid",
            "in": "query",
            "description": "Filters results to only notes that were last updated by the specified user identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "vendorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NoteMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Vendors"
        ],
        "summary": "Create a note",
        "description": "Creates a vendor note.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance > Vendors</span> - `View` `Edit`",
        "operationId": "ExternalApiVendorNotes_CreateVendorNote",
        "parameters": [
          {
            "name": "vendorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotePostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "notePostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/vendors/{vendorId}/notes/{noteId}": {
      "get": {
        "tags": [
          "Vendors"
        ],
        "summary": "Retrieve a note",
        "description": "Retrieves a vendor note.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance > Vendors</span> - `View`",
        "operationId": "ExternalApiVendorNotes_GetVendorNoteByNoteId",
        "parameters": [
          {
            "name": "vendorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Vendors"
        ],
        "summary": "Update a note",
        "description": "Updates a vendor note.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance > Vendors</span> - `View` `Edit`",
        "operationId": "ExternalApiVendorNotes_UpdateVendorNote",
        "parameters": [
          {
            "name": "vendorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "noteId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotePutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "notePutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/vendors/{vendorId}/refunds": {
      "post": {
        "tags": [
          "Vendors"
        ],
        "summary": "Create a refund",
        "description": "Creates a refund.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance > Vendors</span> - `View` `Edit`\r\n            <span class=\"permissionBlock\">Accounting > Bank Accounts</span> - `View`",
        "operationId": "ExternalApiVendorRefundsWrite_CreateVendorRefund",
        "parameters": [
          {
            "name": "vendorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VendorRefundPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorRefundMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/vendors/{vendorId}/refunds/{vendorRefundId}": {
      "get": {
        "tags": [
          "Vendors"
        ],
        "summary": "Retrieve a refund",
        "description": "Retrieves a refund.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance > Vendors</span> - `View`",
        "operationId": "ExternalApiVendorRefunds_GetVendorRefund",
        "parameters": [
          {
            "name": "vendorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "vendorRefundId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorRefundMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/vendors/{vendorId}/transactions": {
      "get": {
        "tags": [
          "Vendors"
        ],
        "summary": "Retrieve all transactions",
        "description": "Retrieves all transactions for a given vendor.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance > Vendors</span> - `View`\r\n\r\n<span class=\"permissionBlock\">Accounting > General Ledger Transactions</span> - `View`",
        "operationId": "ExternalApiVendorTransactions_GetAllVendorTransactions",
        "parameters": [
          {
            "name": "transactiondatefrom",
            "in": "query",
            "description": "Filters results to any vendor transaction whose entry date that is greater than or equal to the specified value. The maximum date range is 365 days.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "transactiondateto",
            "in": "query",
            "description": "Filters results to any vendor transaction whose entry date is less than or equal to the specified value. The maximum date range is 365 days.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "transactiontypes",
            "in": "query",
            "description": "Filters results to any vendor transaction whose vendor transaction type matches the specified status. If no type is specified, vendor transactions with any type will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Bill",
                  "Check",
                  "Charge",
                  "Payment",
                  "Credit",
                  "Refund",
                  "ApplyDeposit",
                  "ElectronicFundsTransfer",
                  "Other",
                  "Deposit",
                  "GeneralJournalEntry",
                  "OwnerContribution",
                  "ReversePayment",
                  "ReverseElectronicFundsTransfer",
                  "VendorCredit",
                  "RentalApplicationFeePayment",
                  "ReverseRentalApplicationFeePayment",
                  "ReverseOwnerContribution",
                  "VendorRefund",
                  "UnreversedPayment",
                  "UnreversedElectronicFundsTransfer",
                  "UnreversedOwnerContribution",
                  "UnreversedRentalApplicationFeePayment",
                  "ReversedEftRefund"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "referencenumber",
            "in": "query",
            "description": "Filters results to vendor transaction whose reference number contains the specified value. The reference number cannot exceed 40 characters.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "memo",
            "in": "query",
            "description": "Filters results to vendor transaction whose memo contains the specified value. The memo cannot exceed 40 characters.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "vendorId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VendorTransactionMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/vendors/categories": {
      "get": {
        "tags": [
          "Vendors"
        ],
        "summary": "Retrieve all vendor categories",
        "description": "Retrieves a list of vendor categories.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance > Vendors</span> - `View`",
        "operationId": "ExternalApiVendorCategories_GetAllVendorCategories",
        "parameters": [
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VendorCategoryMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Vendors"
        ],
        "summary": "Create a vendor category",
        "description": "Creates a vendor category.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance > Vendors</span> - `View` `Edit`",
        "operationId": "ExternalApiVendorCategories_CreateVendorCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VendorCategorySaveMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "postMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorCategoryMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/vendors/categories/{vendorCategoryId}": {
      "get": {
        "tags": [
          "Vendors"
        ],
        "summary": "Retrieve a vendor category",
        "description": "Retrieves a specific vendor category.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance > Vendors</span> - `View`",
        "operationId": "ExternalApiVendorCategories_GetVendorCategoryById",
        "parameters": [
          {
            "name": "vendorCategoryId",
            "in": "path",
            "description": "The vendor category identifier.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorCategoryMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Vendors"
        ],
        "summary": "Update a vendor category",
        "description": "Updates a vendor category.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance > Vendors</span> - `View` `Edit`",
        "operationId": "ExternalApiVendorCategories_UpdateVendorCategory",
        "parameters": [
          {
            "name": "vendorCategoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/VendorCategorySaveMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "putMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorCategoryMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/workorders": {
      "get": {
        "tags": [
          "Work Orders"
        ],
        "summary": "Retrieve all work orders",
        "description": "Retrieves a list of work orders.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance > Work Orders</span> - `View`",
        "operationId": "ExternalApiWorkOrders_GetAllWorkOrders",
        "parameters": [
          {
            "name": "entitytype",
            "in": "query",
            "description": "Specifies the type of entity that the `EntityId` field refers to. This field is required if the `EntityId` field is populated.",
            "schema": {
              "enum": [
                "Rental",
                "RentalOwner",
                "Association"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "entityid",
            "in": "query",
            "description": "Filters results to any work order associated with the specified entity id value. The value must be of the type specified in the `EntityType` field.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "statuses",
            "in": "query",
            "description": "Filters results by the status of the task associated with the work order. If no status is specified, work orders with any status will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "New",
                  "InProgress",
                  "Completed",
                  "Deferred",
                  "Closed"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filters results to any work order with an associated task with the task type specified.",
            "schema": {
              "enum": [
                "ContactRequest",
                "ResidentRequest",
                "Todo",
                "RentalOwnerRequest"
              ],
              "type": "string"
            },
            "required": false
          },
          {
            "name": "unitid",
            "in": "query",
            "description": "Filters results to any work order associated with the unit identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "unitagreementid",
            "in": "query",
            "description": "Filters results to any work order associated with the unit agreement identifier specified.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "lastupdatedfrom",
            "in": "query",
            "description": "Filters results to any work orders were updated on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "lastupdatedto",
            "in": "query",
            "description": "Filters results to any work orders were updated on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "duedatefrom",
            "in": "query",
            "description": "Filters results to any work orders with a due date on or after the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "duedateto",
            "in": "query",
            "description": "Filters results to any work orders with a due date on or before the specified date. The value must be formatted as YYYY-MM-DD.",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "required": false
          },
          {
            "name": "taskcategoryid",
            "in": "query",
            "description": "Filters results to any work orders with the specified task category identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "priorities",
            "in": "query",
            "description": "Filters results to any work orders whose priority matches the specified values. If no priority is specified, tasks with any priority will be returned.",
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Low",
                  "Normal",
                  "High"
                ],
                "type": "string"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "assignedtoid",
            "in": "query",
            "description": "Filters results to any work orders that have been assigned to the specified staff user identifier.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "required": false
          },
          {
            "name": "vendorids",
            "in": "query",
            "description": "Filters results to any work orders that have been assigned to the specified vendor identifier.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "amountfrom",
            "in": "query",
            "description": "Filters results to any work orders whose total amounts are equal or greater than the specified amount.",
            "schema": {
              "type": "number",
              "format": "double"
            },
            "required": false
          },
          {
            "name": "amountto",
            "in": "query",
            "description": "Filters results to any work orders whose total amounts are equal or less than the specified amount.",
            "schema": {
              "type": "number",
              "format": "double"
            },
            "required": false
          },
          {
            "name": "isbilled",
            "in": "query",
            "description": "Filters results to work orders that have an associated bill.",
            "schema": {
              "type": "boolean"
            },
            "required": false
          },
          {
            "name": "title",
            "in": "query",
            "description": "Filters results to any work orders whose title *contains* the specified value.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "taskids",
            "in": "query",
            "description": "Filters results to work orders that have an associated to a task in the specified list.",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            },
            "required": false,
            "explode": true,
            "collectionFormat": "multi"
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "`orderby` indicates the field(s) and direction to sort the results in the response. See <a href=\"#section/API-Overview/Bulk-Request-Options\">Bulk Request Options</a> for more information.",
            "schema": {
              "type": "string"
            },
            "required": false
          },
          {
            "name": "offset",
            "in": "query",
            "description": "`offset` indicates the position of the first record to return. The `offset` is zero-based and the default is 0.",
            "schema": {
              "type": "integer"
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "description": "`limit` indicates the maximum number of results to be returned in the response. `limit` can range between 1 and 1000 and the default is 50.",
            "schema": {
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "X-Total-Count": {
                "description": "The total number of records available in the overall result set of the request.",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkOrderMessage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Work Orders"
        ],
        "summary": "Create a work order",
        "description": "Creates a work order.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance > Work Orders</span> - `View` `Edit`",
        "operationId": "ExternalApiWorkOrders_CreateWorkOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WorkOrderPostMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "workOrderPostMessage"
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "The location to retrieve the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkOrderMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/workorders/{workOrderId}": {
      "get": {
        "tags": [
          "Work Orders"
        ],
        "summary": "Retrieve a work order",
        "description": "Retrieves a specific work order.\r\n\r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance > Work Orders</span> - `View`",
        "operationId": "ExternalApiWorkOrders_GetWorkOrderById",
        "parameters": [
          {
            "name": "workOrderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkOrderMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Work Orders"
        ],
        "summary": "Update a work order",
        "description": "Updates a work order.\r\n            \r\n\r\n<strong>NOTE:</strong> Any field not included in the update request will be set to either an empty string or `null` in the database depending on the field definition. \r\nThe recommended workflow to ensure no data is inadvertently overwritten is to execute a `GET` request for the resource you're about to update and then use this response to fill any of the fields that are not being updated.\r\n            \r\n\r\n<h4>Required permission(s):</h4><span class=\"permissionBlock\">Maintenance > Work Orders</span> - `View` `Edit`",
        "operationId": "ExternalApiWorkOrders_UpdateWorkOrder",
        "parameters": [
          {
            "name": "workOrderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WorkOrderPutMessage"
                  }
                ]
              }
            }
          },
          "required": true,
          "x-bodyName": "workOrderPutMessage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkOrderMessage"
                }
              }
            }
          },
          "400": {
            "description": "Unable to process the request due to malformed request syntax or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "The API key couldn't be authorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "The supplied credentials don't have permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "415": {
            "description": "The Content-Type header on the request is missing or contains an unsupported value.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "The request data could not be used to fulfill the request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccountInfoMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Account unique identifier.",
            "format": "int32"
          },
          "CompanyName": {
            "type": "string",
            "description": "Account company name.",
            "nullable": true
          },
          "Url": {
            "type": "string",
            "description": "Url for this account.",
            "nullable": true
          },
          "Contact": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactInfoMessage"
              }
            ],
            "description": "Account contact information.",
            "nullable": true
          },
          "AccountingSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountingSettingsMessage"
              }
            ],
            "description": "Accounting settings.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents account info."
      },
      "AccountingEntityMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The accounting entity unique identifier.",
            "format": "int32"
          },
          "AccountingEntityType": {
            "enum": [
              "Association",
              "Rental",
              "Company"
            ],
            "type": "string",
            "description": "The type of accounting entity."
          },
          "Href": {
            "type": "string",
            "description": "A link to the accounting entity resource.",
            "nullable": true
          },
          "Unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UnitEntityMessage"
              }
            ],
            "description": "The unit for the accounting entity.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An object that represents an accounting entity."
      },
      "AccountingEntityPatchMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unique identifier of the accounting entity",
            "format": "int32",
            "nullable": true
          },
          "AccountingEntityType": {
            "enum": [
              "Association",
              "Rental",
              "Company"
            ],
            "type": "string",
            "description": "The type of the accounting entity",
            "nullable": true
          },
          "UnitId": {
            "type": "integer",
            "description": "The unit unique identifier for the accounting entity.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AccountingEntitySaveMessage": {
        "required": [
          "AccountingEntityType",
          "Id"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unique identifier of the accounting entity",
            "format": "int32"
          },
          "AccountingEntityType": {
            "enum": [
              "Association",
              "Rental",
              "Company"
            ],
            "type": "string",
            "description": "The type of the accounting entity"
          },
          "UnitId": {
            "type": "integer",
            "description": "The unit unique identifier for the accounting entity.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Object to represent an Accounting Entity"
      },
      "AccountingLockPeriodMessage": {
        "type": "object",
        "properties": {
          "Global": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LockPeriodSettingsGlobalMessage"
              }
            ],
            "description": "Global settings.",
            "nullable": true
          },
          "Overrides": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LockPeriodSettingsOverridesMessage"
            },
            "description": "Settings overrides for specific properties.",
            "nullable": true
          },
          "FinancialAdministratorUserIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A collection of identifiers for users that have been designated financial administrators. These users will have permission to add, edit, and delete transactions during a locked period. This won't conflict with any property-level permissions for this account. By default, account administrators have permission to add, edit, and delete transactions within a locked period.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Accounting lock period settings."
      },
      "AccountingSettingsMessage": {
        "type": "object",
        "properties": {
          "AccountingBookId": {
            "type": "integer",
            "description": "The accounting book entity unique identifier.",
            "format": "int32"
          },
          "DefaultBankAccountId": {
            "type": "integer",
            "description": "The default bank account unique identifier.",
            "format": "int32",
            "nullable": true
          },
          "DefaultAccountingBasis": {
            "enum": [
              "Accrual",
              "Cash"
            ],
            "type": "string",
            "description": "The default accounting basis."
          },
          "TrustAccountWarning": {
            "enum": [
              "Off",
              "ByProperty",
              "ByRentalOwner"
            ],
            "type": "string",
            "description": "Indicates the type of trust account warnings are enable within the account, if any."
          },
          "FiscalYearEndMonth": {
            "type": "integer",
            "description": "The month the fiscal year ends.",
            "format": "int32"
          },
          "FiscalYearEndDay": {
            "type": "integer",
            "description": "The day the fiscal year ends.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AddressMessage": {
        "type": "object",
        "properties": {
          "AddressLine1": {
            "type": "string",
            "description": "Address line 1 (e.g., street, PO Box, or company name).",
            "nullable": true
          },
          "AddressLine2": {
            "type": "string",
            "description": "Address line 2 (e.g., apartment, suite, unit, or building).",
            "nullable": true
          },
          "AddressLine3": {
            "type": "string",
            "description": "Address line 3",
            "nullable": true
          },
          "City": {
            "type": "string",
            "description": "City, district, suburb, town, or village.",
            "nullable": true
          },
          "State": {
            "type": "string",
            "description": "State, county, province, or region.",
            "nullable": true
          },
          "PostalCode": {
            "type": "string",
            "description": "ZIP or postal code.",
            "nullable": true
          },
          "Country": {
            "enum": [
              "Afghanistan",
              "Akrotiri",
              "Albania",
              "Algeria",
              "AmericanSamoa",
              "Andorra",
              "Angola",
              "Anguilla",
              "Antarctica",
              "AntiguaandBarbuda",
              "Argentina",
              "Armenia",
              "Aruba",
              "AshmoreandCartierIslands",
              "Australia",
              "Austria",
              "Azerbaijan",
              "Bahamas",
              "Bahrain",
              "Bangladesh",
              "Barbados",
              "BassasdaIndia",
              "Belarus",
              "Belgium",
              "Belize",
              "Benin",
              "Bermuda",
              "Bhutan",
              "Bolivia",
              "BosniaandHerzegovina",
              "Botswana",
              "BouvetIsland",
              "Brazil",
              "BritishIndianOceanTerritory",
              "BritishVirginIslands",
              "Brunei",
              "Bulgaria",
              "BurkinaFaso",
              "Burma",
              "Burundi",
              "Cambodia",
              "Cameroon",
              "Canada",
              "CapeVerde",
              "CaymanIslands",
              "CentralAfricanRepublic",
              "Chad",
              "Chile",
              "China",
              "ChristmasIsland",
              "ClippertonIsland",
              "CocosIslands",
              "Colombia",
              "Comoros",
              "DemocraticRepublicOfTheCongo",
              "RepublicOfTheCongo",
              "CookIslands",
              "CoralSeaIslands",
              "CostaRica",
              "CotedIvoire",
              "Croatia",
              "Cuba",
              "Cyprus",
              "CzechRepublic",
              "Denmark",
              "Dhekelia",
              "Djibouti",
              "Dominica",
              "DominicanRepublic",
              "Ecuador",
              "Egypt",
              "ElSalvador",
              "EquatorialGuinea",
              "Eritrea",
              "Estonia",
              "Ethiopia",
              "EuropaIsland",
              "FalklandIslands",
              "FaroeIslands",
              "Fiji",
              "Finland",
              "France",
              "FrenchGuiana",
              "FrenchPolynesia",
              "FrenchSouthernandAntarcticLands",
              "Gabon",
              "Gambia",
              "GazaStrip",
              "Georgia",
              "Germany",
              "Ghana",
              "Gibraltar",
              "GloriosoIslands",
              "Greece",
              "Greenland",
              "Grenada",
              "Guadeloupe",
              "Guam",
              "Guatemala",
              "Guernsey",
              "Guinea",
              "GuineaBissau",
              "Guyana",
              "Haiti",
              "HeardIslandandMcDonaldIslands",
              "VaticanCity",
              "Honduras",
              "HongKong",
              "Hungary",
              "Iceland",
              "India",
              "Indonesia",
              "Iran",
              "Iraq",
              "Ireland",
              "IsleofMan",
              "Israel",
              "Italy",
              "Jamaica",
              "JanMayen",
              "Japan",
              "Jersey",
              "Jordan",
              "JuandeNovaIsland",
              "Kazakhstan",
              "Kenya",
              "Kiribati",
              "NorthKorea",
              "SouthKorea",
              "Kuwait",
              "Kyrgyzstan",
              "Laos",
              "Latvia",
              "Lebanon",
              "Lesotho",
              "Liberia",
              "Libya",
              "Liechtenstein",
              "Lithuania",
              "Luxembourg",
              "Macau",
              "Macedonia",
              "Madagascar",
              "Malawi",
              "Malaysia",
              "Maldives",
              "Mali",
              "Malta",
              "MarshallIslands",
              "Martinique",
              "Mauritania",
              "Mauritius",
              "Mayotte",
              "Mexico",
              "Micronesia",
              "Moldova",
              "Monaco",
              "Mongolia",
              "Montserrat",
              "Morocco",
              "Mozambique",
              "Namibia",
              "Nauru",
              "NavassaIsland",
              "Nepal",
              "Netherlands",
              "NetherlandsAntilles",
              "NewCaledonia",
              "NewZealand",
              "Nicaragua",
              "Niger",
              "Nigeria",
              "Niue",
              "NorfolkIsland",
              "NorthernMarianaIslands",
              "Norway",
              "Oman",
              "Pakistan",
              "Palau",
              "Panama",
              "PapuaNewGuinea",
              "ParacelIslands",
              "Paraguay",
              "Peru",
              "Philippines",
              "PitcairnIslands",
              "Poland",
              "Portugal",
              "PuertoRico",
              "Qatar",
              "Reunion",
              "Romania",
              "Russia",
              "Rwanda",
              "SaintHelena",
              "SaintKittsandNevis",
              "SaintLucia",
              "SaintPierreandMiquelon",
              "SaintVincentandtheGrenadines",
              "Samoa",
              "SanMarino",
              "SaoTomeandPrincipe",
              "SaudiArabia",
              "Senegal",
              "SerbiaandMontenegro",
              "Seychelles",
              "SierraLeone",
              "Singapore",
              "Slovakia",
              "Slovenia",
              "SolomonIslands",
              "Somalia",
              "SouthAfrica",
              "SouthGeorgiaandtheSouthSandwichIslands",
              "Spain",
              "SpratlyIslands",
              "SriLanka",
              "Sudan",
              "Suriname",
              "Svalbard",
              "Swaziland",
              "Sweden",
              "Switzerland",
              "Syria",
              "Taiwan",
              "Tajikistan",
              "Tanzania",
              "Thailand",
              "TimorLeste",
              "Togo",
              "Tokelau",
              "Tonga",
              "TrinidadandTobago",
              "TromelinIsland",
              "Tunisia",
              "Turkey",
              "Turkmenistan",
              "TurksandCaicosIslands",
              "Tuvalu",
              "Uganda",
              "Ukraine",
              "UnitedArabEmirates",
              "UnitedKingdom",
              "UnitedStates",
              "Uruguay",
              "Uzbekistan",
              "Vanuatu",
              "Venezuela",
              "Vietnam",
              "VirginIslands",
              "WakeIsland",
              "WallisandFutuna",
              "WestBank",
              "WesternSahara",
              "Yemen",
              "Zambia",
              "Zimbabwe"
            ],
            "type": "string",
            "description": "Country."
          }
        },
        "additionalProperties": false,
        "description": "Address."
      },
      "AllTasksMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Task unique identifier.",
            "format": "int32"
          },
          "TaskType": {
            "enum": [
              "ContactRequest",
              "ResidentRequest",
              "Todo",
              "RentalOwnerRequest"
            ],
            "type": "string",
            "description": "The task type."
          },
          "Category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskCategoryResponseMessage"
              }
            ],
            "description": "Task category.",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "description": "Task title.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Task description.",
            "nullable": true
          },
          "Property": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PropertyMessage"
              }
            ],
            "description": "The property details associated with the task.",
            "nullable": true
          },
          "UnitId": {
            "type": "integer",
            "description": "The unit unique identifier associated with the task.",
            "format": "int32",
            "nullable": true
          },
          "UnitAgreement": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UnitAgreementMessage"
              }
            ],
            "description": "The unit agreement that is associated with the task.",
            "nullable": true
          },
          "RequestedByUserEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestedByUserEntityMessage"
              }
            ],
            "description": "The user entity that requested the task.",
            "nullable": true
          },
          "AssignedToUserId": {
            "type": "integer",
            "description": "The unique identifier of the staff user assigned to the task.",
            "format": "int32"
          },
          "TaskStatus": {
            "enum": [
              "New",
              "InProgress",
              "Completed",
              "Deferred",
              "Closed"
            ],
            "type": "string",
            "description": "Task status."
          },
          "Priority": {
            "enum": [
              "Low",
              "Normal",
              "High"
            ],
            "type": "string",
            "description": "Task priority."
          },
          "DueDate": {
            "type": "string",
            "description": "Task due date.",
            "format": "date",
            "nullable": true
          },
          "CreatedDateTime": {
            "type": "string",
            "description": "The date and time the task was created.",
            "format": "date-time"
          },
          "LastUpdatedDateTime": {
            "type": "string",
            "description": "The date and time the task was last updated.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This object represents a task."
      },
      "AnnouncementMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Unique identifier of the announcement.",
            "format": "int32"
          },
          "Subject": {
            "type": "string",
            "description": "Subject line of the announcement.",
            "nullable": true
          },
          "Body": {
            "type": "string",
            "description": "Content of the announcement.",
            "nullable": true
          },
          "AnnouncementDate": {
            "type": "string",
            "description": "Date the announcement was published.",
            "format": "date"
          },
          "ExpirationDate": {
            "type": "string",
            "description": "Indicates the date on which the announcement will be removed from the Resident Center.",
            "format": "date",
            "nullable": true
          },
          "Channels": {
            "type": "array",
            "items": {
              "enum": [
                "None",
                "ResidentCenter",
                "Email",
                "Sms"
              ],
              "type": "string"
            },
            "description": "List of the distribution channels the announcement was sent through.",
            "nullable": true
          },
          "Sender": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AnnouncementSenderMessage"
              }
            ],
            "description": "The Buildium user who published the announcement.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AnnouncementPostMessage": {
        "required": [
          "Body",
          "IncludeAlternateEmail",
          "NotifyAssociationTenants",
          "PropertyIds",
          "Subject"
        ],
        "type": "object",
        "properties": {
          "Subject": {
            "minLength": 1,
            "type": "string",
            "description": "The subject of the announcement. Note, this will only show up in announcements sent via email and in the Resident Center. The value cannot exceed 100 characters."
          },
          "Body": {
            "minLength": 1,
            "type": "string",
            "description": "The content of the announcement. The value cannot exceed 65535 characters. Note: if your message is over 140 characters, the announcement will not be sent via SMS. Announcement texts are available for US numbers only."
          },
          "ExpirationDate": {
            "type": "string",
            "description": "Optional date that indicates when the announcement should be removed from the Resident Center. If no date is provided the announcement will appear indefinitely The date must be formatted as YYYY-MM-DD.",
            "format": "date",
            "nullable": true
          },
          "NotifyAssociationTenants": {
            "type": "boolean",
            "description": "Indicates whether to include notifying the association tenants in addition to the association owners when publishing the announcement. Note this is only pertains to announcements sent to residents of `Association` properties."
          },
          "IncludeAlternateEmail": {
            "type": "boolean",
            "description": "Indicates whether to send the announcement to alternate emails in addition to the main email addresses when publishing the announcement."
          },
          "PropertyIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A list of association and/or rental property unique identifiers whose residents should receive the announcement."
          }
        },
        "additionalProperties": false
      },
      "AnnouncementSenderMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Unique identifier of the user who sent the announcement.",
            "format": "int32"
          },
          "DisplayName": {
            "type": "string",
            "description": "Display name of the user who sent the announcement.",
            "nullable": true
          },
          "Href": {
            "type": "string",
            "description": "A link to the user resource.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The Buildium user who published the announcement."
      },
      "ApiError": {
        "type": "object",
        "properties": {
          "Key": {
            "type": "string",
            "nullable": true
          },
          "Value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApiErrorResponse": {
        "type": "object",
        "properties": {
          "UserMessage": {
            "type": "string",
            "nullable": true
          },
          "ErrorCode": {
            "type": "string",
            "nullable": true
          },
          "Errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiError"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApplianceMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Unique identifier of the appliance.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the appliance.",
            "nullable": true
          },
          "Make": {
            "type": "string",
            "description": "Make of the appliance.",
            "nullable": true
          },
          "Model": {
            "type": "string",
            "description": "Model of the appliance.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Description of the appliance.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Appliance information."
      },
      "ApplicantApplicationMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Rental application unique identifier.",
            "format": "int32"
          },
          "ApplicationNumber": {
            "type": "string",
            "description": "An alpha numeric value that can be used to uniquely identify the application. This is typically provided to an applicant to use as a reference when making inquiries about their application.",
            "nullable": true
          },
          "ApplicationStatus": {
            "enum": [
              "Unknown",
              "Undecided",
              "Approved",
              "Rejected",
              "AddedToLease",
              "Cancelled",
              "Deferred",
              "New",
              "Draft",
              "AddedToDraftLease"
            ],
            "type": "string",
            "description": "Indicates the current application status."
          },
          "ApplicationSubmittedDateTime": {
            "type": "string",
            "description": "Date and time the application was submitted.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ApplicantDetailsMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Applicant unique identifier.",
            "format": "int32"
          },
          "ApplicantGroupId": {
            "type": "integer",
            "description": "Applicant group unique identifier.",
            "format": "int32",
            "nullable": true
          },
          "PropertyId": {
            "type": "integer",
            "description": "Rental property unique identifier that the applicant is associated with.",
            "format": "int32",
            "nullable": true
          },
          "UnitId": {
            "type": "integer",
            "description": "Rental property unit unique identifier that the applicant is associated with.",
            "format": "int32",
            "nullable": true
          },
          "TenantId": {
            "type": "integer",
            "description": "The rental tenant identifier associated with the applicant. This value will be null if the applicant never transitioned into a tenant.",
            "format": "int32",
            "nullable": true
          },
          "FirstName": {
            "type": "string",
            "description": "Applicant first name.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Applicant last name.",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Applicant email address.",
            "nullable": true
          },
          "PhoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberMessage"
            },
            "description": "Applicant phone numbers.",
            "nullable": true
          },
          "Status": {
            "enum": [
              "Unknown",
              "Undecided",
              "Approved",
              "Rejected",
              "AddedToLease",
              "Cancelled",
              "Deferred",
              "New",
              "Draft",
              "AddedToDraftLease"
            ],
            "type": "string",
            "description": "Applicant status."
          },
          "Applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicantApplicationMessage"
            },
            "description": "A collection of applications associated with the applicant.",
            "nullable": true
          },
          "UnsubmittedApplications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnsubmittedApplicationMessage"
            },
            "description": "A collection of unsubmitted applications associated with the applicant.",
            "nullable": true
          },
          "LastUpdatedDateTime": {
            "type": "string",
            "description": "Date and time the applicant was last updated.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApplicantGroupMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Applicant group unique identifier.",
            "format": "int32"
          },
          "PropertyId": {
            "type": "integer",
            "description": "Rental property unique identifier that the applicant group is associated with.",
            "format": "int32",
            "nullable": true
          },
          "UnitId": {
            "type": "integer",
            "description": "Rental property unit unique identifier that the applicant group is associated with.",
            "format": "int32",
            "nullable": true
          },
          "ApplicationGroupStatus": {
            "enum": [
              "Unknown",
              "Undecided",
              "Approved",
              "Rejected",
              "AddedToLease",
              "Cancelled",
              "Deferred",
              "New",
              "Draft",
              "AddedToDraftLease"
            ],
            "type": "string",
            "description": "Indicates the current applicant group status. Note, this status is independent from individual application statuses within the group."
          },
          "Applicants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicantMessage"
            },
            "description": "A collection of applicants in the group.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApplicantGroupPostMessage": {
        "required": [
          "ApplicantIds"
        ],
        "type": "object",
        "properties": {
          "UnitId": {
            "type": "integer",
            "description": "Rental property unit unique identifier to associate with the applicant group.",
            "format": "int32",
            "nullable": true
          },
          "ApplicantIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The applicant unique identifiers to include in the applicant group. Note, that applicants can only be included in one applicant group."
          }
        },
        "additionalProperties": false
      },
      "ApplicantGroupPutMessage": {
        "required": [
          "ApplicantGroupStatus",
          "ApplicantIds"
        ],
        "type": "object",
        "properties": {
          "UnitId": {
            "type": "integer",
            "description": "Rental property unit unique identifier to associate with the applicant group.",
            "format": "int32",
            "nullable": true
          },
          "ApplicantGroupStatus": {
            "enum": [
              "Undecided",
              "Approved",
              "Rejected",
              "Cancelled",
              "Deferred"
            ],
            "type": "string",
            "description": "Sets the status of the applicant group."
          },
          "ApplicantIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The applicant unique identifiers to include in the applicant group. Note, that applicants can only be included in one applicant group."
          }
        },
        "additionalProperties": false
      },
      "ApplicantMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Applicant unique identifier.",
            "format": "int32"
          },
          "ApplicantGroupId": {
            "type": "integer",
            "description": "Applicant group unique identifier.",
            "format": "int32",
            "nullable": true
          },
          "PropertyId": {
            "type": "integer",
            "description": "Rental property unique identifier that the applicant is associated with.",
            "format": "int32",
            "nullable": true
          },
          "UnitId": {
            "type": "integer",
            "description": "Rental property unit unique identifier that the applicant is associated with.",
            "format": "int32",
            "nullable": true
          },
          "TenantId": {
            "type": "integer",
            "description": "The rental tenant identifier associated with the applicant. This value will be null if the applicant never transitioned into a tenant.",
            "format": "int32",
            "nullable": true
          },
          "FirstName": {
            "type": "string",
            "description": "Applicant first name.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Applicant last name.",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Applicant email address.",
            "nullable": true
          },
          "PhoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberMessage"
            },
            "description": "Applicant phone numbers.",
            "nullable": true
          },
          "Status": {
            "enum": [
              "Unknown",
              "Undecided",
              "Approved",
              "Rejected",
              "AddedToLease",
              "Cancelled",
              "Deferred",
              "New",
              "Draft",
              "AddedToDraftLease"
            ],
            "type": "string",
            "description": "Applicant status."
          },
          "Applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicantApplicationMessage"
            },
            "description": "A collection of applications associated with the applicant.",
            "nullable": true
          },
          "LastUpdatedDateTime": {
            "type": "string",
            "description": "Date and time the applicant was last updated.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApplicantPayeeMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unique identifier of the applicant payee.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "The name of the payee.",
            "nullable": true
          },
          "Type": {
            "enum": [
              "Tenant",
              "AssociationTenant",
              "AssociationOwner",
              "RentalOwner",
              "Vendor",
              "Staff",
              "Applicant"
            ],
            "type": "string",
            "description": "The payee user entity type."
          },
          "Href": {
            "type": "string",
            "description": "A link to the resource endpoint associated with the payee.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents an applicant payee."
      },
      "ApplicantPostMessage": {
        "required": [
          "FirstName",
          "LastName",
          "SendRentalApplicationEmail"
        ],
        "type": "object",
        "properties": {
          "UnitId": {
            "type": "integer",
            "description": "The rental property unit unique identifier to associate with the applicant.",
            "format": "int32",
            "nullable": true
          },
          "FirstName": {
            "minLength": 1,
            "type": "string",
            "description": "The first name of the applicant. The value can not exceed 127 characters."
          },
          "LastName": {
            "minLength": 1,
            "type": "string",
            "description": "The last name of the applicant. The value can not exceed 127 characters."
          },
          "Email": {
            "type": "string",
            "description": "The email address of the applicant.",
            "nullable": true
          },
          "PhoneNumbers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumbersMessage"
              }
            ],
            "description": "Phone numbers of the applicant.",
            "nullable": true
          },
          "SendRentalApplicationEmail": {
            "type": "boolean",
            "description": "Indicates whether to send the applicant an email with a link to the online rental application form."
          }
        },
        "additionalProperties": false,
        "description": "This object represents an applicant."
      },
      "ApplicantPutMessage": {
        "required": [
          "FirstName",
          "LastName"
        ],
        "type": "object",
        "properties": {
          "UnitId": {
            "type": "integer",
            "description": "The rental property unit unique identifier to associate with the applicant.",
            "format": "int32",
            "nullable": true
          },
          "FirstName": {
            "minLength": 1,
            "type": "string",
            "description": "The first name of the applicant. The value can not exceed 127 characters."
          },
          "LastName": {
            "minLength": 1,
            "type": "string",
            "description": "The last name of the applicant. The value can not exceed 127 characters."
          },
          "Email": {
            "type": "string",
            "description": "The email address of the applicant.",
            "nullable": true
          },
          "PhoneNumbers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumbersMessage"
              }
            ],
            "description": "Phone numbers for the applicant.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApplicationAutoAllocatedPaymentPostMessage": {
        "required": [
          "Date",
          "PaymentMethod",
          "SendEmailReceipt",
          "TotalAmount"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "The date of the transaction. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "PaymentMethod": {
            "enum": [
              "Check",
              "Cash",
              "MoneyOrder",
              "CashierCheck",
              "DirectDeposit",
              "CreditCard",
              "ElectronicPayment"
            ],
            "type": "string",
            "description": "The payment method used for the transaction."
          },
          "Memo": {
            "type": "string",
            "description": "A brief note describing the reason for the payment. The value cannot exceed 65 characters.",
            "nullable": true
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "The reference Number of the transaction. The value cannot exceed 30 characters.",
            "nullable": true
          },
          "SendEmailReceipt": {
            "type": "boolean",
            "description": "An indicator for whether to send an email receipt to the payee. If the payee does not have an email address set, no email will be sent."
          },
          "TotalAmount": {
            "type": "number",
            "description": "The total amount of the payment being created.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents an auto-allocated Payment made in a particular application ledger."
      },
      "ApplicationChargeLineSaveMessage": {
        "required": [
          "Amount",
          "GLAccountId"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Line item amount.",
            "format": "double"
          },
          "GLAccountId": {
            "type": "integer",
            "description": "The general ledger account identifier under which the line item amount will be recorded.",
            "format": "int32"
          },
          "Memo": {
            "type": "string",
            "description": "The general ledger account description under which the line item amount will be recorded. The value cannot exceed 245 characters",
            "nullable": true
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "Reference number for the line item. The value cannot exceed 30 characters.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a line item on an application charge"
      },
      "ApplicationChargeMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Charge unique identifier.",
            "format": "int32"
          },
          "Date": {
            "type": "string",
            "description": "Date of the charge.",
            "format": "date"
          },
          "TotalAmount": {
            "type": "number",
            "description": "Sum of all `Lines.Amount` entries in the charge.",
            "format": "double"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the charge.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChargeLineMessage"
            },
            "description": "A collection of line items associated with the charge.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a charge tied to an application"
      },
      "ApplicationChargePostMessage": {
        "required": [
          "Date"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "Date of the charge. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the charge. The value cannot exceed 65 characters.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationChargeLineSaveMessage"
            },
            "description": "A collection of line items included in the charge. At least one line item is required.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a charge related to an application"
      },
      "ApplicationChargePutMessage": {
        "required": [
          "Date"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "Date of the charge. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the charge. The value cannot exceed 65 characters.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationChargeLineSaveMessage"
            },
            "description": "A collection of line items included in the charge. At least one line item is required.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a charge related to an application"
      },
      "ApplicationMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Rental application unique identifier.",
            "format": "int32"
          },
          "ApplicationNumber": {
            "type": "string",
            "description": "An alpha numeric value that can be used to uniquely identify the application. This is typically provided to an applicant to use as a reference when making inquiries about their application.",
            "nullable": true
          },
          "ApplicationStatus": {
            "enum": [
              "Unknown",
              "Undecided",
              "Approved",
              "Rejected",
              "AddedToLease",
              "Cancelled",
              "Deferred",
              "New",
              "Draft",
              "AddedToDraftLease"
            ],
            "type": "string",
            "description": "Indicates the current application status."
          },
          "ApplicationSubmittedDateTime": {
            "type": "string",
            "description": "Date and time the application was submitted.",
            "format": "date-time"
          },
          "Application": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationResponseMessage"
            },
            "description": "A submitted rental application.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApplicationOutstandingBalanceMessage": {
        "type": "object",
        "properties": {
          "ApplicationId": {
            "type": "integer",
            "description": "Application unique identifier.",
            "format": "int32"
          },
          "PropertyId": {
            "type": "integer",
            "description": "Property unique identifier.",
            "format": "int32"
          },
          "UnitId": {
            "type": "integer",
            "description": "Property unit unique identifier.",
            "format": "int32",
            "nullable": true
          },
          "Balance0To30Days": {
            "type": "number",
            "description": "Outstanding balance due from within the last 30 days.",
            "format": "double"
          },
          "Balance31To60Days": {
            "type": "number",
            "description": "Outstanding balance due from within 31 to 60 days ago.",
            "format": "double"
          },
          "Balance61To90Days": {
            "type": "number",
            "description": "Outstanding balance due from within 61 to 90 days ago.",
            "format": "double"
          },
          "BalanceOver90Days": {
            "type": "number",
            "description": "Outstanding balance due from over 90 days ago.",
            "format": "double"
          },
          "TotalBalance": {
            "type": "number",
            "description": "Total outstanding balance due.",
            "format": "double"
          },
          "Balances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OutstandingBalancesLineMessage"
            },
            "description": "Breakdown of outstanding balance due by general ledger account.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents outstanding balances tied to applications."
      },
      "ApplicationPaymentLineSaveMessage": {
        "required": [
          "Amount",
          "GLAccountId"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Amount of the line item.",
            "format": "double"
          },
          "GLAccountId": {
            "type": "integer",
            "description": "The general ledger account identifier under which the line item amount will be recorded.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a line item on an application ledger payment"
      },
      "ApplicationPaymentPostMessage": {
        "required": [
          "Date",
          "Lines",
          "PaymentMethod",
          "SendEmailReceipt"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "The date of the transaction. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "PaymentMethod": {
            "enum": [
              "Check",
              "Cash",
              "MoneyOrder",
              "CashierCheck",
              "DirectDeposit",
              "CreditCard",
              "ElectronicPayment"
            ],
            "type": "string",
            "description": "The payment method used for the transaction."
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the payment. The value cannot exceed 65 characters.",
            "nullable": true
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "The reference Number of the transaction. The value cannot exceed 30 characters.",
            "nullable": true
          },
          "SendEmailReceipt": {
            "type": "boolean",
            "description": "An indicator for whether to send an email receipt to the payee. If the payee does not have an email address set, no email will be sent."
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationPaymentLineSaveMessage"
            },
            "description": "A collection of line items included in the payment. At least one line item is required."
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a Payment made in a particular application ledger."
      },
      "ApplicationPaymentPutMessage": {
        "required": [
          "Date",
          "Lines",
          "PaymentMethod"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "The date of the transaction. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "PaymentMethod": {
            "enum": [
              "Check",
              "Cash",
              "MoneyOrder",
              "CashierCheck",
              "DirectDeposit",
              "CreditCard",
              "ElectronicPayment",
              "BuildiumEFT",
              "BuildiumCC",
              "RetailCash"
            ],
            "type": "string",
            "description": "The payment method used for the transaction."
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the payment. The value cannot exceed 65 characters.",
            "nullable": true
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "The reference Number of the transaction. The value cannot exceed 30 characters.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationPaymentLineSaveMessage"
            },
            "description": "A collection of line items included in the payment. At least one line item is required."
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a Payment made in a particular application ledger."
      },
      "ApplicationPutMessage": {
        "required": [
          "ApplicationStatus"
        ],
        "type": "object",
        "properties": {
          "ApplicationStatus": {
            "enum": [
              "Undecided",
              "Approved",
              "Rejected",
              "Cancelled",
              "Deferred"
            ],
            "type": "string",
            "description": "Sets the status of the application."
          }
        },
        "additionalProperties": false
      },
      "ApplicationReferenceMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Application id unique identifier.",
            "format": "int32"
          },
          "Href": {
            "type": "string",
            "description": "A link to the application resource.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A reference to a rental application."
      },
      "ApplicationRefundLineMessage": {
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Amount of the line item.",
            "format": "double"
          },
          "GLAccountId": {
            "type": "integer",
            "description": "Unique identifier of the general ledger account associated with the refund.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a line on an application refund."
      },
      "ApplicationRefundLineSaveMessage": {
        "required": [
          "Amount",
          "GLAccountId"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Amount of the line item.",
            "format": "double"
          },
          "GLAccountId": {
            "type": "integer",
            "description": "Unique identifier of the general ledger account associated with the refund.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a line item on an application ledger refund."
      },
      "ApplicationRefundMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Refund unique identifier.",
            "format": "int32"
          },
          "Date": {
            "type": "string",
            "description": "Date of the refund.",
            "format": "date"
          },
          "Payees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicantPayeeMessage"
            },
            "description": "List of payees being refunded.",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the refund, if applicable.",
            "nullable": true
          },
          "CheckNumber": {
            "type": "string",
            "description": "Check number associated with the refund, if applicable.",
            "nullable": true
          },
          "BankAccountId": {
            "type": "integer",
            "description": "Unique identifier of the bank account that the refund was made from.",
            "format": "int32"
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "Address to be displayed on the refund check.",
            "nullable": true
          },
          "TotalAmount": {
            "type": "number",
            "description": "Total amount of the refund.",
            "format": "double"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationRefundLineMessage"
            },
            "description": "A collection of line items included in the refund.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a refund tied to an application."
      },
      "ApplicationRefundPostMessage": {
        "required": [
          "Address",
          "BankAccountId",
          "Date",
          "Lines"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "The date of the refund. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "A brief note describing the reason for the refund. The value cannot exceed 65 characters.",
            "nullable": true
          },
          "CheckNumber": {
            "type": "string",
            "description": "Check number associated with the refund, if applicable. The value cannot exceed 30 characters.",
            "nullable": true
          },
          "BankAccountId": {
            "type": "integer",
            "description": "Unique identifier of the bank account the refund is issued from.",
            "format": "int32"
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Address to be displayed on the refund check."
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationRefundLineSaveMessage"
            },
            "description": "A collection of line items included in the refund. At least one line item is required."
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a refund made in a particular application ledger."
      },
      "ApplicationResponseFieldMessage": {
        "type": "object",
        "properties": {
          "FieldCategoryType": {
            "enum": [
              "ApplicantName",
              "ApplicantEmail",
              "ApplicantSocialSecurityNumber",
              "ApplicantAlternateEmail",
              "ApplicantHomePhone",
              "ApplicantCellPhone",
              "ApplicantWorkPhone",
              "ApplicantFax",
              "ApplicantBirthDate",
              "ApplicantDriversLicense",
              "ApplicantCurrentAddress",
              "ApplicantAlternateAddress",
              "EmergencyContactName",
              "EmergencyContactRelationship",
              "EmergencyContactEmail",
              "EmergencyContactPhone",
              "OccupantName",
              "OccupantRelationship",
              "OccupantBirthDate",
              "OccupantEmail",
              "OccupantPhoneNumber",
              "CosignerName",
              "CosignerRelationship",
              "CosignerSocialSecurityNumber",
              "CosignerPhoneNumber",
              "CosignerEmail",
              "EmployerName",
              "EmployerAddress",
              "EmployerPhoneNumber",
              "EmployerEmail",
              "PositionHeld",
              "EmploymentDates",
              "MonthlyGrossSalary",
              "SupervisorName",
              "SupervisorTitle",
              "PetType",
              "PetName",
              "PetAge",
              "PetSpayedOrNeutered",
              "PetLicenseNumber",
              "PetWeight",
              "DesiredMoveInDate",
              "DesiredLeaseDuration",
              "DesiredRent",
              "DesiredNumberOfBedrooms",
              "DesiredNumberOfBathrooms",
              "ReferenceName",
              "ReferenceRelationship",
              "ReferencePhoneNumber",
              "ReferenceEmail",
              "RentalAddress",
              "RentalDates",
              "MonthlyRent",
              "ReasonForLeaving",
              "LandlordName",
              "LandlordPhoneNumber",
              "LandlordEmail",
              "VehicleMake",
              "VehicleModel",
              "VehicleColor",
              "VehicleYear",
              "VehicleLicensePlate",
              "AgreedTo",
              "AgreedBy",
              "CosignerAddress",
              "ApplicantAddress",
              "OtherComments",
              "EmailApplication",
              "OptInSms",
              "Location",
              "CosignerApplicationFullName",
              "CosignerApplicationRelationshipToApplicant",
              "CosignerApplicationSocialSecurityNumber",
              "CosignerApplicationPhoneNumber",
              "CosignerApplicationEmailAddress",
              "CosignerApplicationPrimaryAddress",
              "CosignerApplicationEmployerName",
              "CosignerApplicationEmployerAddress",
              "CosignerApplicationEmployerPhoneNumber",
              "CosignerApplicationEmployerEmail",
              "CosignerApplicationPositionHeld",
              "CosignerApplicationEmploymentDates",
              "CosignerApplicationMonthlyGrossSalary",
              "CosignerApplicationSupervisorName",
              "CosignerApplicationSupervisorTitle",
              "CosignerApplicationAgreedTo",
              "CosignerApplicationAgreedBy",
              "CosignerApplicationOtherComments"
            ],
            "type": "string",
            "description": "Indicates the field category type the field is assigned. The `FieldCategoryType` can be used to identify specific data points within the application. For example, to identify the fields that contain the applicants full name you would filter the fields within the application where the `FieldCategoryType` is equal to `ApplicantName`.",
            "nullable": true
          },
          "FieldType": {
            "enum": [
              "TextSingleLine",
              "Email",
              "DateDayMonthYear",
              "Number",
              "DateMonthYear",
              "DateYear",
              "GroupHeading",
              "NumberOfBathrooms",
              "NumberOfBedrooms",
              "PhoneNumber",
              "SocialSecurityNumber",
              "TextMultipleLines",
              "TrueFalse",
              "YesNo",
              "Currency",
              "FirstName",
              "LastName",
              "DateRangeFromDate",
              "DateRangeToDate",
              "AddressCountry",
              "AddressStreet",
              "AddressCity",
              "AddressState",
              "AddressZip",
              "DriversLicenseNumber",
              "DriversLicenseState",
              "Attachment",
              "AutoScreeningCity",
              "AutoScreeningState"
            ],
            "type": "string",
            "description": "Indicates the fields expected input value format and/or data type. For example, a field can be assigned a `FieldType` of `DateDayMonthYear` which indicates the input value must be a date containing a day, month and year.",
            "nullable": true
          },
          "FieldLabel": {
            "type": "string",
            "description": "A user defined description of the field. This value is typically displayed as the form field label on the application.",
            "nullable": true
          },
          "Value": {
            "type": "string",
            "description": "The field input value from the applicant.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApplicationResponseMessage": {
        "type": "object",
        "properties": {
          "SectionLabel": {
            "type": "string",
            "description": "A user defined description of the application section.",
            "nullable": true
          },
          "SectionType": {
            "enum": [
              "ApplicantInformation",
              "PropertyInformation",
              "RentalHistory",
              "Employment",
              "References",
              "Cosigners",
              "AdditionalOccupants",
              "Pets",
              "Vehicles",
              "TermsAndConditions",
              "Other",
              "CosignerInformation",
              "CosignerEmploymentHistory",
              "CosignerTermsAndConditions",
              "CosignerOther",
              "LocationOfInterest"
            ],
            "type": "string",
            "description": "Indicates the application section type. The `SectionType` can be used to identify specific sections within the application."
          },
          "SectionResponses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationSectionResponseMessage"
            },
            "description": "A collection of form fields within the section.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApplicationReversePaymentChargePostMessage": {
        "required": [
          "GLAccountId",
          "TotalAmount"
        ],
        "type": "object",
        "properties": {
          "GLAccountId": {
            "type": "integer",
            "description": "Income general ledger income account to record the charge under.",
            "format": "int32"
          },
          "TotalAmount": {
            "type": "number",
            "description": "Total amount to charge the applicant.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Non-sufficient funds (NSF) charge to the application."
      },
      "ApplicationReversePaymentOtherBankChargePostMessage": {
        "required": [
          "GLAccountId",
          "TotalAmount"
        ],
        "type": "object",
        "properties": {
          "GLAccountId": {
            "type": "integer",
            "description": "Expense general ledger account to associate the bank fee.",
            "format": "int32"
          },
          "TotalAmount": {
            "type": "number",
            "description": "Total amount of the bank fee.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Fee assessed by the bank for the application reversed payment."
      },
      "ApplicationReversePaymentPostMessage": {
        "required": [
          "EntryDate",
          "PaymentTransactionId"
        ],
        "type": "object",
        "properties": {
          "EntryDate": {
            "type": "string",
            "description": "Date of the transaction. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "PaymentTransactionId": {
            "type": "integer",
            "description": "Transaction identifier of the payment to reverse. Note, this payment transaction must be deposited.",
            "format": "int32"
          },
          "NSFCharge": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplicationReversePaymentChargePostMessage"
              }
            ],
            "description": "Non-sufficient funds (NSF) charge.",
            "nullable": true
          },
          "BankFee": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplicationReversePaymentOtherBankChargePostMessage"
              }
            ],
            "description": "Bank for fee assessed for the reversed payment operating account.",
            "nullable": true
          },
          "DepositTrustAccountBankFee": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplicationReversePaymentOtherBankChargePostMessage"
              }
            ],
            "description": "Bank for fee assessed for the reversed payment deposit trust account.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a reversed payment tied to an application"
      },
      "ApplicationSectionResponseMessage": {
        "type": "object",
        "properties": {
          "SectionFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationResponseFieldMessage"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApplicationTransactionMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Transaction unique identifier.",
            "format": "int32"
          },
          "Date": {
            "type": "string",
            "description": "Date of the transaction.",
            "format": "date"
          },
          "TransactionTypeEnum": {
            "enum": [
              "Unknown",
              "Charge",
              "Payment",
              "Refund",
              "ReversePayment",
              "UnreversedPayment"
            ],
            "type": "string",
            "description": "The type of transaction that occurred."
          },
          "TotalAmount": {
            "type": "number",
            "description": "Sum of all `Journal.Lines.Amount` entries in the transaction.",
            "format": "double"
          },
          "CheckNumber": {
            "type": "string",
            "description": "Check number associated with the transaction, if applicable.",
            "nullable": true
          },
          "ApplicationId": {
            "type": "integer",
            "description": "Application unique identifier associated with the transaction, if applicable. Null if value is not set.",
            "format": "int32",
            "nullable": true
          },
          "PayeeApplicantId": {
            "type": "integer",
            "description": "The payee's applicant unique identifier associated with the transaction, where applicable.",
            "format": "int32",
            "nullable": true
          },
          "PaymentMethod": {
            "type": "string",
            "description": "The payment method used for the transaction.",
            "nullable": true
          },
          "Journal": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JournalMessage"
              }
            ],
            "description": "Journal associated with the transaction. The journal describes how the transaction should be recorded for accounting purposes.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a financial transaction tied to an application"
      },
      "AppliedVendorCreditMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The vendor credit id applied to the bill payment.",
            "format": "int32"
          },
          "Href": {
            "type": "string",
            "description": "A link to the resource endpoint associated with the vendor credit.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ArchitecturalRequestsPostMessage": {
        "required": [
          "AssociationId",
          "Name",
          "OwnershipAccountId",
          "SubmittedDateTime"
        ],
        "type": "object",
        "properties": {
          "AssociationId": {
            "type": "integer",
            "description": "The ID of the association  to tie the architectural request to.",
            "format": "int32"
          },
          "OwnershipAccountId": {
            "type": "integer",
            "description": "The ID of the ownership account to tie the architectural request to.",
            "format": "int32"
          },
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the architectural request. Must be 30 characters or less."
          },
          "SubmittedDateTime": {
            "type": "string",
            "description": "The date and time the architectural request was submitted. Must not be in the future.",
            "format": "date-time"
          },
          "Status": {
            "enum": [
              "New",
              "InProgress",
              "Completed"
            ],
            "type": "string",
            "description": "The status of the architectural request. If no value is submitted the Status will be set to \"New\".",
            "nullable": true
          },
          "Decision": {
            "enum": [
              "Pending",
              "Approved",
              "Denied"
            ],
            "type": "string",
            "description": "The decision of the architectural request. If no value is submitted the Decision will be set to \"Pending\".",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssociationApplianceMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Appliance unique identifier.",
            "format": "int32"
          },
          "AssociationId": {
            "type": "integer",
            "description": "Association unique identifier that the appliance belongs to.",
            "format": "int32"
          },
          "UnitId": {
            "type": "integer",
            "description": "Association unit unique identifier that the appliance belongs to.",
            "format": "int32",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "Name of the appliance.",
            "nullable": true
          },
          "Make": {
            "type": "string",
            "description": "Make of the appliance.",
            "nullable": true
          },
          "Model": {
            "type": "string",
            "description": "Model of the appliance.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Description of the appliance.",
            "nullable": true
          },
          "WarrantyEndDate": {
            "type": "string",
            "description": "Warranty end date of the appliance.",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssociationAppliancePostMessage": {
        "required": [
          "AssociationId",
          "Name"
        ],
        "type": "object",
        "properties": {
          "AssociationId": {
            "type": "integer",
            "description": "Association unique identifier that the appliance belongs to.",
            "format": "int32"
          },
          "UnitId": {
            "type": "integer",
            "description": "Association unit unique identifier that the appliance belongs to.",
            "format": "int32",
            "nullable": true
          },
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the appliance. The name cannot exceed 100 characters."
          },
          "Make": {
            "type": "string",
            "description": "The make of the appliance. The make cannot exceed 30 characters.",
            "nullable": true
          },
          "Model": {
            "type": "string",
            "description": "The model of the appliance. The model cannot exceed 30 characters.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "The description of the appliance. The description cannot exceed 500 characters.",
            "nullable": true
          },
          "InstallDate": {
            "type": "string",
            "description": "The install date for the appliance's warranty. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          },
          "WarrantyEndDate": {
            "type": "string",
            "description": "The end date for the appliance's warranty. The warranty's end date cannot be before the installed date, if it exists. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssociationAppliancePutMessage": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "UnitId": {
            "type": "integer",
            "description": "The unit identifier the association appliance belongs to. Must be within the association property the appliance is in.",
            "format": "int32",
            "nullable": true
          },
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the association appliance. The name cannot exceed 100 characters."
          },
          "Make": {
            "type": "string",
            "description": "The make of the association appliance. The make cannot exceed 30 characters.",
            "nullable": true
          },
          "Model": {
            "type": "string",
            "description": "The model of the association appliance. The model cannot exceed 30 characters.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "The description of the association appliance. The description cannot exceed 500 characters.",
            "nullable": true
          },
          "WarrantyEndDate": {
            "type": "string",
            "description": "The end date for the association appliance's warranty. The warranty's end date cannot be before the installed date, if it exists. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssociationApplianceServiceHistoryMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Appliance service history unique identifier.",
            "format": "int32"
          },
          "ServiceType": {
            "enum": [
              "Installed",
              "Serviced",
              "Uninstalled"
            ],
            "type": "string",
            "description": "Type of service performed."
          },
          "Date": {
            "type": "string",
            "description": "Date of the service.",
            "format": "date",
            "nullable": true
          },
          "Details": {
            "type": "string",
            "description": "Details of the service.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssociationApplianceServiceHistoryPostMessage": {
        "required": [
          "Date",
          "ServiceType"
        ],
        "type": "object",
        "properties": {
          "ServiceType": {
            "enum": [
              "Installed",
              "Serviced",
              "Uninstalled"
            ],
            "type": "string",
            "description": "Specifies the type of service that occured."
          },
          "Date": {
            "type": "string",
            "description": "Date the service was performed. Must be formatted as `YYYY-MM-DD`.",
            "format": "date"
          },
          "Details": {
            "type": "string",
            "description": "The service history details associated with the appliance. The description cannot exceed 100 characters.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssociationArchitecturalRequestFileMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "File unique identifier.",
            "format": "int32"
          },
          "Title": {
            "type": "string",
            "description": "The title of the file.",
            "nullable": true
          },
          "PhysicalFileName": {
            "type": "string",
            "description": "Physical name of the file on the server.",
            "nullable": true
          },
          "Size": {
            "type": "integer",
            "description": "Size of the file, in kilobytes.",
            "format": "int64"
          },
          "ContentType": {
            "type": "string",
            "description": "MIME type of the file.",
            "nullable": true
          },
          "UploadedDateTime": {
            "type": "string",
            "description": "Date and time the file was uploaded.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "AssociationArchitecturalRequestMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Architectural request unique identifier.",
            "format": "int32"
          },
          "AssociationId": {
            "type": "integer",
            "description": "Association unique identifier.",
            "format": "int32"
          },
          "OwnershipAccountId": {
            "type": "integer",
            "description": "Ownership account unique identifier.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Architectural request name.",
            "nullable": true
          },
          "SubmittedDateTime": {
            "type": "string",
            "description": "Date and time the architectural request was submitted.",
            "format": "date-time"
          },
          "Status": {
            "enum": [
              "New",
              "InProgress",
              "Completed"
            ],
            "type": "string",
            "description": "Status of the architectural request."
          },
          "Decision": {
            "enum": [
              "Pending",
              "Approved",
              "Denied"
            ],
            "type": "string",
            "description": "Decision of the architectural request."
          },
          "CreatedDateTime": {
            "type": "string",
            "description": "Date and time the architectural request was created.",
            "format": "date-time"
          },
          "CreatedByUser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedByUserMessage"
              }
            ],
            "description": "User who created the architectural request.",
            "nullable": true
          },
          "LastUpdatedDateTime": {
            "type": "string",
            "description": "Date and time the architectural request was last updated.",
            "format": "date-time"
          },
          "LastUpdatedByUser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LastUpdatedByUserMessage"
              }
            ],
            "description": "User who most recently updated the architectural request.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssociationBoardMemberMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Association board member unique identifier.",
            "format": "int32"
          },
          "AssociationOwnerId": {
            "type": "integer",
            "description": "Association owner unique identifier.",
            "format": "int32"
          },
          "FirstName": {
            "type": "string",
            "description": "Association owner first name.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Association owner last name.",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Association owner email.",
            "nullable": true
          },
          "PhoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberMessage"
            },
            "description": "List of phone numbers of the association owner.",
            "nullable": true
          },
          "BoardPositionType": {
            "enum": [
              "President",
              "VicePresident",
              "Treasurer",
              "Secretary",
              "BoardMember"
            ],
            "type": "string",
            "description": "Indicates the board position held by the association owner."
          },
          "StartDate": {
            "type": "string",
            "description": "Start date of the association owner's term as board member",
            "format": "date",
            "nullable": true
          },
          "EndDate": {
            "type": "string",
            "description": "End date of the association owner's term as board member",
            "format": "date",
            "nullable": true
          },
          "CreatedDateTime": {
            "type": "string",
            "description": "Date and time when the board member was created.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "AssociationBoardMemberPostMessage": {
        "required": [
          "AssociationOwnerId",
          "BoardPositionType"
        ],
        "type": "object",
        "properties": {
          "AssociationOwnerId": {
            "type": "integer",
            "description": "The association owner's unique identifier.",
            "format": "int32"
          },
          "BoardPositionType": {
            "enum": [
              "President",
              "VicePresident",
              "Treasurer",
              "Secretary",
              "BoardMember"
            ],
            "type": "string",
            "description": "Indicates the board position held by the association owner."
          },
          "StartDate": {
            "type": "string",
            "description": "Start date of the association owners term as a board member. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          },
          "EndDate": {
            "type": "string",
            "description": "End date of the association owners term as a board member. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This object represents the Board Member for an Association."
      },
      "AssociationBoardMemberPutMessage": {
        "required": [
          "BoardPositionType"
        ],
        "type": "object",
        "properties": {
          "BoardPositionType": {
            "enum": [
              "President",
              "VicePresident",
              "Treasurer",
              "Secretary",
              "BoardMember"
            ],
            "type": "string",
            "description": "Indicates the board position held by the association owner."
          },
          "StartDate": {
            "type": "string",
            "description": "Start date of the association owners term as a board member. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          },
          "EndDate": {
            "type": "string",
            "description": "End date of the association owners term as a board member. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This object represents the Board Member for an Association."
      },
      "AssociationMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Association unique identifier.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Association name.",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "description": "Indicates whether the association is active within the Buildium platform."
          },
          "Reserve": {
            "type": "number",
            "description": "A property reserve is cash that a property manager keeps on hand in case of unexpected expenses. It is available cash that simply isn't disbursed in an owner draw.",
            "format": "double"
          },
          "Description": {
            "type": "string",
            "description": "Description of the association.",
            "nullable": true
          },
          "YearBuilt": {
            "type": "integer",
            "description": "Indicates the year the association was built. Null if no value is set.",
            "format": "int32",
            "nullable": true
          },
          "OperatingBankAccount": {
            "type": "string",
            "description": "Primary bank account that an association uses for its income and expenses.",
            "nullable": true
          },
          "OperatingBankAccountId": {
            "type": "integer",
            "description": "Primary bank account unique identifier that an association uses for its income and expenses.",
            "format": "int32"
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "Association address.",
            "nullable": true
          },
          "AssociationManager": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PropertyManagerMessage"
              }
            ],
            "description": "Property manager associated with this association.",
            "nullable": true
          },
          "FiscalYearEndDay": {
            "type": "integer",
            "description": "The day the fiscal year ends for the association.",
            "format": "int32"
          },
          "FiscalYearEndMonth": {
            "type": "integer",
            "description": "The month the fiscal year ends for the association.",
            "format": "int32"
          },
          "TaxInformation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AssociationTaxInformationMessage"
              }
            ],
            "description": "The tax information of the association.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents home owner associations."
      },
      "AssociationOwnerBoardTermMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Board term unique identifier.",
            "format": "int32"
          },
          "AssociationId": {
            "type": "integer",
            "description": "Association unique identifier.",
            "format": "int32"
          },
          "BoardPositionType": {
            "enum": [
              "President",
              "VicePresident",
              "Treasurer",
              "Secretary",
              "BoardMember"
            ],
            "type": "string",
            "description": "Indicates the board position held by the association owner."
          },
          "StartDate": {
            "type": "string",
            "description": "Start date of the board member term.",
            "format": "date",
            "nullable": true
          },
          "EndDate": {
            "type": "string",
            "description": "End date of the board member term.",
            "format": "date",
            "nullable": true
          },
          "CreatedDateTime": {
            "type": "string",
            "description": "Date and time the board member position was created.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Board member term."
      },
      "AssociationOwnerBoardTermPostMessage": {
        "required": [
          "BoardPositionType"
        ],
        "type": "object",
        "properties": {
          "BoardPositionType": {
            "enum": [
              "President",
              "VicePresident",
              "Treasurer",
              "Secretary",
              "BoardMember"
            ],
            "type": "string",
            "description": "Indicates the board position held by the association owner."
          },
          "StartDate": {
            "type": "string",
            "description": "Start date of the board member term. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          },
          "EndDate": {
            "type": "string",
            "description": "End date of the board member term. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Board member term."
      },
      "AssociationOwnerMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Unique identifier.",
            "format": "int32"
          },
          "FirstName": {
            "type": "string",
            "description": "First name.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Last name.",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Email.",
            "nullable": true
          },
          "AlternateEmail": {
            "type": "string",
            "description": "Alternate email.",
            "nullable": true
          },
          "PhoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberMessage"
            },
            "description": "List of phone numbers of the association user.",
            "nullable": true
          },
          "PrimaryAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "Primary address.",
            "nullable": true
          },
          "AlternateAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "Alternate address.",
            "nullable": true
          },
          "Comment": {
            "type": "string",
            "description": "General comments.",
            "nullable": true
          },
          "EmergencyContact": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmergencyContactMessage"
              }
            ],
            "description": "Emergency contact information.",
            "nullable": true
          },
          "OwnershipAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssociationOwnershipAccountMessage"
            },
            "description": "List of associated ownership accounts.",
            "nullable": true
          },
          "MailingPreference": {
            "enum": [
              "PrimaryAddress",
              "AlternateAddress"
            ],
            "type": "string",
            "description": "Indicates the association owner's mailing preference."
          },
          "Vehicles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VehicleMessage"
            },
            "description": "List of vehicles associated with the association owner.",
            "nullable": true
          },
          "OccupiesUnit": {
            "type": "boolean",
            "description": "Indicates if the association owner occupies a unit(s) within the association."
          },
          "BoardMemberTerms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssociationOwnerBoardTermMessage"
            },
            "description": "List of Board Member Terms for the given Association Owner(s)",
            "nullable": true
          },
          "CreatedDateTime": {
            "type": "string",
            "description": "Date and time the association owner was created.",
            "format": "date-time"
          },
          "TaxId": {
            "type": "string",
            "description": "Taxpayer identification number. Examples of United States identification numbers are Social Security number or a Employer Identification Number.",
            "nullable": true
          },
          "DelinquencyStatus": {
            "enum": [
              "NoDelinquency",
              "InCollections",
              "InForeclosure",
              "Foreclosed"
            ],
            "type": "string",
            "description": "Indicates the delinquency status of the association owner."
          }
        },
        "additionalProperties": false,
        "description": "This object represents an owner of a unit(s) that exists within a home owner association."
      },
      "AssociationOwnerPostMessage": {
        "required": [
          "FirstName",
          "IsOwnerOccupied",
          "LastName",
          "PrimaryAddress"
        ],
        "type": "object",
        "properties": {
          "FirstName": {
            "minLength": 1,
            "type": "string",
            "description": "First name of the owner. The value cannot exceed 127 characters."
          },
          "LastName": {
            "minLength": 1,
            "type": "string",
            "description": "Last name of the owner. The value cannot exceed 127 characters."
          },
          "PrimaryAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Address of the owner."
          },
          "AlternateAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Alternate address of the owner.",
            "nullable": true
          },
          "BoardMemberTerm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AssociationOwnerBoardTermPostMessage"
              }
            ],
            "description": "Association board member terms for the owner.",
            "nullable": true
          },
          "IsOwnerOccupied": {
            "type": "boolean",
            "description": "Indicates if the association owner occupies a unit(s) within the association."
          },
          "Email": {
            "type": "string",
            "description": "Email of owner.",
            "nullable": true
          },
          "AlternateEmail": {
            "type": "string",
            "description": "Alternate email of owner.",
            "nullable": true
          },
          "PhoneNumbers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumbersMessage"
              }
            ],
            "description": "Phone numbers for the Association Owner.",
            "nullable": true
          },
          "DateOfBirth": {
            "type": "string",
            "description": "Date Of Birth for the owner. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          },
          "EmergencyContact": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveEmergencyContactMessage"
              }
            ],
            "description": "Emergency contact information associated with the owner.",
            "nullable": true
          },
          "Comment": {
            "type": "string",
            "description": "Comments about the owner. The value cannot exceed 65,535 characters.",
            "nullable": true
          },
          "MailingPreference": {
            "enum": [
              "PrimaryAddress",
              "AlternateAddress"
            ],
            "type": "string",
            "description": "Mailing preferences for the owner. If an alternate address exists and this value is not provided then the primary address will be set as the preferred address.",
            "nullable": true
          },
          "TaxId": {
            "type": "string",
            "description": "Taxpayer identification number of the owner. Examples of United States identification numbers are Social Security number or a Employer Identification Number. Valid formats are: `12-1234567`, `123-12-1234`, `123456789`.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This object represents the Association Owner to add when Creating a new OwnershipAccount"
      },
      "AssociationOwnerPutMessage": {
        "required": [
          "FirstName",
          "LastName",
          "PrimaryAddress"
        ],
        "type": "object",
        "properties": {
          "FirstName": {
            "minLength": 1,
            "type": "string",
            "description": "First name of the owner. The value cannot exceed 127 characters."
          },
          "LastName": {
            "minLength": 1,
            "type": "string",
            "description": "Last name of the owner. The value cannot exceed 127 characters."
          },
          "PrimaryAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Address of the owner."
          },
          "AlternateAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Alternate address of the owner.",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Email of the owner.",
            "nullable": true
          },
          "AlternateEmail": {
            "type": "string",
            "description": "Alternate email of the owner.",
            "nullable": true
          },
          "PhoneNumbers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumbersMessage"
              }
            ],
            "description": "Phone numbers for the association owner.",
            "nullable": true
          },
          "EmergencyContact": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveEmergencyContactMessage"
              }
            ],
            "description": "Emergency contact information associated with the owner.",
            "nullable": true
          },
          "Comment": {
            "type": "string",
            "description": "Comments about the owner. The value cannot exceed 65,535 characters.",
            "nullable": true
          },
          "MailingPreference": {
            "enum": [
              "PrimaryAddress",
              "AlternateAddress"
            ],
            "type": "string",
            "description": "Mailing preferences for the owner. If an alternate address exists and this value is not provided then the primary address will be set as the preferred address.",
            "nullable": true
          },
          "TaxId": {
            "type": "string",
            "description": "Taxpayer identification number of the owner. Examples of United States identification numbers are Social Security number or a Employer Identification Number. Valid formats are: `12-1234567`, `123-12-1234`, `123456789`.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssociationOwnerToExistingOwnershipAccountPostMessage": {
        "required": [
          "FirstName",
          "IsOwnerOccupied",
          "LastName",
          "OwnershipAccountId",
          "PrimaryAddress",
          "SendWelcomeEmail"
        ],
        "type": "object",
        "properties": {
          "OwnershipAccountId": {
            "type": "integer",
            "description": "Ownership account Id for the owner.",
            "format": "int32"
          },
          "SendWelcomeEmail": {
            "type": "boolean",
            "description": "Send a welcome email to any homeowner at the association"
          },
          "PrimaryAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Address of the owner."
          },
          "AlternateAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Alternate address of the owner.",
            "nullable": true
          },
          "FirstName": {
            "minLength": 1,
            "type": "string",
            "description": "First name of the owner. The value can not exceed 127 characters."
          },
          "LastName": {
            "minLength": 1,
            "type": "string",
            "description": "Last name of the owner. The value can not exceed 127 characters."
          },
          "BoardMemberTerm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AssociationOwnerBoardTermPostMessage"
              }
            ],
            "description": "Association board member terms for the owner.",
            "nullable": true
          },
          "IsOwnerOccupied": {
            "type": "boolean",
            "description": "Indicates if the association owner occupies a unit(s) within the association."
          },
          "Email": {
            "type": "string",
            "description": "Email of owner.",
            "nullable": true
          },
          "AlternateEmail": {
            "type": "string",
            "description": "Alternate email of owner.",
            "nullable": true
          },
          "PhoneNumbers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumbersMessage"
              }
            ],
            "description": "Phone numbers for the owner.",
            "nullable": true
          },
          "DateOfBirth": {
            "type": "string",
            "description": "Date Of Birth for the owner. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          },
          "EmergencyContact": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveEmergencyContactMessage"
              }
            ],
            "description": "Emergency Contact information associated with the owner.",
            "nullable": true
          },
          "Comment": {
            "type": "string",
            "description": "Comments about the owner. The value can not exceed 65,535 characters.",
            "nullable": true
          },
          "MailingPreference": {
            "enum": [
              "PrimaryAddress",
              "AlternateAddress"
            ],
            "type": "string",
            "description": "Mailing preferences for the owner. If an alternate address exists and this value is not provided then the primary address will be set as the preferred address.",
            "nullable": true
          },
          "TaxId": {
            "type": "string",
            "description": "Taxpayer identification number of the owner. Examples of United States identification numbers are Social Security number or a Employer Identification Number. Valid formats are: `12-1234567`, `123-12-1234`, `123456789`.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This object represents the Association Owner to add to an existing Ownership Account"
      },
      "AssociationOwnerUnitOccupancyPutMessage": {
        "required": [
          "IsOccupied"
        ],
        "type": "object",
        "properties": {
          "IsOccupied": {
            "type": "boolean",
            "description": "Indicates whether the unit is occupied by the association owner."
          }
        },
        "additionalProperties": false
      },
      "AssociationOwnerUnitOccupancyStatusMessage": {
        "type": "object",
        "properties": {
          "UnitId": {
            "type": "integer",
            "description": "Association unit unique identifier.",
            "format": "int32"
          },
          "IsOccupied": {
            "type": "boolean",
            "description": "Indicates whether the unit is occupied by the association owner."
          }
        },
        "additionalProperties": false
      },
      "AssociationOwnershipAccountMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Association ownership account unique identifier.",
            "format": "int32"
          },
          "AssociationId": {
            "type": "integer",
            "description": "Association unique identifier that the ownership account belongs to.",
            "format": "int32"
          },
          "UnitId": {
            "type": "integer",
            "description": "Association unit unique identifier that the ownership account is related to.",
            "format": "int32"
          },
          "Status": {
            "enum": [
              "Active",
              "Past",
              "Future"
            ],
            "type": "string",
            "description": "Indicates the status of the ownership account."
          },
          "DateOfPurchase": {
            "type": "string",
            "description": "Date the unit(s) where purchased by the owner.",
            "format": "date"
          },
          "DateOfSale": {
            "type": "string",
            "description": "Date the unit(s) where sold by the owner.",
            "format": "date",
            "nullable": true
          },
          "Comments": {
            "type": "string",
            "description": "Comments about the ownership account.",
            "nullable": true
          },
          "AssociationOwnerIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Association owners associated with the ownership account",
            "nullable": true
          },
          "DelinquencyStatus": {
            "enum": [
              "NoDelinquency",
              "InCollections",
              "InForeclosure",
              "Foreclosed"
            ],
            "type": "string",
            "description": "Indicates the delinquency status of the ownership account"
          }
        },
        "additionalProperties": false,
        "description": "This object represents a home owner association ownership account."
      },
      "AssociationOwnershipAccountPostMessage": {
        "required": [
          "DateOfPurchase",
          "ReplaceExistingOwnershipAccount",
          "SendWelcomeEmail",
          "UnitId"
        ],
        "type": "object",
        "properties": {
          "UnitId": {
            "type": "integer",
            "description": "Association unit unique identifier that the ownership account is related to.",
            "format": "int32"
          },
          "DateOfPurchase": {
            "type": "string",
            "description": "Date the unit was purchased by the owner. Must be formatted as YYYY-MM-DD. \r\nIf an existing association ownership account is being replaced then this date must be after the existing ownership accounts date of sale.",
            "format": "date"
          },
          "AssociationFee": {
            "type": "number",
            "description": "Recurring association fee charge. If provided, a recurring transaction will be created that adds a charge in the amount specified to the ownership account ledger with the frequency indicated in RecurringFrequency.",
            "format": "double",
            "nullable": true
          },
          "RecurringFrequency": {
            "enum": [
              "Monthly",
              "Weekly",
              "Every2Weeks",
              "Quarterly",
              "Yearly",
              "Every2Months",
              "Daily",
              "Every6Months",
              "OneTime"
            ],
            "type": "string",
            "description": "Indicates the frequency of the recurring association fee. This field is required if `AssociationFee` has a value.",
            "nullable": true
          },
          "AssociationOwnerIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Current or former association owners to assign to this ownership account. Values must be an active association owner identifiers. The request must include at least one owner in this property OR the `AssociationOwners` property.",
            "nullable": true
          },
          "AssociationOwners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssociationOwnerPostMessage"
            },
            "description": "Create new association owner(s) and assigns them to this new ownership account. The request must include at least one owner in this property OR the `AssociationOwnerIds` property.",
            "nullable": true
          },
          "SendWelcomeEmail": {
            "type": "boolean",
            "description": "Indicates whether to send an owner portal welcome email to all of the association owners assigned to this ownership account. Once the owners sign into the portal, they can make online payments, view important documents, submit requests, and more."
          },
          "ReplaceExistingOwnershipAccount": {
            "type": "boolean",
            "description": "Indicates whether to replace an ownership account if one already exists for this unit. \r\nIf this value is false and an ownership account exists the request will fail.This protects against inadvertently overwriting of an existing ownership account. \r\nIf the value is true and an ownership account exists then the existing ownership account will be marked as with a status of Past and the newly created ownership account will be Active for the unit."
          }
        },
        "additionalProperties": false
      },
      "AssociationOwnershipAccountPutMessage": {
        "required": [
          "DateOfPurchase"
        ],
        "type": "object",
        "properties": {
          "DateOfPurchase": {
            "type": "string",
            "description": "Date the unit was purchased by the owner. Must be formatted as YYYY-MM-DD.",
            "format": "date"
          }
        },
        "additionalProperties": false
      },
      "AssociationPostMessage": {
        "required": [
          "Address",
          "Name",
          "OperatingBankAccountId"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "Association name. The value cannot exceed 127 characters."
          },
          "OperatingBankAccountId": {
            "type": "integer",
            "description": "The primary bank account that an association uses for its income and expenses.",
            "format": "int32"
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Association address."
          },
          "IsActive": {
            "type": "boolean",
            "description": "Indicates whether the association is active within the Buildium platform. If no value is passed in the default is `true`.",
            "nullable": true
          },
          "Reserve": {
            "type": "number",
            "description": "A property reserve is cash that a property manager keeps on hand in case of unexpected expenses. It is available cash that isn't disbursed in an owner draw.",
            "format": "double",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Description of the association. The description cannot exceed 65,535 characters.",
            "nullable": true
          },
          "YearBuilt": {
            "type": "integer",
            "description": "Indicates the year the association was established. If provided this value must be a four digit integer between 1000 and the current year.",
            "format": "int32",
            "nullable": true
          },
          "PropertyManagerId": {
            "type": "integer",
            "description": "Indicates the staff member identifier that acts as the property manager for this association. Note, the staff member must have permissions to this association to be assigned as the property manager.\r\nLeave this field null if you don't want to assign a staff member to the association.",
            "format": "int32",
            "nullable": true
          },
          "TaxInformation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaxInformationPostMessage"
              }
            ],
            "description": "The tax information of the association.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssociationPreferredVendorMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Preferred vendor unique identifier.",
            "format": "int32"
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the preferred vendor.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the preferred vendor.",
            "nullable": true
          },
          "CompanyName": {
            "type": "string",
            "description": "Company name of the preferred vendor.",
            "nullable": true
          },
          "PrimaryEmail": {
            "type": "string",
            "description": "Primary email for the preferred vendor.",
            "nullable": true
          },
          "AlternateEmail": {
            "type": "string",
            "description": "Alternate email for the preferred vendor.",
            "nullable": true
          },
          "PhoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberMessage"
            },
            "description": "List of phone numbers of the preferred vendor.",
            "nullable": true
          },
          "Website": {
            "type": "string",
            "description": "Website of the preferred vendor.",
            "nullable": true
          },
          "IsCompany": {
            "type": "boolean",
            "description": "Indicates whether the preferred vendor is a company."
          }
        },
        "additionalProperties": false
      },
      "AssociationPreferredVendorPutMessage": {
        "required": [
          "VendorIds"
        ],
        "type": "object",
        "properties": {
          "VendorIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A list of vendor identifiers that will be assigned as preferred vendors to the specified association. The submitted list of identifiers will overwrite any existing preferred vendors. Leaving the array empty will remove all vendors from the association."
          }
        },
        "additionalProperties": false
      },
      "AssociationPutMessage": {
        "required": [
          "Address",
          "FiscalYearEndDay",
          "FiscalYearEndMonth",
          "Name",
          "OperatingBankAccountId"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "Association name. The value cannot exceed 127 characters."
          },
          "Description": {
            "type": "string",
            "description": "Description of the association. The value cannot exceed 65,535 characters.",
            "nullable": true
          },
          "YearBuilt": {
            "type": "integer",
            "description": "Indicates the year the association was established. If provided this value must be a four digit integer between 1000 and the current year.",
            "format": "int32",
            "nullable": true
          },
          "OperatingBankAccountId": {
            "type": "integer",
            "description": "The primary bank account that an association uses for its income and expenses.",
            "format": "int32"
          },
          "Reserve": {
            "type": "number",
            "description": "A property reserve is cash that a property manager keeps on hand in case of unexpected expenses. It is available cash that isn't disbursed in an owner draw.",
            "format": "double",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Association address."
          },
          "PropertyManagerId": {
            "type": "integer",
            "description": "Indicates the staff member identifier that acts as the property manager for this association. Note, the staff member must have permissions to this association to be assigned as the property manager.\r\nSet this field to null if you don't want to assign a staff member to the association.",
            "format": "int32",
            "nullable": true
          },
          "FiscalYearEndDay": {
            "type": "integer",
            "description": "The day the fiscal year ends for the association.",
            "format": "int32"
          },
          "FiscalYearEndMonth": {
            "type": "integer",
            "description": "The month the fiscal year ends for the association.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AssociationTaxInformationMessage": {
        "type": "object",
        "properties": {
          "TaxPayerIdType": {
            "enum": [
              "SSN",
              "EIN"
            ],
            "type": "string",
            "description": "Indicates the type of tax payer id being specified in the request.",
            "nullable": true
          },
          "TaxPayerId": {
            "type": "string",
            "description": "The tax payer identifier.",
            "nullable": true
          },
          "TaxPayerName1": {
            "type": "string",
            "description": "Tax payer name line 1.",
            "nullable": true
          },
          "TaxPayerName2": {
            "type": "string",
            "description": "Tax payer name line 2.",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "Address of the tax payer.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Association tax information."
      },
      "AssociationTenantMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Unique identifier.",
            "format": "int32"
          },
          "FirstName": {
            "type": "string",
            "description": "First name.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Last name.",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Email.",
            "nullable": true
          },
          "AlternateEmail": {
            "type": "string",
            "description": "Alternate email.",
            "nullable": true
          },
          "PhoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberMessage"
            },
            "description": "List of phone numbers of the association user.",
            "nullable": true
          },
          "PrimaryAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "Primary address.",
            "nullable": true
          },
          "AlternateAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "Alternate address.",
            "nullable": true
          },
          "Comment": {
            "type": "string",
            "description": "General comments.",
            "nullable": true
          },
          "EmergencyContact": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmergencyContactMessage"
              }
            ],
            "description": "Emergency contact information.",
            "nullable": true
          },
          "OwnershipAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssociationOwnershipAccountMessage"
            },
            "description": "List of associated ownership accounts.",
            "nullable": true
          },
          "MoveInDate": {
            "type": "string",
            "description": "Move in date for the tenant.",
            "format": "date",
            "nullable": true
          },
          "MoveOutDate": {
            "type": "string",
            "description": "Move out date for the tenant.",
            "format": "date",
            "nullable": true
          },
          "CreatedDateTime": {
            "type": "string",
            "description": "Date and time the tenant was created.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "This object represents a home owner association tenant."
      },
      "AssociationTenantPostMessage": {
        "required": [
          "FirstName",
          "LastName",
          "OwnershipAccountId",
          "PrimaryAddress"
        ],
        "type": "object",
        "properties": {
          "FirstName": {
            "minLength": 1,
            "type": "string",
            "description": "First name of tenant. The value cannot exceed 127 characters."
          },
          "LastName": {
            "minLength": 1,
            "type": "string",
            "description": "Last name of tenant. The value cannot exceed 127 characters."
          },
          "Email": {
            "type": "string",
            "description": "Email of tenant.",
            "nullable": true
          },
          "AlternateEmail": {
            "type": "string",
            "description": "Alternate email of tenant.",
            "nullable": true
          },
          "PhoneNumbers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumbersMessage"
              }
            ],
            "description": "Phone numbers for the tenant.",
            "nullable": true
          },
          "DateOfBirth": {
            "type": "string",
            "description": "Date of birth for the tenant. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          },
          "Comment": {
            "type": "string",
            "description": "Comments about the tenant. The value cannot exceed 65,535 characters.",
            "nullable": true
          },
          "EmergencyContact": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveEmergencyContactMessage"
              }
            ],
            "description": "Emergency contact information associated with the tenant.",
            "nullable": true
          },
          "PrimaryAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Address of the tenant."
          },
          "AlternateAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Alternate address of the tenant.",
            "nullable": true
          },
          "MoveInDate": {
            "type": "string",
            "description": "Move in date for the tenant. This date is not editable and can only be set when creating the tenant. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          },
          "MoveOutDate": {
            "type": "string",
            "description": "Move out date for the tenant. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          },
          "OwnershipAccountId": {
            "type": "integer",
            "description": "Ownership account id for the tenant.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "AssociationTenantPutMessage": {
        "required": [
          "FirstName",
          "LastName",
          "PrimaryAddress"
        ],
        "type": "object",
        "properties": {
          "FirstName": {
            "minLength": 1,
            "type": "string",
            "description": "First name of tenant. The value cannot exceed 127 characters."
          },
          "LastName": {
            "minLength": 1,
            "type": "string",
            "description": "Last name of tenant. The value cannot exceed 127 characters."
          },
          "Email": {
            "type": "string",
            "description": "Email of tenant.",
            "nullable": true
          },
          "AlternateEmail": {
            "type": "string",
            "description": "Alternate email of tenant.",
            "nullable": true
          },
          "PhoneNumbers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumbersMessage"
              }
            ],
            "description": "Phone numbers for the tenant",
            "nullable": true
          },
          "DateOfBirth": {
            "type": "string",
            "description": "Date of birth for the tenant. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          },
          "Comment": {
            "type": "string",
            "description": "Comments about the tenant. The value cannot exceed 65,535 characters.",
            "nullable": true
          },
          "EmergencyContact": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveEmergencyContactMessage"
              }
            ],
            "description": "Emergency contact information associated with the tenant.",
            "nullable": true
          },
          "PrimaryAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Address of the tenant."
          },
          "AlternateAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Alternate address of the tenant.",
            "nullable": true
          },
          "MoveOutDate": {
            "type": "string",
            "description": "Move out date for the tenant. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssociationUnitMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Association unit unique identifier.",
            "format": "int32"
          },
          "AssociationId": {
            "type": "integer",
            "description": "Association unique identifier that the unit belongs to.",
            "format": "int32"
          },
          "AssociationName": {
            "type": "string",
            "description": "Association name that the unit belongs to.",
            "nullable": true
          },
          "UnitNumber": {
            "type": "string",
            "description": "Unit number.",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "Unit address.",
            "nullable": true
          },
          "UnitBedrooms": {
            "enum": [
              "NotSet",
              "Studio",
              "OneBed",
              "TwoBed",
              "ThreeBed",
              "FourBed",
              "FiveBed",
              "SixBed",
              "SevenBed",
              "EightBed",
              "NineBedPlus"
            ],
            "type": "string",
            "description": "Number of bedrooms in the unit.",
            "nullable": true
          },
          "UnitBathrooms": {
            "enum": [
              "NotSet",
              "OneBath",
              "OnePointFiveBath",
              "TwoBath",
              "TwoPointFiveBath",
              "ThreeBath",
              "FourBath",
              "FiveBath",
              "FivePlusBath",
              "ThreePointFiveBath",
              "FourPointFiveBath"
            ],
            "type": "string",
            "description": "Number of bathrooms in the unit.",
            "nullable": true
          },
          "UnitSize": {
            "type": "integer",
            "description": "Size of the unit.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This object represents a home owners association unit."
      },
      "AssociationUnitPutMessage": {
        "required": [
          "Address",
          "UnitNumber"
        ],
        "type": "object",
        "properties": {
          "UnitNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Unit Number. Must be unique within the association and cannot exceed 30 characters."
          },
          "UnitSize": {
            "type": "integer",
            "description": "Size of the unit.",
            "format": "int32",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Unit address."
          },
          "UnitBedrooms": {
            "enum": [
              "NotSet",
              "Studio",
              "OneBed",
              "TwoBed",
              "ThreeBed",
              "FourBed",
              "FiveBed",
              "SixBed",
              "SevenBed",
              "EightBed",
              "NineBedPlus"
            ],
            "type": "string",
            "description": "Number of bedrooms in the unit.",
            "nullable": true
          },
          "UnitBathrooms": {
            "enum": [
              "NotSet",
              "OneBath",
              "OnePointFiveBath",
              "TwoBath",
              "TwoPointFiveBath",
              "ThreeBath",
              "FourBath",
              "FiveBath",
              "FivePlusBath",
              "ThreePointFiveBath",
              "FourPointFiveBath"
            ],
            "type": "string",
            "description": "Number of bathrooms in the unit.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssociationUnitsPostMessage": {
        "required": [
          "Address",
          "AssociationId",
          "UnitNumber"
        ],
        "type": "object",
        "properties": {
          "UnitNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Unit number. Must be unique within the association and cannot exceed 30 characters."
          },
          "AssociationId": {
            "type": "integer",
            "description": "Association unique identifier that the unit belongs to.",
            "format": "int32"
          },
          "UnitSize": {
            "type": "integer",
            "description": "Size of the unit.",
            "format": "int32",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Unit address."
          },
          "UnitBedrooms": {
            "enum": [
              "NotSet",
              "Studio",
              "OneBed",
              "TwoBed",
              "ThreeBed",
              "FourBed",
              "FiveBed",
              "SixBed",
              "SevenBed",
              "EightBed",
              "NineBedPlus"
            ],
            "type": "string",
            "description": "Number of bedrooms in the unit.",
            "nullable": true
          },
          "UnitBathrooms": {
            "enum": [
              "NotSet",
              "OneBath",
              "OnePointFiveBath",
              "TwoBath",
              "TwoPointFiveBath",
              "ThreeBath",
              "FourBath",
              "FiveBath",
              "FivePlusBath",
              "ThreePointFiveBath",
              "FourPointFiveBath"
            ],
            "type": "string",
            "description": "Number of bathrooms in the unit.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BankAccountCheckAccountingEntitySaveMessage": {
        "required": [
          "AccountingEntityType",
          "Id"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The accounting entity unique identifier.",
            "format": "int32"
          },
          "AccountingEntityType": {
            "enum": [
              "Association",
              "Rental",
              "Company"
            ],
            "type": "string",
            "description": "The type of accounting entity."
          },
          "UnitId": {
            "type": "integer",
            "description": "The unit unique identifier for the accounting entity.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BankAccountCheckFileMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "File unique identifier.",
            "format": "int32"
          },
          "Title": {
            "type": "string",
            "description": "The title of the file.",
            "nullable": true
          },
          "PhysicalFileName": {
            "type": "string",
            "description": "Physical name of the file on the server.",
            "nullable": true
          },
          "Size": {
            "type": "integer",
            "description": "Size of the file, in kilobytes.",
            "format": "int64"
          },
          "ContentType": {
            "type": "string",
            "description": "MIME type of the file.",
            "nullable": true
          },
          "UploadedDateTime": {
            "type": "string",
            "description": "Date and time the file was uploaded.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "BankAccountCheckLineMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unique identifier of the line item.",
            "format": "int32"
          },
          "GLAccountId": {
            "type": "integer",
            "description": "General ledger account unique identifier the line item is related to.",
            "format": "int32",
            "nullable": true
          },
          "AccountingEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountingEntityMessage"
              }
            ],
            "description": "The type of accounting entity.",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "Memo for the line item.",
            "nullable": true
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "Reference number for the line item.",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "Amount of the line item.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "BankAccountCheckLineSaveMessage": {
        "required": [
          "AccountingEntity",
          "Amount",
          "GLAccountId"
        ],
        "type": "object",
        "properties": {
          "GLAccountId": {
            "type": "integer",
            "description": "The general ledger account identifier under which the line item amount will be recorded.",
            "format": "int32"
          },
          "AccountingEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BankAccountCheckAccountingEntitySaveMessage"
              }
            ],
            "description": "Accounting entity associated with the line item."
          },
          "Memo": {
            "type": "string",
            "description": "Memo for the line item.",
            "nullable": true
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "Reference number for the line item.",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "Amount of the line item.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "BankAccountCheckMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Check unique identifier.",
            "format": "int32"
          },
          "Payee": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BankAccountCheckPayeeMessage"
              }
            ],
            "description": "Payee of the check.",
            "nullable": true
          },
          "CheckNumber": {
            "type": "string",
            "description": "Check number.",
            "nullable": true
          },
          "EntryDate": {
            "type": "string",
            "description": "Date the check was recorded.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the check, if applicable.",
            "nullable": true
          },
          "TotalAmount": {
            "type": "number",
            "description": "Sum of all `Journal.Lines.Amount` entries in the check.",
            "format": "double"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankAccountCheckLineMessage"
            },
            "description": "A collection of line items associated with the check.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BankAccountCheckPayeeMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The payee user identifier.",
            "format": "int32"
          },
          "Type": {
            "enum": [
              "Vendor",
              "RentalOwner"
            ],
            "type": "string",
            "description": "The entity type for the payee."
          },
          "Href": {
            "type": "string",
            "description": "A link to the resource endpoint associated with the payee.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BankAccountCheckPayeeSaveMessage": {
        "required": [
          "Id",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The payee user identifier.",
            "format": "int32"
          },
          "Type": {
            "enum": [
              "Vendor",
              "RentalOwner"
            ],
            "type": "string",
            "description": "The payee entity type."
          }
        },
        "additionalProperties": false
      },
      "BankAccountCheckPostMessage": {
        "required": [
          "EntryDate",
          "Lines",
          "Payee"
        ],
        "type": "object",
        "properties": {
          "Payee": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BankAccountCheckPayeeSaveMessage"
              }
            ],
            "description": "Payee of the transaction."
          },
          "CheckNumber": {
            "type": "string",
            "description": "Check number.",
            "nullable": true
          },
          "EntryDate": {
            "type": "string",
            "description": "Date the check was recorded.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the check, if applicable.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankAccountCheckLineSaveMessage"
            },
            "description": "A collection of line items to associate with the check."
          }
        },
        "additionalProperties": false
      },
      "BankAccountCheckPutMessage": {
        "required": [
          "EntryDate",
          "Lines",
          "Payee"
        ],
        "type": "object",
        "properties": {
          "Payee": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BankAccountCheckPayeeSaveMessage"
              }
            ],
            "description": "Payee of the transaction."
          },
          "CheckNumber": {
            "type": "string",
            "description": "Check number.",
            "nullable": true
          },
          "EntryDate": {
            "type": "string",
            "description": "Date the check was recorded.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the check, if applicable.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankAccountCheckLineSaveMessage"
            },
            "description": "A collection of line items to associate with the check."
          }
        },
        "additionalProperties": false
      },
      "BankAccountDepositLineMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unique identifier of the line item.",
            "format": "int32"
          },
          "AccountingEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountingEntityMessage"
              }
            ],
            "description": "A rental property, association or company to associate with the line item.",
            "nullable": true
          },
          "GLAccountId": {
            "type": "integer",
            "description": "The general ledger account identifier under which the line item amount is recorded.",
            "format": "int32"
          },
          "Memo": {
            "type": "string",
            "description": "Memo for the line item.",
            "nullable": true
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "Reference number for the line item.",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "Amount of the line item.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "BankAccountDepositLineSaveMessage": {
        "type": "object",
        "properties": {
          "GLAccountId": {
            "type": "integer",
            "description": "The general ledger account identifier under which the line item amount will be recorded.",
            "format": "int32",
            "nullable": true
          },
          "AccountingEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountingEntitySaveMessage"
              }
            ],
            "description": "A rental property, association or company to associate with the line item.",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "Memo for the line item.",
            "nullable": true
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "Reference number for the line item.",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "Amount of the line item.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BankAccountDepositMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Deposit unique identifier.",
            "format": "int32"
          },
          "EntryDate": {
            "type": "string",
            "description": "Date the deposit was recorded.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the deposit, if applicable.",
            "nullable": true
          },
          "TotalAmount": {
            "type": "number",
            "description": "Sum of all `Journal.Lines.Amount` entries in the deposit.",
            "format": "double"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankAccountDepositLineMessage"
            },
            "description": "A collection of line items associated with the deposit.",
            "nullable": true
          },
          "PaymentTransactionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A collection of payment transaction identifiers that were included in this deposit transaction.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BankAccountDepositPostMessage": {
        "required": [
          "EntryDate"
        ],
        "type": "object",
        "properties": {
          "EntryDate": {
            "type": "string",
            "description": "Date the deposit was recorded.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the deposit, if applicable.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankAccountDepositLineSaveMessage"
            },
            "description": "A collection of line items to associate with the deposit.",
            "nullable": true
          },
          "PaymentTransactionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A collection of payment transaction identifiers that were included in this deposit transaction.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BankAccountDepositPutMessage": {
        "required": [
          "EntryDate"
        ],
        "type": "object",
        "properties": {
          "EntryDate": {
            "type": "string",
            "description": "Date the deposit was recorded.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the deposit, if applicable.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankAccountDepositLineSaveMessage"
            },
            "description": "A collection of line items associated with the deposit.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BankAccountMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Bank account unique identifier.",
            "format": "int32"
          },
          "GLAccount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GLAccountMessage"
              }
            ],
            "description": "General ledger account.",
            "nullable": true
          },
          "CheckPrintingInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CheckPrintingInfoMessage"
              }
            ],
            "description": "Check printing info.",
            "nullable": true
          },
          "ElectronicPayments": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ElectronicPaymentsMessage"
              }
            ],
            "description": "Electronic Payments.",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "Bank Account name.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Bank account description.",
            "nullable": true
          },
          "BankAccountType": {
            "type": "string",
            "description": "Type of bank account. Values are `Checking` or `Savings`.",
            "nullable": true
          },
          "Country": {
            "enum": [
              "Afghanistan",
              "Akrotiri",
              "Albania",
              "Algeria",
              "AmericanSamoa",
              "Andorra",
              "Angola",
              "Anguilla",
              "Antarctica",
              "AntiguaandBarbuda",
              "Argentina",
              "Armenia",
              "Aruba",
              "AshmoreandCartierIslands",
              "Australia",
              "Austria",
              "Azerbaijan",
              "Bahamas",
              "Bahrain",
              "Bangladesh",
              "Barbados",
              "BassasdaIndia",
              "Belarus",
              "Belgium",
              "Belize",
              "Benin",
              "Bermuda",
              "Bhutan",
              "Bolivia",
              "BosniaandHerzegovina",
              "Botswana",
              "BouvetIsland",
              "Brazil",
              "BritishIndianOceanTerritory",
              "BritishVirginIslands",
              "Brunei",
              "Bulgaria",
              "BurkinaFaso",
              "Burma",
              "Burundi",
              "Cambodia",
              "Cameroon",
              "Canada",
              "CapeVerde",
              "CaymanIslands",
              "CentralAfricanRepublic",
              "Chad",
              "Chile",
              "China",
              "ChristmasIsland",
              "ClippertonIsland",
              "CocosIslands",
              "Colombia",
              "Comoros",
              "DemocraticRepublicOfTheCongo",
              "RepublicOfTheCongo",
              "CookIslands",
              "CoralSeaIslands",
              "CostaRica",
              "CotedIvoire",
              "Croatia",
              "Cuba",
              "Cyprus",
              "CzechRepublic",
              "Denmark",
              "Dhekelia",
              "Djibouti",
              "Dominica",
              "DominicanRepublic",
              "Ecuador",
              "Egypt",
              "ElSalvador",
              "EquatorialGuinea",
              "Eritrea",
              "Estonia",
              "Ethiopia",
              "EuropaIsland",
              "FalklandIslands",
              "FaroeIslands",
              "Fiji",
              "Finland",
              "France",
              "FrenchGuiana",
              "FrenchPolynesia",
              "FrenchSouthernandAntarcticLands",
              "Gabon",
              "Gambia",
              "GazaStrip",
              "Georgia",
              "Germany",
              "Ghana",
              "Gibraltar",
              "GloriosoIslands",
              "Greece",
              "Greenland",
              "Grenada",
              "Guadeloupe",
              "Guam",
              "Guatemala",
              "Guernsey",
              "Guinea",
              "GuineaBissau",
              "Guyana",
              "Haiti",
              "HeardIslandandMcDonaldIslands",
              "VaticanCity",
              "Honduras",
              "HongKong",
              "Hungary",
              "Iceland",
              "India",
              "Indonesia",
              "Iran",
              "Iraq",
              "Ireland",
              "IsleofMan",
              "Israel",
              "Italy",
              "Jamaica",
              "JanMayen",
              "Japan",
              "Jersey",
              "Jordan",
              "JuandeNovaIsland",
              "Kazakhstan",
              "Kenya",
              "Kiribati",
              "NorthKorea",
              "SouthKorea",
              "Kuwait",
              "Kyrgyzstan",
              "Laos",
              "Latvia",
              "Lebanon",
              "Lesotho",
              "Liberia",
              "Libya",
              "Liechtenstein",
              "Lithuania",
              "Luxembourg",
              "Macau",
              "Macedonia",
              "Madagascar",
              "Malawi",
              "Malaysia",
              "Maldives",
              "Mali",
              "Malta",
              "MarshallIslands",
              "Martinique",
              "Mauritania",
              "Mauritius",
              "Mayotte",
              "Mexico",
              "Micronesia",
              "Moldova",
              "Monaco",
              "Mongolia",
              "Montserrat",
              "Morocco",
              "Mozambique",
              "Namibia",
              "Nauru",
              "NavassaIsland",
              "Nepal",
              "Netherlands",
              "NetherlandsAntilles",
              "NewCaledonia",
              "NewZealand",
              "Nicaragua",
              "Niger",
              "Nigeria",
              "Niue",
              "NorfolkIsland",
              "NorthernMarianaIslands",
              "Norway",
              "Oman",
              "Pakistan",
              "Palau",
              "Panama",
              "PapuaNewGuinea",
              "ParacelIslands",
              "Paraguay",
              "Peru",
              "Philippines",
              "PitcairnIslands",
              "Poland",
              "Portugal",
              "PuertoRico",
              "Qatar",
              "Reunion",
              "Romania",
              "Russia",
              "Rwanda",
              "SaintHelena",
              "SaintKittsandNevis",
              "SaintLucia",
              "SaintPierreandMiquelon",
              "SaintVincentandtheGrenadines",
              "Samoa",
              "SanMarino",
              "SaoTomeandPrincipe",
              "SaudiArabia",
              "Senegal",
              "SerbiaandMontenegro",
              "Seychelles",
              "SierraLeone",
              "Singapore",
              "Slovakia",
              "Slovenia",
              "SolomonIslands",
              "Somalia",
              "SouthAfrica",
              "SouthGeorgiaandtheSouthSandwichIslands",
              "Spain",
              "SpratlyIslands",
              "SriLanka",
              "Sudan",
              "Suriname",
              "Svalbard",
              "Swaziland",
              "Sweden",
              "Switzerland",
              "Syria",
              "Taiwan",
              "Tajikistan",
              "Tanzania",
              "Thailand",
              "TimorLeste",
              "Togo",
              "Tokelau",
              "Tonga",
              "TrinidadandTobago",
              "TromelinIsland",
              "Tunisia",
              "Turkey",
              "Turkmenistan",
              "TurksandCaicosIslands",
              "Tuvalu",
              "Uganda",
              "Ukraine",
              "UnitedArabEmirates",
              "UnitedKingdom",
              "UnitedStates",
              "Uruguay",
              "Uzbekistan",
              "Vanuatu",
              "Venezuela",
              "Vietnam",
              "VirginIslands",
              "WakeIsland",
              "WallisandFutuna",
              "WestBank",
              "WesternSahara",
              "Yemen",
              "Zambia",
              "Zimbabwe"
            ],
            "type": "string",
            "description": "The country the bank account is in.",
            "nullable": true
          },
          "AccountNumber": {
            "type": "string",
            "description": "Bank account number.",
            "nullable": true
          },
          "RoutingNumber": {
            "type": "string",
            "description": "Bank routing number.",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "description": "Bank Account Status"
          },
          "Balance": {
            "type": "number",
            "description": "Bank Account balance",
            "format": "double"
          },
          "AccountNumberUnmasked": {
            "type": "string",
            "description": "Unmasked bank account number",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a bank account."
      },
      "BankAccountPostMessage": {
        "required": [
          "BankAccountType",
          "Country",
          "Name"
        ],
        "type": "object",
        "properties": {
          "CheckPrintingInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CheckPrintingInfoPostMessage"
              }
            ],
            "description": "Check printing info.",
            "nullable": true
          },
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "Bank account name."
          },
          "Description": {
            "type": "string",
            "description": "Bank account description.",
            "nullable": true
          },
          "BankAccountType": {
            "enum": [
              "Checking",
              "Savings"
            ],
            "type": "string",
            "description": "Type of bank account."
          },
          "Country": {
            "enum": [
              "Afghanistan",
              "Akrotiri",
              "Albania",
              "Algeria",
              "AmericanSamoa",
              "Andorra",
              "Angola",
              "Anguilla",
              "Antarctica",
              "AntiguaandBarbuda",
              "Argentina",
              "Armenia",
              "Aruba",
              "AshmoreandCartierIslands",
              "Australia",
              "Austria",
              "Azerbaijan",
              "Bahamas",
              "Bahrain",
              "Bangladesh",
              "Barbados",
              "BassasdaIndia",
              "Belarus",
              "Belgium",
              "Belize",
              "Benin",
              "Bermuda",
              "Bhutan",
              "Bolivia",
              "BosniaandHerzegovina",
              "Botswana",
              "BouvetIsland",
              "Brazil",
              "BritishIndianOceanTerritory",
              "BritishVirginIslands",
              "Brunei",
              "Bulgaria",
              "BurkinaFaso",
              "Burma",
              "Burundi",
              "Cambodia",
              "Cameroon",
              "Canada",
              "CapeVerde",
              "CaymanIslands",
              "CentralAfricanRepublic",
              "Chad",
              "Chile",
              "China",
              "ChristmasIsland",
              "ClippertonIsland",
              "CocosIslands",
              "Colombia",
              "Comoros",
              "DemocraticRepublicOfTheCongo",
              "RepublicOfTheCongo",
              "CookIslands",
              "CoralSeaIslands",
              "CostaRica",
              "CotedIvoire",
              "Croatia",
              "Cuba",
              "Cyprus",
              "CzechRepublic",
              "Denmark",
              "Dhekelia",
              "Djibouti",
              "Dominica",
              "DominicanRepublic",
              "Ecuador",
              "Egypt",
              "ElSalvador",
              "EquatorialGuinea",
              "Eritrea",
              "Estonia",
              "Ethiopia",
              "EuropaIsland",
              "FalklandIslands",
              "FaroeIslands",
              "Fiji",
              "Finland",
              "France",
              "FrenchGuiana",
              "FrenchPolynesia",
              "FrenchSouthernandAntarcticLands",
              "Gabon",
              "Gambia",
              "GazaStrip",
              "Georgia",
              "Germany",
              "Ghana",
              "Gibraltar",
              "GloriosoIslands",
              "Greece",
              "Greenland",
              "Grenada",
              "Guadeloupe",
              "Guam",
              "Guatemala",
              "Guernsey",
              "Guinea",
              "GuineaBissau",
              "Guyana",
              "Haiti",
              "HeardIslandandMcDonaldIslands",
              "VaticanCity",
              "Honduras",
              "HongKong",
              "Hungary",
              "Iceland",
              "India",
              "Indonesia",
              "Iran",
              "Iraq",
              "Ireland",
              "IsleofMan",
              "Israel",
              "Italy",
              "Jamaica",
              "JanMayen",
              "Japan",
              "Jersey",
              "Jordan",
              "JuandeNovaIsland",
              "Kazakhstan",
              "Kenya",
              "Kiribati",
              "NorthKorea",
              "SouthKorea",
              "Kuwait",
              "Kyrgyzstan",
              "Laos",
              "Latvia",
              "Lebanon",
              "Lesotho",
              "Liberia",
              "Libya",
              "Liechtenstein",
              "Lithuania",
              "Luxembourg",
              "Macau",
              "Macedonia",
              "Madagascar",
              "Malawi",
              "Malaysia",
              "Maldives",
              "Mali",
              "Malta",
              "MarshallIslands",
              "Martinique",
              "Mauritania",
              "Mauritius",
              "Mayotte",
              "Mexico",
              "Micronesia",
              "Moldova",
              "Monaco",
              "Mongolia",
              "Montserrat",
              "Morocco",
              "Mozambique",
              "Namibia",
              "Nauru",
              "NavassaIsland",
              "Nepal",
              "Netherlands",
              "NetherlandsAntilles",
              "NewCaledonia",
              "NewZealand",
              "Nicaragua",
              "Niger",
              "Nigeria",
              "Niue",
              "NorfolkIsland",
              "NorthernMarianaIslands",
              "Norway",
              "Oman",
              "Pakistan",
              "Palau",
              "Panama",
              "PapuaNewGuinea",
              "ParacelIslands",
              "Paraguay",
              "Peru",
              "Philippines",
              "PitcairnIslands",
              "Poland",
              "Portugal",
              "PuertoRico",
              "Qatar",
              "Reunion",
              "Romania",
              "Russia",
              "Rwanda",
              "SaintHelena",
              "SaintKittsandNevis",
              "SaintLucia",
              "SaintPierreandMiquelon",
              "SaintVincentandtheGrenadines",
              "Samoa",
              "SanMarino",
              "SaoTomeandPrincipe",
              "SaudiArabia",
              "Senegal",
              "SerbiaandMontenegro",
              "Seychelles",
              "SierraLeone",
              "Singapore",
              "Slovakia",
              "Slovenia",
              "SolomonIslands",
              "Somalia",
              "SouthAfrica",
              "SouthGeorgiaandtheSouthSandwichIslands",
              "Spain",
              "SpratlyIslands",
              "SriLanka",
              "Sudan",
              "Suriname",
              "Svalbard",
              "Swaziland",
              "Sweden",
              "Switzerland",
              "Syria",
              "Taiwan",
              "Tajikistan",
              "Tanzania",
              "Thailand",
              "TimorLeste",
              "Togo",
              "Tokelau",
              "Tonga",
              "TrinidadandTobago",
              "TromelinIsland",
              "Tunisia",
              "Turkey",
              "Turkmenistan",
              "TurksandCaicosIslands",
              "Tuvalu",
              "Uganda",
              "Ukraine",
              "UnitedArabEmirates",
              "UnitedKingdom",
              "UnitedStates",
              "Uruguay",
              "Uzbekistan",
              "Vanuatu",
              "Venezuela",
              "Vietnam",
              "VirginIslands",
              "WakeIsland",
              "WallisandFutuna",
              "WestBank",
              "WesternSahara",
              "Yemen",
              "Zambia",
              "Zimbabwe"
            ],
            "type": "string",
            "description": "The country the bank account exists in."
          },
          "AccountNumber": {
            "type": "string",
            "description": "Bank account number.",
            "nullable": true
          },
          "RoutingNumber": {
            "type": "string",
            "description": "Bank routing number. If the bank is in Canada, the routing number should be provided as a zero followed by the three digit institution number, followed by the five digit transit number.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BankAccountPutMessage": {
        "required": [
          "BankAccountType",
          "CheckPrintingInfo",
          "Country",
          "Name"
        ],
        "type": "object",
        "properties": {
          "CheckPrintingInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CheckPrintingInfoPutMessage"
              }
            ],
            "description": "Check printing info."
          },
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "Bank account name."
          },
          "Description": {
            "type": "string",
            "description": "Bank account description.",
            "nullable": true
          },
          "BankAccountType": {
            "enum": [
              "Checking",
              "Savings"
            ],
            "type": "string",
            "description": "Type of bank account."
          },
          "Country": {
            "enum": [
              "Afghanistan",
              "Akrotiri",
              "Albania",
              "Algeria",
              "AmericanSamoa",
              "Andorra",
              "Angola",
              "Anguilla",
              "Antarctica",
              "AntiguaandBarbuda",
              "Argentina",
              "Armenia",
              "Aruba",
              "AshmoreandCartierIslands",
              "Australia",
              "Austria",
              "Azerbaijan",
              "Bahamas",
              "Bahrain",
              "Bangladesh",
              "Barbados",
              "BassasdaIndia",
              "Belarus",
              "Belgium",
              "Belize",
              "Benin",
              "Bermuda",
              "Bhutan",
              "Bolivia",
              "BosniaandHerzegovina",
              "Botswana",
              "BouvetIsland",
              "Brazil",
              "BritishIndianOceanTerritory",
              "BritishVirginIslands",
              "Brunei",
              "Bulgaria",
              "BurkinaFaso",
              "Burma",
              "Burundi",
              "Cambodia",
              "Cameroon",
              "Canada",
              "CapeVerde",
              "CaymanIslands",
              "CentralAfricanRepublic",
              "Chad",
              "Chile",
              "China",
              "ChristmasIsland",
              "ClippertonIsland",
              "CocosIslands",
              "Colombia",
              "Comoros",
              "DemocraticRepublicOfTheCongo",
              "RepublicOfTheCongo",
              "CookIslands",
              "CoralSeaIslands",
              "CostaRica",
              "CotedIvoire",
              "Croatia",
              "Cuba",
              "Cyprus",
              "CzechRepublic",
              "Denmark",
              "Dhekelia",
              "Djibouti",
              "Dominica",
              "DominicanRepublic",
              "Ecuador",
              "Egypt",
              "ElSalvador",
              "EquatorialGuinea",
              "Eritrea",
              "Estonia",
              "Ethiopia",
              "EuropaIsland",
              "FalklandIslands",
              "FaroeIslands",
              "Fiji",
              "Finland",
              "France",
              "FrenchGuiana",
              "FrenchPolynesia",
              "FrenchSouthernandAntarcticLands",
              "Gabon",
              "Gambia",
              "GazaStrip",
              "Georgia",
              "Germany",
              "Ghana",
              "Gibraltar",
              "GloriosoIslands",
              "Greece",
              "Greenland",
              "Grenada",
              "Guadeloupe",
              "Guam",
              "Guatemala",
              "Guernsey",
              "Guinea",
              "GuineaBissau",
              "Guyana",
              "Haiti",
              "HeardIslandandMcDonaldIslands",
              "VaticanCity",
              "Honduras",
              "HongKong",
              "Hungary",
              "Iceland",
              "India",
              "Indonesia",
              "Iran",
              "Iraq",
              "Ireland",
              "IsleofMan",
              "Israel",
              "Italy",
              "Jamaica",
              "JanMayen",
              "Japan",
              "Jersey",
              "Jordan",
              "JuandeNovaIsland",
              "Kazakhstan",
              "Kenya",
              "Kiribati",
              "NorthKorea",
              "SouthKorea",
              "Kuwait",
              "Kyrgyzstan",
              "Laos",
              "Latvia",
              "Lebanon",
              "Lesotho",
              "Liberia",
              "Libya",
              "Liechtenstein",
              "Lithuania",
              "Luxembourg",
              "Macau",
              "Macedonia",
              "Madagascar",
              "Malawi",
              "Malaysia",
              "Maldives",
              "Mali",
              "Malta",
              "MarshallIslands",
              "Martinique",
              "Mauritania",
              "Mauritius",
              "Mayotte",
              "Mexico",
              "Micronesia",
              "Moldova",
              "Monaco",
              "Mongolia",
              "Montserrat",
              "Morocco",
              "Mozambique",
              "Namibia",
              "Nauru",
              "NavassaIsland",
              "Nepal",
              "Netherlands",
              "NetherlandsAntilles",
              "NewCaledonia",
              "NewZealand",
              "Nicaragua",
              "Niger",
              "Nigeria",
              "Niue",
              "NorfolkIsland",
              "NorthernMarianaIslands",
              "Norway",
              "Oman",
              "Pakistan",
              "Palau",
              "Panama",
              "PapuaNewGuinea",
              "ParacelIslands",
              "Paraguay",
              "Peru",
              "Philippines",
              "PitcairnIslands",
              "Poland",
              "Portugal",
              "PuertoRico",
              "Qatar",
              "Reunion",
              "Romania",
              "Russia",
              "Rwanda",
              "SaintHelena",
              "SaintKittsandNevis",
              "SaintLucia",
              "SaintPierreandMiquelon",
              "SaintVincentandtheGrenadines",
              "Samoa",
              "SanMarino",
              "SaoTomeandPrincipe",
              "SaudiArabia",
              "Senegal",
              "SerbiaandMontenegro",
              "Seychelles",
              "SierraLeone",
              "Singapore",
              "Slovakia",
              "Slovenia",
              "SolomonIslands",
              "Somalia",
              "SouthAfrica",
              "SouthGeorgiaandtheSouthSandwichIslands",
              "Spain",
              "SpratlyIslands",
              "SriLanka",
              "Sudan",
              "Suriname",
              "Svalbard",
              "Swaziland",
              "Sweden",
              "Switzerland",
              "Syria",
              "Taiwan",
              "Tajikistan",
              "Tanzania",
              "Thailand",
              "TimorLeste",
              "Togo",
              "Tokelau",
              "Tonga",
              "TrinidadandTobago",
              "TromelinIsland",
              "Tunisia",
              "Turkey",
              "Turkmenistan",
              "TurksandCaicosIslands",
              "Tuvalu",
              "Uganda",
              "Ukraine",
              "UnitedArabEmirates",
              "UnitedKingdom",
              "UnitedStates",
              "Uruguay",
              "Uzbekistan",
              "Vanuatu",
              "Venezuela",
              "Vietnam",
              "VirginIslands",
              "WakeIsland",
              "WallisandFutuna",
              "WestBank",
              "WesternSahara",
              "Yemen",
              "Zambia",
              "Zimbabwe"
            ],
            "type": "string",
            "description": "The country the bank account exists in."
          },
          "AccountNumber": {
            "type": "string",
            "description": "Bank account number.",
            "nullable": true
          },
          "RoutingNumber": {
            "type": "string",
            "description": "Bank routing number. If the bank is in Canada, the routing number should be provided as a zero followed by the three digit institution number, followed by the five digit transit number.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BankAccountQuickDepositMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Quick deposit unique identifier.",
            "format": "int32"
          },
          "EntryDate": {
            "type": "string",
            "description": "Date the quick deposit was recorded.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the quick deposit, if applicable.",
            "nullable": true
          },
          "TotalAmount": {
            "type": "number",
            "description": "Amount included in the quick deposit.",
            "format": "double"
          },
          "AccountingEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountingEntityMessage"
              }
            ],
            "description": "A rental property, association or company to associate with the quick deposit.",
            "nullable": true
          },
          "OffsetGLAccountId": {
            "type": "integer",
            "description": "Offsetting general ledger account identifier. The offsetting general ledger account acts as a label for this deposit.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "BankAccountQuickDepositSaveMessage": {
        "required": [
          "AccountingEntity",
          "Amount",
          "EntryDate",
          "OffsetGLAccountId"
        ],
        "type": "object",
        "properties": {
          "EntryDate": {
            "type": "string",
            "description": "Date the quick deposit was recorded.",
            "format": "date"
          },
          "OffsetGLAccountId": {
            "type": "integer",
            "description": "Offsetting general ledger account identifier. The offsetting general ledger account acts as a label for this deposit. For instance, if you're depositing money collected from a washing machine, you might select the \"Laundry income\" account.",
            "format": "int32"
          },
          "Amount": {
            "type": "number",
            "description": "Amount to be deposited.",
            "format": "double"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the quick deposit.",
            "nullable": true
          },
          "AccountingEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountingEntitySaveMessage"
              }
            ],
            "description": "A rental property, association or company to associate with the quick deposit."
          }
        },
        "additionalProperties": false
      },
      "BankAccountReconciliationBalanceMessage": {
        "type": "object",
        "properties": {
          "Difference": {
            "type": "number",
            "description": "Difference between beginning balance and ending balance of the reconciliation.",
            "format": "double"
          },
          "StatementBalance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BankReconciliationStatementBalanceMessage"
              }
            ],
            "description": "Statement balance of the reconciliation.",
            "nullable": true
          },
          "ClearedBalance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BankReconciliationClearedBalanceMessage"
              }
            ],
            "description": "Cleared balance of the reconciliation.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BankAccountReconciliationBalancePutMessage": {
        "required": [
          "EndingBalance",
          "TotalChecksAndWithdrawals",
          "TotalDepositsAndAdditions"
        ],
        "type": "object",
        "properties": {
          "TotalChecksAndWithdrawals": {
            "type": "number",
            "description": "Total amount of checks and withdrawals of the reconciliation statement balance.",
            "format": "double"
          },
          "TotalDepositsAndAdditions": {
            "type": "number",
            "description": "Total amount of deposits and additions of the reconciliation statement balance.",
            "format": "double"
          },
          "EndingBalance": {
            "type": "number",
            "description": "Ending balance of the reconciliation statement balance.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "BankAccountReconciliationMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Reconciliation unique identifier.",
            "format": "int32"
          },
          "IsFinished": {
            "type": "boolean",
            "description": "Indicates if reconciliation is completed."
          },
          "StatementEndingDate": {
            "type": "string",
            "description": "Date the reconciliation statement ended.",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BankAccountReconciliationTransactionMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Reconciliation transaction unique identifier.",
            "format": "int32"
          },
          "EntryDate": {
            "type": "string",
            "description": "Date the reconciliation transaction entered.",
            "format": "date"
          },
          "TotalAmount": {
            "type": "number",
            "description": "Total amount of the reconciliation transaction.",
            "format": "double"
          },
          "ReconciliationStatus": {
            "enum": [
              "Unknown",
              "UnReconciled",
              "Cleared",
              "Reconciled"
            ],
            "type": "string",
            "description": "Status of the reconciliation transaction."
          },
          "TransactionType": {
            "enum": [
              "Bill",
              "Check",
              "Charge",
              "Payment",
              "Credit",
              "Refund",
              "ApplyDeposit",
              "ElectronicFundsTransfer",
              "Other",
              "Deposit",
              "GeneralJournalEntry",
              "OwnerContribution",
              "ReversePayment",
              "ReverseElectronicFundsTransfer",
              "VendorCredit",
              "RentalApplicationFeePayment",
              "ReverseRentalApplicationFeePayment",
              "ReverseOwnerContribution",
              "VendorRefund",
              "UnreversedPayment",
              "UnreversedElectronicFundsTransfer",
              "UnreversedOwnerContribution",
              "UnreversedRentalApplicationFeePayment",
              "ReversedEftRefund"
            ],
            "type": "string",
            "description": "Type of transaction."
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the transaction, if applicable.",
            "nullable": true
          },
          "PaymentMethod": {
            "enum": [
              "None",
              "Check",
              "Cash",
              "MoneyOrder",
              "CashierCheck",
              "DirectDeposit",
              "CreditCard",
              "ElectronicPayment",
              "RetailCash"
            ],
            "type": "string",
            "description": "The payment method used for the transaction."
          },
          "CheckNumber": {
            "type": "string",
            "description": "Check number associated with the transaction, if applicable.",
            "nullable": true
          },
          "PayeeUserId": {
            "type": "integer",
            "description": "The payee's user unique identifier.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BankAccountTransactionMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Transaction unique identifier.",
            "format": "int32"
          },
          "EntryDate": {
            "type": "string",
            "description": "Date of the transaction.",
            "format": "date"
          },
          "TransactionType": {
            "enum": [
              "Bill",
              "Check",
              "Charge",
              "Payment",
              "Credit",
              "Refund",
              "ApplyDeposit",
              "ElectronicFundsTransfer",
              "Other",
              "Deposit",
              "GeneralJournalEntry",
              "OwnerContribution",
              "ReversePayment",
              "ReverseElectronicFundsTransfer",
              "VendorCredit",
              "RentalApplicationFeePayment",
              "ReverseRentalApplicationFeePayment",
              "ReverseOwnerContribution",
              "VendorRefund",
              "UnreversedPayment",
              "UnreversedElectronicFundsTransfer",
              "UnreversedOwnerContribution",
              "UnreversedRentalApplicationFeePayment",
              "ReversedEftRefund"
            ],
            "type": "string",
            "description": "Type of transaction."
          },
          "CheckNumber": {
            "type": "string",
            "description": "Check number associated with the transaction, if applicable.",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the transaction, if applicable.",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "The total amount of the transaction.",
            "format": "double"
          },
          "ReconciliationStatus": {
            "enum": [
              "Unknown",
              "UnReconciled",
              "Cleared",
              "Reconciled"
            ],
            "type": "string",
            "description": "Indicates the reconciliation status of the transaction."
          },
          "PaidBy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaidByMessage"
            },
            "description": "The entity that made the payment.",
            "nullable": true
          },
          "PaidTo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayeeMessage"
            },
            "description": "The entity that received the payment.",
            "nullable": true
          },
          "Balance": {
            "type": "number",
            "description": "The bank account balance after this transaction was applied.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Bank account transaction."
      },
      "BankAccountTransferAccountingEntitySaveMessage": {
        "required": [
          "AccountingEntityType",
          "Id"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The accounting entity unique identifier.",
            "format": "int32"
          },
          "AccountingEntityType": {
            "enum": [
              "Association",
              "Rental",
              "Company"
            ],
            "type": "string",
            "description": "The type of accounting entity."
          },
          "UnitId": {
            "type": "integer",
            "description": "The unit unique identifier for the accounting entity.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BankAccountTransferMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Transfer unique identifier.",
            "format": "int32"
          },
          "EntryDate": {
            "type": "string",
            "description": "Date the transfer was recorded.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the transfer, if applicable.",
            "nullable": true
          },
          "AccountingEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountingEntityMessage"
              }
            ],
            "description": "A rental property, association or company to associate with the withdrawal.",
            "nullable": true
          },
          "TotalAmount": {
            "type": "number",
            "description": "Total amount of the transfer.",
            "format": "double"
          },
          "TransferToBankAccountId": {
            "type": "integer",
            "description": "Bank account identifier the money was transferred to.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "BankAccountTransferSaveMessage": {
        "required": [
          "AccountingEntity",
          "EntryDate",
          "TotalAmount",
          "TransferToBankAccountId"
        ],
        "type": "object",
        "properties": {
          "EntryDate": {
            "type": "string",
            "description": "The date the transfer was recorded.",
            "format": "date"
          },
          "TransferToBankAccountId": {
            "type": "integer",
            "description": "Bank account identifier the money will be transferred to.",
            "format": "int32"
          },
          "TotalAmount": {
            "type": "number",
            "description": "Total amount to transfer.",
            "format": "double"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the transfer, if applicable.",
            "nullable": true
          },
          "AccountingEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BankAccountTransferAccountingEntitySaveMessage"
              }
            ],
            "description": "A rental property, association or company to associate with the transfer."
          }
        },
        "additionalProperties": false
      },
      "BankAccountWithdrawalMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Withdrawal unique identifier.",
            "format": "int32"
          },
          "EntryDate": {
            "type": "string",
            "description": "Date the withdrawal was recorded.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the withdrawal, if applicable.",
            "nullable": true
          },
          "TotalAmount": {
            "type": "number",
            "description": "Total amount of the withdrawal.",
            "format": "double"
          },
          "AccountingEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountingEntityMessage"
              }
            ],
            "description": "A rental property, association or company associated with the withdrawal.",
            "nullable": true
          },
          "OffsetGLAccountId": {
            "type": "integer",
            "description": "Offsetting general ledger account identifier. The offsetting GL account acts as a label for this withdrawal. For instance, if you're withdrawing money due to a bank fee, you might select the \"Bank fees\" expense account.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "BankAccountWithdrawalSaveMessage": {
        "required": [
          "AccountingEntity",
          "Amount",
          "EntryDate",
          "OffsetGLAccountId"
        ],
        "type": "object",
        "properties": {
          "EntryDate": {
            "type": "string",
            "description": "Date the withdrawal was recorded.",
            "format": "date"
          },
          "OffsetGLAccountId": {
            "type": "integer",
            "description": "Offsetting general ledger account identifier. The offsetting general ledger account acts as a label for this withdrawal. For instance, if you're withdrawing money due to a bank fee, you might select the \"Bank fees\" expense account.",
            "format": "int32"
          },
          "Amount": {
            "type": "number",
            "description": "Withdrawal amount.",
            "format": "double"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the withdrawal, if applicable.",
            "nullable": true
          },
          "AccountingEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountingEntitySaveMessage"
              }
            ],
            "description": "A rental property, association or company to associate with the withdrawal."
          }
        },
        "additionalProperties": false
      },
      "BankLockboxDataAssociationMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Association unique identifier.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Association name.",
            "nullable": true
          },
          "OperatingBankAccountId": {
            "type": "integer",
            "description": "Primary bank account that an association uses for its income and expenses.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "BankLockboxDataAssociationOwnerMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Association owner unique identifier.",
            "format": "int32"
          },
          "FirstName": {
            "type": "string",
            "description": "Association owner first name.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Association owner last name.",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Association owner email.",
            "nullable": true
          },
          "AlternateEmail": {
            "type": "string",
            "description": "Association owner alternate email.",
            "nullable": true
          },
          "PhoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberMessage"
            },
            "description": "List of phone numbers associated with the association owner.",
            "nullable": true
          },
          "DelinquencyStatus": {
            "enum": [
              "NoDelinquency",
              "InCollections",
              "InForeclosure",
              "Foreclosed"
            ],
            "type": "string",
            "description": "Indicates the delinquency status of the association owner."
          },
          "PrimaryAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "Primary address.",
            "nullable": true
          },
          "AlternateAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "Alternate address.",
            "nullable": true
          },
          "MailingPreference": {
            "enum": [
              "PrimaryAddress",
              "AlternateAddress"
            ],
            "type": "string",
            "description": "Indicates the association owner's mailing preference."
          }
        },
        "additionalProperties": false
      },
      "BankLockboxDataMessage": {
        "type": "object",
        "properties": {
          "Association": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BankLockboxDataAssociationMessage"
              }
            ],
            "description": "Association information.",
            "nullable": true
          },
          "OwnershipAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankLockboxDataOwnershipAccountMessage"
            },
            "description": "Information about ownership accounts that belong to the association.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BankLockboxDataOwnershipAccountMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Association ownership account unique identifier.",
            "format": "int32"
          },
          "UnitNumber": {
            "type": "string",
            "description": "Unit number of the unit for this ownership account.",
            "nullable": true
          },
          "UnitAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "Address of the unit for this ownership account.",
            "nullable": true
          },
          "DelinquencyStatus": {
            "enum": [
              "NoDelinquency",
              "InCollections",
              "InForeclosure",
              "Foreclosed"
            ],
            "type": "string",
            "description": "Indicates the delinquency status of the ownership account"
          },
          "AssociationOwners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankLockboxDataAssociationOwnerMessage"
            },
            "description": "Association owners for this ownership account.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BankPendingReconciliationPostMessage": {
        "required": [
          "EndingBalance",
          "StatementEndingDate"
        ],
        "type": "object",
        "properties": {
          "StatementEndingDate": {
            "type": "string",
            "description": "End date for the reconciliation statement period. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "TotalChecksAndWithdrawals": {
            "type": "number",
            "description": "Sum of all checks and withdrawals for the reconciliation.",
            "format": "double",
            "nullable": true
          },
          "TotalDepositsAndAdditions": {
            "type": "number",
            "description": "Sum of all deposits and additions for the reconciliation.",
            "format": "double",
            "nullable": true
          },
          "EndingBalance": {
            "type": "number",
            "description": "Ending balance of the pending reconciliation.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "BankReconciliationClearTransactionsPostMessage": {
        "required": [
          "TransactionIds"
        ],
        "type": "object",
        "properties": {
          "TransactionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The transaction identifiers to clear for the reconciliation"
          }
        },
        "additionalProperties": false
      },
      "BankReconciliationClearedBalanceMessage": {
        "type": "object",
        "properties": {
          "TotalChecksAndWithdrawals": {
            "type": "number",
            "description": "Total amount of checks and withdrawals of the reconciliation cleared balance.",
            "format": "double"
          },
          "TotalDepositsAndAdditions": {
            "type": "number",
            "description": "Total amount of deposits and additions of the reconciliation cleared balance.",
            "format": "double"
          },
          "EndingBalance": {
            "type": "number",
            "description": "Ending balance of the reconciliation cleared balance.",
            "format": "double"
          },
          "BeginningBalance": {
            "type": "number",
            "description": "Beginning balance of the reconciliation cleared balance.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "BankReconciliationPutMessage": {
        "required": [
          "StatementEndingDate"
        ],
        "type": "object",
        "properties": {
          "StatementEndingDate": {
            "type": "string",
            "description": "Date the reconciliation statement ended. The value must be formatted as YYYY-MM-DD.",
            "format": "date"
          }
        },
        "additionalProperties": false
      },
      "BankReconciliationStatementBalanceMessage": {
        "type": "object",
        "properties": {
          "TotalChecksAndWithdrawals": {
            "type": "number",
            "description": "Total amount of checks and withdrawals of the reconciliation statement balance.",
            "format": "double"
          },
          "TotalDepositsAndAdditions": {
            "type": "number",
            "description": "Total amount of deposits and additions of the reconciliation statement balance.",
            "format": "double"
          },
          "EndingBalance": {
            "type": "number",
            "description": "Ending balance of the reconciliation statement balance.",
            "format": "double"
          },
          "BeginningBalance": {
            "type": "number",
            "description": "Beginning balance of the reconciliation statement balance.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "BankReconciliationUnclearTransactionsPostMessage": {
        "required": [
          "TransactionIds"
        ],
        "type": "object",
        "properties": {
          "TransactionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "The transaction identifiers to un-clear for the reconciliation"
          }
        },
        "additionalProperties": false
      },
      "BillFileMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "File unique identifier.",
            "format": "int32"
          },
          "Title": {
            "type": "string",
            "description": "The title of the file.",
            "nullable": true
          },
          "PhysicalFileName": {
            "type": "string",
            "description": "Physical name of the file on the server.",
            "nullable": true
          },
          "Size": {
            "type": "integer",
            "description": "Size of the file, in kilobytes.",
            "format": "int64"
          },
          "ContentType": {
            "type": "string",
            "description": "MIME type of the file.",
            "nullable": true
          },
          "UploadedDateTime": {
            "type": "string",
            "description": "Date and time the file was uploaded.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "BillLineItemPatchMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Bill line item unique identifier.",
            "format": "int32",
            "nullable": true
          },
          "AccountingEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountingEntityPatchMessage"
              }
            ],
            "description": "The accounting entity associated with the bill line item.",
            "nullable": true
          },
          "GlAccountId": {
            "type": "integer",
            "description": "The general ledger account identifier under which the line item amount will be recorded. The following general ledger accounts are not valid: Accounts Payable, Accounts Receivable, Undeposited Funds or any general leger account referencing a bank account.",
            "format": "int32",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "Line item amount.",
            "format": "double",
            "nullable": true
          },
          "Markup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BillMarkupPatchMessage"
              }
            ],
            "description": "Bill markup.",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "Memo for the line item. The value cannot exceed 240 characters.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BillLineMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The bill line item unique identifier.",
            "format": "int32"
          },
          "AccountingEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountingEntityMessage"
              }
            ],
            "description": "The accounting entity associated with the bill line item.",
            "nullable": true
          },
          "GLAccount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GLAccountMessage"
              }
            ],
            "description": "The general ledger account the line item is allocated to.",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "Line item amount.",
            "format": "double"
          },
          "Markup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BillMarkupMessage"
              }
            ],
            "description": "Line item mark up.",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "Description of the line item.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Bill line items."
      },
      "BillLinePostMessage": {
        "required": [
          "AccountingEntity",
          "Amount",
          "GlAccountId"
        ],
        "type": "object",
        "properties": {
          "AccountingEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountingEntitySaveMessage"
              }
            ],
            "description": "The accounting entity associated with the bill line item."
          },
          "GlAccountId": {
            "type": "integer",
            "description": "The general ledger account identifier under which the line item amount will be recorded. The following general ledger accounts are not valid: Accounts Payable, Accounts Receivable, Undeposited Funds or any general leger account referencing a bank account.",
            "format": "int32"
          },
          "Amount": {
            "type": "number",
            "description": "Line item amount.",
            "format": "double"
          },
          "Markup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BillMarkupSaveMessage"
              }
            ],
            "description": "Bill markup.",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "Memo for the line item. The value cannot exceed 240 characters.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Bill line item."
      },
      "BillLinePutMessage": {
        "required": [
          "AccountingEntity",
          "Amount",
          "GlAccountId"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Bill line item unique identifier.",
            "format": "int32",
            "nullable": true
          },
          "AccountingEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountingEntitySaveMessage"
              }
            ],
            "description": "The accounting entity associated with the bill line item."
          },
          "GlAccountId": {
            "type": "integer",
            "description": "The general ledger account identifier under which the line item amount will be recorded. The following general ledger accounts are not valid: Accounts Payable, Accounts Receivable, Undeposited Funds or any general leger account referencing a bank account.",
            "format": "int32"
          },
          "Amount": {
            "type": "number",
            "description": "Line item amount.",
            "format": "double"
          },
          "Markup": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BillMarkupSaveMessage"
              }
            ],
            "description": "Bill markup.",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "Memo for the line item. The value cannot exceed 240 characters.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Bill line item."
      },
      "BillMarkupMessage": {
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "The mark up amount.",
            "format": "double"
          },
          "Type": {
            "enum": [
              "Percent",
              "Amount"
            ],
            "type": "string",
            "description": "The markup type."
          }
        },
        "additionalProperties": false,
        "description": "Bill mark up."
      },
      "BillMarkupPatchMessage": {
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "The mark up amount. The value should be relative to the markup `Type`. If the mark up `Type` is `Percent` the value cannot exceed 100.",
            "format": "double",
            "nullable": true
          },
          "Type": {
            "enum": [
              "Percent",
              "Amount"
            ],
            "type": "string",
            "description": "The markup type.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BillMarkupSaveMessage": {
        "required": [
          "Amount",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "The mark up amount. The value should be relative to the markup `Type`. If the mark up `Type` is `Percent` the value cannot exceed 100.",
            "format": "double"
          },
          "Type": {
            "enum": [
              "Percent",
              "Amount"
            ],
            "type": "string",
            "description": "The markup type."
          }
        },
        "additionalProperties": false,
        "description": "Bill mark up."
      },
      "BillMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Bill unique identifier.",
            "format": "int32"
          },
          "Date": {
            "type": "string",
            "description": "Date of the bill.",
            "format": "date"
          },
          "DueDate": {
            "type": "string",
            "description": "The date that payment is due to the vendor.",
            "format": "date"
          },
          "PaidDate": {
            "type": "string",
            "description": "The date that payment was made to the vendor.",
            "format": "date",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "A description of what the invoice was for.",
            "nullable": true
          },
          "VendorId": {
            "type": "integer",
            "description": "Unique identifier of the vendor who submitted the bill.",
            "format": "int32"
          },
          "WorkOrderId": {
            "type": "integer",
            "description": "Unique identifier of the work order associated with this bill.",
            "format": "int32",
            "nullable": true
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "The invoice or reference number that the vendor assigned to the invoice.",
            "nullable": true
          },
          "ApprovalStatus": {
            "enum": [
              "NotNeeded",
              "ApprovalRequired",
              "Approved",
              "Pending",
              "Rejected"
            ],
            "type": "string",
            "description": "The current approval status for the bill."
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BillLineMessage"
            },
            "description": "A collection of line items associated with the bill.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BillPatchMessage": {
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "The date that an invoice was received. This date typically corresponds with a Bill Received Date, Invoice Date, or Invoice Received Date from an invoice. The date must be formatted as YYYY-MM-DD.",
            "format": "date",
            "nullable": true
          },
          "DueDate": {
            "type": "string",
            "description": "The date that payment for a bill is due to the vendor. The date must be formatted as YYYY-MM-DD.",
            "format": "date",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "A description of what the invoice was for. The value cannot exceed 245 characters.",
            "nullable": true
          },
          "VendorId": {
            "type": "integer",
            "description": "The unique identifier of the vendor or supplier who sent you an invoice.",
            "format": "int32",
            "nullable": true
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "The reference or invoice number that the vendor assigned to the invoice. The value cannot exceed 40 characters.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BillLineItemPatchMessage"
            },
            "description": "A collection of line items associated with the bill.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "example": [
          {
            "op": "replace",
            "path": "/myPath",
            "value": "myNewValue"
          },
          {
            "op": "move",
            "path": "/oldPath",
            "value": "/newPath"
          },
          {
            "op": "test",
            "path": "/myCollection/0/value",
            "value": "42"
          },
          {
            "op": "replace",
            "path": "/myCollection/0/value",
            "value": "77"
          }
        ]
      },
      "BillPaymentAccountingEntityMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The accounting entity unique identifier.",
            "format": "int32"
          },
          "AccountingEntityType": {
            "enum": [
              "Association",
              "Rental",
              "Company"
            ],
            "type": "string",
            "description": "Indicates the type of the accounting entity."
          },
          "UnitId": {
            "type": "integer",
            "description": "The unit unique identifier for the accounting entity",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The accounting entity associated with the payment line item."
      },
      "BillPaymentLineMessage": {
        "type": "object",
        "properties": {
          "AccountingEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BillPaymentAccountingEntityMessage"
              }
            ],
            "description": "The accounting entity associated with the bill line item.",
            "nullable": true
          },
          "GLAccountId": {
            "type": "integer",
            "description": "The general ledger account the line item is allocated to.",
            "format": "int32"
          },
          "Amount": {
            "type": "number",
            "description": "Line item amount.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Payment line items."
      },
      "BillPaymentLinePostMessage": {
        "required": [
          "Amount",
          "BillLineId"
        ],
        "type": "object",
        "properties": {
          "BillLineId": {
            "type": "integer",
            "description": "The unique identifier of the bill line item toward which the payment is being made.",
            "format": "int32"
          },
          "Amount": {
            "type": "number",
            "description": "The amount that is being paid toward the bill line item.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "BillPaymentMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Bill payment unique identifier.",
            "format": "int32"
          },
          "BankAccountId": {
            "type": "integer",
            "description": "Unique identifier of the bank account that the payment was made from.",
            "format": "int32"
          },
          "EntryDate": {
            "type": "string",
            "description": "Date the payment was made.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "A high-level description of the payment.",
            "nullable": true
          },
          "CheckNumber": {
            "type": "string",
            "description": "Number of the check used to make the payment.",
            "nullable": true
          },
          "PaidBillIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A collection of bill identifiers that the payment was applied to.",
            "nullable": true
          },
          "AppliedVendorCredits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppliedVendorCreditMessage"
            },
            "description": "A collection of vendor credits that was applied in the bill payment.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BillPaymentLineMessage"
            },
            "description": "A collection of payment line items.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BillPaymentPostMessage": {
        "required": [
          "BankAccountId",
          "EntryDate",
          "Lines"
        ],
        "type": "object",
        "properties": {
          "BankAccountId": {
            "type": "integer",
            "description": "Unique identifier of the bank account that the payment was made from.",
            "format": "int32"
          },
          "EntryDate": {
            "type": "string",
            "description": "Date the payment was made.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "A high-level description of the payment. The value cannot exceed 240 characters.",
            "nullable": true
          },
          "CheckNumber": {
            "type": "string",
            "description": "Number of the check used to make the payment. The value cannot exceed 30 characters.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BillPaymentLinePostMessage"
            },
            "description": "A collection of payment line items."
          },
          "VendorCreditIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Unique identifiers of the vendor credits to apply to the payment.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BillPostMessage": {
        "required": [
          "Date",
          "DueDate",
          "Lines",
          "VendorId"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "The date that the bill was received. This date typically corresponds with a Bill Received Date, Invoice Date, or Invoice Received Date from an invoice. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "DueDate": {
            "type": "string",
            "description": "The date that payment is due to the vendor. The due date must be after the value in the `Date` field. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "A description of what the invoice was for. The value cannot exceed 245 characters.",
            "nullable": true
          },
          "VendorId": {
            "type": "integer",
            "description": "The unique identifier of the vendor or supplier who sent you an invoice.",
            "format": "int32"
          },
          "WorkOrderId": {
            "type": "integer",
            "description": "Unique identifier of the work order associated with this bill.",
            "format": "int32",
            "nullable": true
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "The reference or invoice number that the vendor assigned to the invoice. The value cannot exceed 40 characters.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BillLinePostMessage"
            },
            "description": "A collection of line items associated with the bill."
          }
        },
        "additionalProperties": false,
        "description": "This object represents a bill."
      },
      "BillPutMessage": {
        "required": [
          "Date",
          "DueDate",
          "VendorId"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "The date that an invoice was received. This date typically corresponds with a Bill Received Date, Invoice Date, or Invoice Received Date from an invoice. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "DueDate": {
            "type": "string",
            "description": "The date that payment for a bill is due to the vendor. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "A description of what the invoice was for. The value cannot exceed 245 characters.",
            "nullable": true
          },
          "VendorId": {
            "type": "integer",
            "description": "The unique identifier of the vendor or supplier who sent you an invoice.",
            "format": "int32"
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "The reference or invoice number that the vendor assigned to the invoice. The value cannot exceed 40 characters.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BillLinePutMessage"
            },
            "description": "A collection of line items associated with the bill.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This object represents a bill."
      },
      "BudgetDetailsMessage": {
        "type": "object",
        "properties": {
          "GLAccountId": {
            "type": "integer",
            "description": "The general ledger account unique identifier the budget is related to.",
            "format": "int32"
          },
          "GLAccountSubType": {
            "enum": [
              "CurrentAsset",
              "FixedAsset",
              "CurrentLiability",
              "LongTermLiability",
              "Equity",
              "Income",
              "NonOperatingIncome",
              "OperatingExpenses",
              "NonOperatingExpenses"
            ],
            "type": "string",
            "description": "Describes the subtype of the general ledger account."
          },
          "TotalAmount": {
            "type": "number",
            "description": "Sum of all monthly amounts in the budget.",
            "format": "double"
          },
          "MonthlyAmounts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BudgetMonthlyAmountsMessage"
              }
            ],
            "description": "The monthly amounts in the budget.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BudgetDetailsSaveMessage": {
        "required": [
          "GLAccountId",
          "MonthlyAmounts"
        ],
        "type": "object",
        "properties": {
          "GLAccountId": {
            "type": "integer",
            "description": "The general ledger account identifier to record the budget details under.",
            "format": "int32"
          },
          "MonthlyAmounts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BudgetMonthlyAmountsSaveMessage"
              }
            ],
            "description": "The budget detailed as monthly amounts"
          }
        },
        "additionalProperties": false
      },
      "BudgetMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Budget unique identifier.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the budget.",
            "nullable": true
          },
          "StartDate": {
            "type": "string",
            "description": "Start date of the budget.",
            "format": "date"
          },
          "EndDate": {
            "type": "string",
            "description": "End date of the budget.",
            "format": "date"
          },
          "Property": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PropertyMessage"
              }
            ],
            "description": "The property details associated with the budget.",
            "nullable": true
          },
          "Details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BudgetDetailsMessage"
            },
            "description": "The details of the budget.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BudgetMonthlyAmountsMessage": {
        "type": "object",
        "properties": {
          "January": {
            "type": "number",
            "description": "The amount for January.",
            "format": "double"
          },
          "February": {
            "type": "number",
            "description": "The amount for February.",
            "format": "double"
          },
          "March": {
            "type": "number",
            "description": "The amount for March.",
            "format": "double"
          },
          "April": {
            "type": "number",
            "description": "The amount for April.",
            "format": "double"
          },
          "May": {
            "type": "number",
            "description": "The amount for May.",
            "format": "double"
          },
          "June": {
            "type": "number",
            "description": "The amount for June.",
            "format": "double"
          },
          "July": {
            "type": "number",
            "description": "The amount for July.",
            "format": "double"
          },
          "August": {
            "type": "number",
            "description": "The amount for August.",
            "format": "double"
          },
          "September": {
            "type": "number",
            "description": "The amount for September.",
            "format": "double"
          },
          "October": {
            "type": "number",
            "description": "The amount for October.",
            "format": "double"
          },
          "November": {
            "type": "number",
            "description": "The amount for November.",
            "format": "double"
          },
          "December": {
            "type": "number",
            "description": "The amount for December.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "BudgetMonthlyAmountsSaveMessage": {
        "required": [
          "April",
          "August",
          "December",
          "February",
          "January",
          "July",
          "June",
          "March",
          "May",
          "November",
          "October",
          "September"
        ],
        "type": "object",
        "properties": {
          "January": {
            "type": "number",
            "description": "The amount for January.",
            "format": "double"
          },
          "February": {
            "type": "number",
            "description": "The amount for February.",
            "format": "double"
          },
          "March": {
            "type": "number",
            "description": "The amount for March.",
            "format": "double"
          },
          "April": {
            "type": "number",
            "description": "The amount for April.",
            "format": "double"
          },
          "May": {
            "type": "number",
            "description": "The amount for May.",
            "format": "double"
          },
          "June": {
            "type": "number",
            "description": "The amount for June.",
            "format": "double"
          },
          "July": {
            "type": "number",
            "description": "The amount for July.",
            "format": "double"
          },
          "August": {
            "type": "number",
            "description": "The amount for August.",
            "format": "double"
          },
          "September": {
            "type": "number",
            "description": "The amount for September.",
            "format": "double"
          },
          "October": {
            "type": "number",
            "description": "The amount for October.",
            "format": "double"
          },
          "November": {
            "type": "number",
            "description": "The amount for November.",
            "format": "double"
          },
          "December": {
            "type": "number",
            "description": "The amount for December.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "BudgetPostMessage": {
        "required": [
          "Details",
          "FiscalYear",
          "Name",
          "PropertyId",
          "StartMonth"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the budget."
          },
          "PropertyId": {
            "type": "integer",
            "description": "Property unique identifier that the budget belongs to.",
            "format": "int32"
          },
          "StartMonth": {
            "enum": [
              "January",
              "February",
              "March",
              "April",
              "May",
              "June",
              "July",
              "August",
              "September",
              "October",
              "November",
              "December"
            ],
            "type": "string",
            "description": "The month the fiscal year starts for the budget."
          },
          "FiscalYear": {
            "type": "integer",
            "description": "The fiscal year for the budget. The value must be formatted as YYYY.",
            "format": "int32"
          },
          "Details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BudgetDetailsSaveMessage"
            },
            "description": "The financial details associated with the budget."
          }
        },
        "additionalProperties": false
      },
      "BudgetPutMessage": {
        "required": [
          "Details",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the budget."
          },
          "Details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BudgetDetailsSaveMessage"
            },
            "description": "The financial details associated with the budget."
          }
        },
        "additionalProperties": false
      },
      "BulkLeaseRecurringTransactionMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unique identifier for the recurring transaction schedule.",
            "format": "int32"
          },
          "LeaseId": {
            "type": "integer",
            "description": "The unique identifier for the corresponding Lease.",
            "format": "int32"
          },
          "TransactionType": {
            "enum": [
              "Bill",
              "Check",
              "Charge",
              "Payment",
              "Credit",
              "Refund",
              "ApplyDeposit",
              "ElectronicFundsTransfer",
              "Other",
              "Deposit",
              "GeneralJournalEntry",
              "OwnerContribution",
              "ReversePayment",
              "ReverseElectronicFundsTransfer",
              "VendorCredit",
              "RentalApplicationFeePayment",
              "ReverseRentalApplicationFeePayment",
              "ReverseOwnerContribution",
              "VendorRefund",
              "UnreversedPayment",
              "UnreversedElectronicFundsTransfer",
              "UnreversedOwnerContribution",
              "UnreversedRentalApplicationFeePayment",
              "ReversedEftRefund"
            ],
            "type": "string",
            "description": "Indicates the type of transaction to be applied to the ledger."
          },
          "IsExpired": {
            "type": "boolean",
            "description": "Indicates if the recurring transaction schedule has expired."
          },
          "RentId": {
            "type": "integer",
            "description": "The unique identifier of the scheduled Rent entity. This field is only applicable for `Charge` transaction types.",
            "format": "int32",
            "nullable": true
          },
          "OffsettingGLAccountId": {
            "type": "integer",
            "description": "Offsetting general ledger account identifier. The offsetting general ledger account acts as the expense account. Note, this field is only applicable for `Credit` transaction types.",
            "format": "int32",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecurringTransactionLineMessage"
            },
            "description": "Line items describing how the transaction is to be allocated when it is processed.",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "Total amount of the recurring transaction.",
            "format": "double"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the recurring transaction.",
            "nullable": true
          },
          "FirstOccurrenceDate": {
            "type": "string",
            "description": "The date the first occurrence of this transaction was processed.",
            "format": "date",
            "nullable": true
          },
          "NextOccurrenceDate": {
            "type": "string",
            "description": "The next date the scheduled transaction will be processed.",
            "format": "date"
          },
          "PostDaysInAdvance": {
            "type": "integer",
            "description": "The number of days ahead of the transaction date the transaction will post on the lease ledger. This setting is used to add the transaction to the ledger ahead of it's due date for visibility. For example, if the `FirstOccurrenceDate` is set to 8/10/2022 and this value is set to 5 then the charge will added to the ledger on 8/5/2022, but will have transaction date of 8/10/2022.",
            "format": "int32"
          },
          "Frequency": {
            "enum": [
              "Monthly",
              "Weekly",
              "Every2Weeks",
              "Quarterly",
              "Yearly",
              "Every2Months",
              "Daily",
              "Every6Months",
              "OneTime"
            ],
            "type": "string",
            "description": "Indicates the frequency at which the recurring transaction is processed."
          },
          "Duration": {
            "enum": [
              "Unspecified",
              "UntilEndOfTerm",
              "SpecificNumber",
              "SpecificDate"
            ],
            "type": "string",
            "description": "Specifies the period of time/occurrences the recurring transaction will be processed. Note, if the `Frequency` field is set to `OneTime` this field should be set to `NULL` as any submitted value will be ignored."
          },
          "CreatedDateTime": {
            "type": "string",
            "description": "The date the transaction was created.",
            "format": "date-time"
          },
          "LastUpdatedDateTime": {
            "type": "string",
            "description": "The date the transaction was last updated.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "BulkOwnershipAccountRecurringTransactionMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unique identifier for the recurring transaction schedule.",
            "format": "int32"
          },
          "OwnershipAccountId": {
            "type": "integer",
            "description": "The unique identifier of the corresponding Ownership Account",
            "format": "int32"
          },
          "TransactionType": {
            "enum": [
              "Bill",
              "Check",
              "Charge",
              "Payment",
              "Credit",
              "Refund",
              "ApplyDeposit",
              "ElectronicFundsTransfer",
              "Other",
              "Deposit",
              "GeneralJournalEntry",
              "OwnerContribution",
              "ReversePayment",
              "ReverseElectronicFundsTransfer",
              "VendorCredit",
              "RentalApplicationFeePayment",
              "ReverseRentalApplicationFeePayment",
              "ReverseOwnerContribution",
              "VendorRefund",
              "UnreversedPayment",
              "UnreversedElectronicFundsTransfer",
              "UnreversedOwnerContribution",
              "UnreversedRentalApplicationFeePayment",
              "ReversedEftRefund"
            ],
            "type": "string",
            "description": "Indicates the type of transaction to be applied to the ledger."
          },
          "IsExpired": {
            "type": "boolean",
            "description": "Indicates if the recurring transaction schedule has expired."
          },
          "RentId": {
            "type": "integer",
            "description": "The unique identifier of the scheduled Rent entity. This field is only applicable for `Charge` transaction types.",
            "format": "int32",
            "nullable": true
          },
          "OffsettingGLAccountId": {
            "type": "integer",
            "description": "Offsetting general ledger account identifier. The offsetting general ledger account acts as the expense account. Note, this field is only applicable for `Credit` transaction types.",
            "format": "int32",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecurringTransactionLineMessage"
            },
            "description": "Line items describing how the transaction is to be allocated when it is processed.",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "Total amount of the recurring transaction.",
            "format": "double"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the recurring transaction.",
            "nullable": true
          },
          "FirstOccurrenceDate": {
            "type": "string",
            "description": "The date the first occurrence of this transaction was processed.",
            "format": "date",
            "nullable": true
          },
          "NextOccurrenceDate": {
            "type": "string",
            "description": "The next date the scheduled transaction will be processed.",
            "format": "date"
          },
          "PostDaysInAdvance": {
            "type": "integer",
            "description": "The number of days ahead of the transaction date the transaction will post on the lease ledger. This setting is used to add the transaction to the ledger ahead of it's due date for visibility. For example, if the `FirstOccurrenceDate` is set to 8/10/2022 and this value is set to 5 then the charge will added to the ledger on 8/5/2022, but will have transaction date of 8/10/2022.",
            "format": "int32"
          },
          "Frequency": {
            "enum": [
              "Monthly",
              "Weekly",
              "Every2Weeks",
              "Quarterly",
              "Yearly",
              "Every2Months",
              "Daily",
              "Every6Months",
              "OneTime"
            ],
            "type": "string",
            "description": "Indicates the frequency at which the recurring transaction is processed."
          },
          "Duration": {
            "enum": [
              "Unspecified",
              "UntilEndOfTerm",
              "SpecificNumber",
              "SpecificDate"
            ],
            "type": "string",
            "description": "Specifies the period of time/occurrences the recurring transaction will be processed. Note, if the `Frequency` field is set to `OneTime` this field should be set to `NULL` as any submitted value will be ignored."
          },
          "CreatedDateTime": {
            "type": "string",
            "description": "The date the transaction was created.",
            "format": "date-time"
          },
          "LastUpdatedDateTime": {
            "type": "string",
            "description": "The date the transaction was last updated.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "CCPaymentsMessage": {
        "type": "object",
        "properties": {
          "PaymentsEnabled": {
            "type": "boolean",
            "description": "Indicates whether credit card payments are enabled in the Buildium Resident Center for all residents of this property."
          }
        },
        "additionalProperties": false,
        "description": "Credit card payment settings."
      },
      "CCPaymentsPutMessage": {
        "required": [
          "PaymentsEnabled"
        ],
        "type": "object",
        "properties": {
          "PaymentsEnabled": {
            "type": "boolean",
            "description": "Indicates whether credit card payments are enabled in the Buildium Resident Center for all residents of this property. Note, to enable credit card payments the operating bank account for the property must have credit card payments provisioned."
          }
        },
        "additionalProperties": false,
        "description": "Credit card payment settings."
      },
      "ChargeLineMessage": {
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Amount of the line item.",
            "format": "double"
          },
          "GLAccountId": {
            "type": "integer",
            "description": "Unique identifier of the general ledger account associated with the charge.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ChargeRecurringTransactionPostMessage": {
        "required": [
          "Amount",
          "FirstOccurrenceDate",
          "Frequency",
          "GLAccountId",
          "PostDaysInAdvance"
        ],
        "type": "object",
        "properties": {
          "GLAccountId": {
            "type": "integer",
            "description": "The general ledger account unique identifier under which the charge amount will be recorded. The general ledger account can only be an income or liability account.",
            "format": "int32"
          },
          "Amount": {
            "type": "number",
            "description": "The amount to record when applying the charge to the lease ledger.",
            "format": "double"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the recurring charge. This value cannot exceed 65 characters.",
            "nullable": true
          },
          "FirstOccurrenceDate": {
            "type": "string",
            "description": "The date the charge will first be processed. This value along with the `Frequency` is also used as the basis for the date set on the transactions in future occurrences.",
            "format": "date"
          },
          "PostDaysInAdvance": {
            "type": "integer",
            "description": "Specifies the number of days ahead of the transaction date the charge will post on the lease ledger. This setting can be used to add the charge to the ledger ahead of the due date for visibility. For example, if the `FirstOccurrenceDate` is set to 8/10/2022 and this value is set to 5 then the charge will added to the ledger on 8/5/2022, but will have transaction date of 8/10/2022. Note, the value must be between 0 to 45 or set to 60, 75 or 90.",
            "format": "int32"
          },
          "Frequency": {
            "enum": [
              "Monthly",
              "Weekly",
              "Every2Weeks",
              "Quarterly",
              "Yearly",
              "Every2Months",
              "Daily",
              "Every6Months",
              "OneTime"
            ],
            "type": "string",
            "description": "Specifies the frequency at which the recurring charge will be processed."
          },
          "Duration": {
            "enum": [
              "UntilEndOfTerm",
              "SpecificNumber"
            ],
            "type": "string",
            "description": "Specifies the period of time/occurrences the recurring payment will be processed. Note, if the `Frequency` field is set to `OneTime` this field should be set to `NULL` as any submitted value will be ignored.",
            "nullable": true
          },
          "NumberOfOccurrences": {
            "type": "integer",
            "description": "Indicates the number of times the recurring transaction should be processed. This value is required if the `Duration` field is set to `SpecificNumber`. This value can not exceed 100.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ChargeRecurringTransactionPutMessage": {
        "required": [
          "Amount",
          "FirstOccurrenceDate",
          "Frequency",
          "GLAccountId",
          "Id",
          "PostDaysInAdvance"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unique identifier for the charge.",
            "format": "int32"
          },
          "GLAccountId": {
            "type": "integer",
            "description": "The general ledger account unique identifier under which the charge amount will be recorded. The general ledger account can only be an income or liability account.",
            "format": "int32"
          },
          "Amount": {
            "type": "number",
            "description": "The amount to record when applying the charge to the lease ledger.",
            "format": "double"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the recurring charge. This value cannot exceed 65 characters.",
            "nullable": true
          },
          "FirstOccurrenceDate": {
            "type": "string",
            "description": "The date the charge will first be processed. This value along with the `Frequency` is also used as the basis for the date set on the transactions in future occurrences.",
            "format": "date"
          },
          "PostDaysInAdvance": {
            "type": "integer",
            "description": "Specifies the number of days ahead of the transaction date the charge will post on the lease ledger. This setting can be used to add the charge to the ledger ahead of the due date for visibility. For example, if the `FirstOccurrenceDate` is set to 8/10/2022 and this value is set to 5 then the charge will added to the ledger on 8/5/2022, but will have transaction date of 8/10/2022. Note, the value must be between 0 to 45 or set to 60, 75 or 90.",
            "format": "int32"
          },
          "Frequency": {
            "enum": [
              "Monthly",
              "Weekly",
              "Every2Weeks",
              "Quarterly",
              "Yearly",
              "Every2Months",
              "Daily",
              "Every6Months",
              "OneTime"
            ],
            "type": "string",
            "description": "Specifies the frequency at which the recurring charge will be processed."
          },
          "Duration": {
            "enum": [
              "UntilEndOfTerm",
              "SpecificNumber"
            ],
            "type": "string",
            "description": "Specifies the period of time/occurrences the recurring payment will be processed. Note, if the `Frequency` field is set to `OneTime` this field should be set to `NULL` as any submitted value will be ignored.",
            "nullable": true
          },
          "NumberOfOccurrences": {
            "type": "integer",
            "description": "Indicates the number of times the recurring transaction should be processed. This value is required if the `Duration` field is set to `SpecificNumber`. This value can not exceed 100.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CheckPrintingInfoMessage": {
        "type": "object",
        "properties": {
          "EnableRemoteCheckPrinting": {
            "type": "boolean",
            "description": "Indicates whether remote check printing is enabled."
          },
          "EnableLocalCheckPrinting": {
            "type": "boolean",
            "description": "Indicates whether local check printing is enabled."
          },
          "CheckLayoutType": {
            "enum": [
              "Voucher1StubBottomMemo1Signature",
              "Voucher2StubBottomMemo1Signature",
              "Voucher2StubBottomMemo2Signatures",
              "Voucher2StubTopMemo",
              "Voucher2StubsPrePrintedLayout"
            ],
            "type": "string",
            "description": "The check layout type."
          },
          "SignatureHeading": {
            "type": "string",
            "description": "The check signature heading.",
            "nullable": true
          },
          "FractionalNumber": {
            "type": "string",
            "description": "The fractional form of the routing number. Typically is used to identify the bank of the check in cases where the MICR is unreadable.",
            "nullable": true
          },
          "BankInformationLine1": {
            "type": "string",
            "description": "Bank information line 1.",
            "nullable": true
          },
          "BankInformationLine2": {
            "type": "string",
            "description": "Bank information line 2.",
            "nullable": true
          },
          "BankInformationLine3": {
            "type": "string",
            "description": "Bank information line 3.",
            "nullable": true
          },
          "BankInformationLine4": {
            "type": "string",
            "description": "Bank information line 4.",
            "nullable": true
          },
          "BankInformationLine5": {
            "type": "string",
            "description": "Bank information line 5.",
            "nullable": true
          },
          "CompanyInformationLine1": {
            "type": "string",
            "description": "Company information 1.",
            "nullable": true
          },
          "CompanyInformationLine2": {
            "type": "string",
            "description": "Company information 2.",
            "nullable": true
          },
          "CompanyInformationLine3": {
            "type": "string",
            "description": "Company information 3.",
            "nullable": true
          },
          "CompanyInformationLine4": {
            "type": "string",
            "description": "Company information 4.",
            "nullable": true
          },
          "CompanyInformationLine5": {
            "type": "string",
            "description": "Company information 5.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CheckPrintingInfoPostMessage": {
        "type": "object",
        "properties": {
          "EnableRemoteCheckPrinting": {
            "type": "boolean",
            "description": "Indicates whether remote check printing is enabled.",
            "nullable": true
          },
          "EnableLocalCheckPrinting": {
            "type": "boolean",
            "description": "Indicates whether local check printing is enabled.",
            "nullable": true
          },
          "CheckLayoutType": {
            "enum": [
              "Voucher1StubBottomMemo1Signature",
              "Voucher2StubBottomMemo1Signature",
              "Voucher2StubBottomMemo2Signatures",
              "Voucher2StubTopMemo",
              "Voucher2StubsPrePrintedLayout"
            ],
            "type": "string",
            "description": "The check layout type. Defaults to `Voucher2StubsPrePrintedLayout` if not specified.",
            "nullable": true
          },
          "SignatureHeading": {
            "type": "string",
            "description": "The signature heading. Defaults to \"VOID AFTER 90 DAYS\" if not specified.",
            "nullable": true
          },
          "FractionalNumber": {
            "type": "string",
            "description": "The fractional form of the routing number. Typically is used to identify the bank of the check in cases where the MICR is unreadable.",
            "nullable": true
          },
          "BankInformationLine1": {
            "type": "string",
            "description": "Bank information line 1.",
            "nullable": true
          },
          "BankInformationLine2": {
            "type": "string",
            "description": "Bank information line 2.",
            "nullable": true
          },
          "BankInformationLine3": {
            "type": "string",
            "description": "Bank information line 3.",
            "nullable": true
          },
          "BankInformationLine4": {
            "type": "string",
            "description": "Bank information line 4.",
            "nullable": true
          },
          "BankInformationLine5": {
            "type": "string",
            "description": "Bank information line 5.",
            "nullable": true
          },
          "CompanyInformationLine1": {
            "type": "string",
            "description": "Company information 1. Defaults to the company name from the account if not specified.",
            "nullable": true
          },
          "CompanyInformationLine2": {
            "type": "string",
            "description": "Company information 2. Defaults to the company address if not specified.",
            "nullable": true
          },
          "CompanyInformationLine3": {
            "type": "string",
            "description": "Company information 3. Defaults to the company address if not specified.",
            "nullable": true
          },
          "CompanyInformationLine4": {
            "type": "string",
            "description": "Company information 4. Defaults to the company address if not specified.",
            "nullable": true
          },
          "CompanyInformationLine5": {
            "type": "string",
            "description": "Company information 5. Defaults to the company address if not specified.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CheckPrintingInfoPutMessage": {
        "required": [
          "CheckLayoutType",
          "EnableLocalCheckPrinting",
          "EnableRemoteCheckPrinting"
        ],
        "type": "object",
        "properties": {
          "EnableRemoteCheckPrinting": {
            "type": "boolean",
            "description": "Indicates whether remote check printing is enabled."
          },
          "EnableLocalCheckPrinting": {
            "type": "boolean",
            "description": "Indicates whether local check printing is enabled."
          },
          "CheckLayoutType": {
            "enum": [
              "Voucher1StubBottomMemo1Signature",
              "Voucher2StubBottomMemo1Signature",
              "Voucher2StubBottomMemo2Signatures",
              "Voucher2StubTopMemo",
              "Voucher2StubsPrePrintedLayout"
            ],
            "type": "string",
            "description": "The check layout type."
          },
          "SignatureHeading": {
            "type": "string",
            "description": "The signature heading.",
            "nullable": true
          },
          "FractionalNumber": {
            "type": "string",
            "description": "The fractional form of the routing number. Typically is used to identify the bank of the check in cases where the MICR is unreadable.",
            "nullable": true
          },
          "BankInformationLine1": {
            "type": "string",
            "description": "Bank information line 1.",
            "nullable": true
          },
          "BankInformationLine2": {
            "type": "string",
            "description": "Bank information line 2.",
            "nullable": true
          },
          "BankInformationLine3": {
            "type": "string",
            "description": "Bank information line 3.",
            "nullable": true
          },
          "BankInformationLine4": {
            "type": "string",
            "description": "Bank information line 4.",
            "nullable": true
          },
          "BankInformationLine5": {
            "type": "string",
            "description": "Bank information line 5.",
            "nullable": true
          },
          "CompanyInformationLine1": {
            "type": "string",
            "description": "Company information 1.",
            "nullable": true
          },
          "CompanyInformationLine2": {
            "type": "string",
            "description": "Company information 2.",
            "nullable": true
          },
          "CompanyInformationLine3": {
            "type": "string",
            "description": "Company information 3.",
            "nullable": true
          },
          "CompanyInformationLine4": {
            "type": "string",
            "description": "Company information 4.",
            "nullable": true
          },
          "CompanyInformationLine5": {
            "type": "string",
            "description": "Company information 5.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ClientLeadCreditRequestMessage": {
        "type": "object",
        "properties": {
          "CreditStatus": {
            "enum": [
              "Approved",
              "Declined",
              "Requested"
            ],
            "type": "string",
            "description": "Indicates the current status of the credit."
          },
          "CreditReason": {
            "enum": [
              "AccidentalFormSubmission",
              "DuplicateLead",
              "InvalidContactInformation",
              "JobSeeker",
              "Tenant",
              "Vendor",
              "WrongPropertyType",
              "WrongZipCode",
              "Other"
            ],
            "type": "string",
            "description": "Indicates the reason a credit was requested."
          },
          "Comments": {
            "type": "string",
            "description": "Additional comments about the credit request.",
            "nullable": true
          },
          "RequestDate": {
            "type": "string",
            "description": "The date the credit was requested.",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Lead credit request."
      },
      "ClientLeadMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Client lead unique identifier.",
            "format": "int32"
          },
          "DateReceived": {
            "type": "string",
            "description": "The date the lead was received.",
            "format": "date-time"
          },
          "Name": {
            "type": "string",
            "description": "The name of the lead.",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "The email of the lead.",
            "nullable": true
          },
          "PhoneNumber": {
            "type": "string",
            "description": "The phone number of the lead.",
            "nullable": true
          },
          "PricePaid": {
            "type": "number",
            "description": "The price paid for the lead.",
            "format": "double"
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "The address of the lead's property.",
            "nullable": true
          },
          "PropertyType": {
            "enum": [
              "SingleHomeUpToThreeHundredThousand",
              "SingleHomeThreeHundredToFiveHundredThousand",
              "SingleHomeFiveHundredThousandToOneMillion",
              "SingleHomeOverOneMillion",
              "MultiFamilyTwoToFourUnits",
              "MultiFamilyFiveToNineteenUnits",
              "MultiFamilyTwentyToFortyNineUnits",
              "MultiFamilyOverOneHundredUnits",
              "OfficeLessThanTenThousandSqFt",
              "OfficeTenThousandToOneHundredThousandSqFt",
              "OfficeOverOneHundredThousandSqFt",
              "RetailLessThanTenThousandSqFt",
              "RetailTenThousandToOneHundredThousandSqFt",
              "RetailOverOneHundredThousandSqFt",
              "LightManufacturingUpToOneHundredThousandSqFt",
              "LightManufacturingOverOneHundredThousandSqFt",
              "WarehouseUpToOneHundredThousandSqFt",
              "WarehouseOverOneHundredThousandSqFt",
              "VacationOneToTwoUnits",
              "VacationOverThreeUnits",
              "ParkingGarage",
              "OtherAssociation",
              "BiotechMissionCritical",
              "HOATwoToFortyNineUnits",
              "HOAFiftyToNinetyNineUnits",
              "HOAOverOneHundredUnits",
              "COATwoToFortyNineUnits",
              "COAFiftyToNinetyNineUnits",
              "COAOverOneHundredUnits",
              "MobileHomeCommunity"
            ],
            "type": "string",
            "description": "The property type of the lead's property."
          },
          "Comments": {
            "type": "string",
            "description": "Additional comments submitted for the lead.",
            "nullable": true
          },
          "LeadStatus": {
            "enum": [
              "Unknown",
              "New",
              "Contacting",
              "Qualifying",
              "Closing",
              "ClosedWon",
              "ClosedLost"
            ],
            "type": "string",
            "description": "The current status of the client lead."
          },
          "CreditRequest": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ClientLeadCreditRequestMessage"
              }
            ],
            "description": "The credit request of the lead. This will be null if no credit has been requested.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a client lead"
      },
      "ContactDetailMessage": {
        "type": "object",
        "properties": {
          "FirstName": {
            "type": "string",
            "description": "Contact first name.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Contact last name.",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Contact email.",
            "nullable": true
          },
          "PhoneNumbers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetailPhoneMessage"
              }
            ],
            "description": "Contact phone numbers.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contact information."
      },
      "ContactDetailPhoneMessage": {
        "type": "object",
        "properties": {
          "Home": {
            "type": "string",
            "description": "Home phone number.",
            "nullable": true
          },
          "Work": {
            "type": "string",
            "description": "Work phone number.",
            "nullable": true
          },
          "Mobile": {
            "type": "string",
            "description": "Mobile phone number.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contact phone numbers."
      },
      "ContactDetailSaveMessage": {
        "required": [
          "FirstName"
        ],
        "type": "object",
        "properties": {
          "FirstName": {
            "minLength": 1,
            "type": "string",
            "description": "First name of the contact."
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the contact.",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Email of the contact.",
            "nullable": true
          },
          "PhoneNumbers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetailSavePhoneMessage"
              }
            ],
            "description": "Contact phone numbers.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The contact details of the person who made the request."
      },
      "ContactDetailSavePhoneMessage": {
        "type": "object",
        "properties": {
          "Home": {
            "type": "string",
            "description": "Home phone number. If provided, the value must be between 10 and 20 characters, ideally formatted as `(123) 123-1234`.",
            "nullable": true
          },
          "Work": {
            "type": "string",
            "description": "Work phone number. If provided, the value must be between 10 and 20 characters, ideally formatted as `(123) 123-1234`.",
            "nullable": true
          },
          "Mobile": {
            "type": "string",
            "description": "Mobile phone number. If provided, the value must be between 10 and 20 characters, ideally formatted as `(123) 123-1234`.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contact phone numbers."
      },
      "ContactInfoMessage": {
        "type": "object",
        "properties": {
          "FirstName": {
            "type": "string",
            "description": "Contact first name.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Contact last name.",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "Contact address.",
            "nullable": true
          },
          "PhoneNumber": {
            "type": "string",
            "description": "Contact phone number.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contact information."
      },
      "ContactRequestTaskMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Request unique identifier.",
            "format": "int32"
          },
          "Category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskCategoryResponseMessage"
              }
            ],
            "description": "Request category.",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "description": "Request title.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Request description.",
            "nullable": true
          },
          "Property": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PropertyMessage"
              }
            ],
            "description": "The property details associated with the request.",
            "nullable": true
          },
          "UnitId": {
            "type": "integer",
            "description": "The unit unique identifier associated with the request.",
            "format": "int32",
            "nullable": true
          },
          "ContactDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetailMessage"
              }
            ],
            "description": "The contact details for the person who submitted the request.",
            "nullable": true
          },
          "AssignedToUserId": {
            "type": "integer",
            "description": "The unique identifier of the staff user assigned to the request.",
            "format": "int32",
            "nullable": true
          },
          "TaskStatus": {
            "enum": [
              "New",
              "InProgress",
              "Completed",
              "Deferred",
              "Closed"
            ],
            "type": "string",
            "description": "Request status."
          },
          "Priority": {
            "enum": [
              "Low",
              "Normal",
              "High"
            ],
            "type": "string",
            "description": "Request priority."
          },
          "DueDate": {
            "type": "string",
            "description": "Request due date.",
            "format": "date",
            "nullable": true
          },
          "CreatedDateTime": {
            "type": "string",
            "description": "The date and time the request was created.",
            "format": "date-time",
            "nullable": true
          },
          "LastUpdatedDateTime": {
            "type": "string",
            "description": "The date and time the request was last updated.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContactRequestTaskPostMessage": {
        "required": [
          "AssignedToUserId",
          "ContactDetail",
          "Priority",
          "TaskStatus",
          "Title"
        ],
        "type": "object",
        "properties": {
          "Title": {
            "minLength": 1,
            "type": "string",
            "description": "Request title. The title can not exceed 127 characters."
          },
          "Description": {
            "type": "string",
            "description": "Request description. The description can not exceed 65500 characters.",
            "nullable": true
          },
          "CategoryId": {
            "type": "integer",
            "description": "The category identifier to assign the request.",
            "format": "int32",
            "nullable": true
          },
          "SubCategoryId": {
            "type": "integer",
            "description": "The subcategory identifier to assign the request.",
            "format": "int32",
            "nullable": true
          },
          "PropertyId": {
            "type": "integer",
            "description": "The unique identifier of property associated with the request. The assigned property must be active.",
            "format": "int32",
            "nullable": true
          },
          "UnitId": {
            "type": "integer",
            "description": "The unique identifier of the unit associated with the request. The unit must be associated with the `PropertyId` specified.",
            "format": "int32",
            "nullable": true
          },
          "AssignedToUserId": {
            "type": "integer",
            "description": "The unique identifier of the staff user assigned to the request. The user must be a `Staff` user type.",
            "format": "int32"
          },
          "TaskStatus": {
            "enum": [
              "New",
              "InProgress",
              "Completed",
              "Deferred",
              "Closed"
            ],
            "type": "string",
            "description": "Request status."
          },
          "Priority": {
            "enum": [
              "Low",
              "Normal",
              "High"
            ],
            "type": "string",
            "description": "Request priority."
          },
          "DueDate": {
            "type": "string",
            "description": "Request due date. The date must be formatted as YYYY-MM-DD.",
            "format": "date",
            "nullable": true
          },
          "ContactDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetailSaveMessage"
              }
            ],
            "description": "The contact details of the person who made the request."
          }
        },
        "additionalProperties": false
      },
      "ContactRequestTaskPutMessage": {
        "required": [
          "AssignedToUserId",
          "ContactDetail",
          "Priority",
          "TaskStatus",
          "Title"
        ],
        "type": "object",
        "properties": {
          "Title": {
            "minLength": 1,
            "type": "string",
            "description": "Request title. The title can not exceed 127 characters."
          },
          "Message": {
            "type": "string",
            "description": "Description of the request update. The message can not exceed 65500 characters.",
            "nullable": true
          },
          "CategoryId": {
            "type": "integer",
            "description": "The category identifier to assign the request.",
            "format": "int32",
            "nullable": true
          },
          "SubCategoryId": {
            "type": "integer",
            "description": "The subcategory identifier to assign the request.",
            "format": "int32",
            "nullable": true
          },
          "PropertyId": {
            "type": "integer",
            "description": "The unique identifier of property associated with the request. The assigned property must be active.",
            "format": "int32",
            "nullable": true
          },
          "UnitId": {
            "type": "integer",
            "description": "The unique identifier of the unit associated with the request. The unit must be associated with the `PropertyId` specified.",
            "format": "int32",
            "nullable": true
          },
          "AssignedToUserId": {
            "type": "integer",
            "description": "The unique identifier of the staff user assigned to the request. The user must be a `Staff` user type.",
            "format": "int32"
          },
          "TaskStatus": {
            "enum": [
              "New",
              "InProgress",
              "Completed",
              "Deferred",
              "Closed"
            ],
            "type": "string",
            "description": "Request status."
          },
          "Priority": {
            "enum": [
              "Low",
              "Normal",
              "High"
            ],
            "type": "string",
            "description": "Request priority."
          },
          "DueDate": {
            "type": "string",
            "description": "Request due date. The date must be formatted as YYYY-MM-DD.",
            "format": "date",
            "nullable": true
          },
          "ContactDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactDetailSaveMessage"
              }
            ],
            "description": "The contact details."
          }
        },
        "additionalProperties": false
      },
      "CosignerMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Cosigner unique identifier.",
            "format": "int32"
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the cosigner.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the cosigner.",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Email for the cosigner.",
            "nullable": true
          },
          "AlternateEmail": {
            "type": "string",
            "description": "Alternate Email for the cosigner.",
            "nullable": true
          },
          "PhoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberMessage"
            },
            "description": "List of phone numbers for the cosigner.",
            "nullable": true
          },
          "CreatedDateTime": {
            "type": "string",
            "description": "Created date of this cosigner record.",
            "format": "date-time",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "Address of the cosigner.",
            "nullable": true
          },
          "AlternateAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "Alternate address for the cosigner.",
            "nullable": true
          },
          "MailingPreference": {
            "enum": [
              "PrimaryAddress",
              "AlternateAddress"
            ],
            "type": "string",
            "description": "Mailing preference for the cosigner."
          }
        },
        "additionalProperties": false,
        "description": "This object represents a rental property cosigner."
      },
      "CreatedByUserMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "User unique identifier.",
            "format": "int32"
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the user.",
            "nullable": true
          },
          "Href": {
            "type": "string",
            "description": "A link to the user resource.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreditRecurringTransactionPostMessage": {
        "required": [
          "CreditType",
          "FirstOccurrenceDate",
          "Frequency",
          "PostDaysInAdvance"
        ],
        "type": "object",
        "properties": {
          "CreditType": {
            "enum": [
              "WaiveUnpaid",
              "Exchange",
              "PreviouslyDeposited"
            ],
            "type": "string",
            "description": "Indicates how the credit will be applied.\r\n<ul><li>WaiveUnpaid - This credit type allows for reversing one or more charges without losing record of what has changed.</li><li>Exchange - This credit type allows for one of the following: 1) Reimburse a resident for a out-of-pocket expense, 2) Compensate for a service, 3) Write-off a resident balance considered uncollectable.</li><li>PreviouslyDeposited - This credit type allows for issuing a credit against payments that have already been deposited.</li></ul>"
          },
          "OffsettingGLAccountId": {
            "type": "integer",
            "description": "Sets the offsetting general ledger account identifier for the credit.\r\n\r\nThis value must be provided when the `CreditType` field is set to `Exchange` or `PreviouslyDeposited`.\r\n\r\nWhen the `CreditType` is `Exchange` this must be an *expense* general ledger account type.\r\n\r\nWhen the `CreditType` is `PreviouslyDeposited` this must be an *equity* general ledger account type.",
            "format": "int32",
            "nullable": true
          },
          "PostingRuleGlAccountId": {
            "type": "integer",
            "description": "Indicates whether to apply a posting rule when processing the transaction that would only record the credit if a prior payment has been made.\r\n\r\n\r\n\r\nSet the field value to the <b>Rent Income</b> general ledger account identifier if the credit should only be recorded when a payment was made and applied to the <b>Rent Income</b> general ledger account.\r\n\r\n\r\n\r\nSet the field value to the <b>Accounts Receivable</b> general ledger account identifier if the credit should only be recorded when a payment was made and applied to *any* general ledger account.\r\n\r\n\r\n\r\nSet the field value to <b>null</b> to always record the credit.",
            "format": "int32",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecurringTransactionLinePostMessage"
            },
            "description": "Line items describing how the credit is to be allocated when the recurring credit is processed.",
            "nullable": true
          },
          "PostDaysInAdvance": {
            "type": "integer",
            "description": "Specifies the number of days ahead of the transaction date the credit will post on the lease ledger. This setting can be used to add the credit to the ledger ahead of the due date for visibility. For example, if the `FirstOccurrenceDate` is set to 8/10/2022 and this value is set to 5 then the charge will added to the ledger on 8/5/2022, but will have transaction date of 8/10/2022. Note, the value must be between 0 to 45 or set to 60, 75 or 90.",
            "format": "int32"
          },
          "Frequency": {
            "enum": [
              "Monthly",
              "Weekly",
              "Every2Weeks",
              "Quarterly",
              "Yearly",
              "Every2Months",
              "Daily",
              "Every6Months",
              "OneTime"
            ],
            "type": "string",
            "description": "Specifies the frequency at which the recurring credit will be processed."
          },
          "Duration": {
            "enum": [
              "UntilEndOfTerm",
              "SpecificNumber"
            ],
            "type": "string",
            "description": "Specifies the period of time/occurrences the recurring credit will be processed. Note, if the `Frequency` field is set to `OneTime` this field should be set to `NULL` as any submitted value will be ignored.",
            "nullable": true
          },
          "NumberOfOccurrences": {
            "type": "integer",
            "description": "Indicates the number of times the recurring credit should be processed. This value is required if the `Duration` field is set to `SpecificNumber`. This value can not exceed 100.",
            "format": "int32",
            "nullable": true
          },
          "FirstOccurrenceDate": {
            "type": "string",
            "description": "The date the credit will first be processed. This value along with the `Frequency` is also used as the basis for the date set on the transactions in future occurrences.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the recurring credit. This value cannot exceed 65 characters.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DepositDetailMessage": {
        "type": "object",
        "properties": {
          "BankGLAccountId": {
            "type": "integer",
            "description": "Bank account general ledger identifier.",
            "format": "int32",
            "nullable": true
          },
          "PaymentTransactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentTransactionsMessage"
            },
            "description": "Collection of payments that were included in the bank deposit transaction.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Deposit details."
      },
      "EFTPaymentsMessage": {
        "type": "object",
        "properties": {
          "PaymentsEnabled": {
            "type": "boolean",
            "description": "Indicates whether EFT payments are enabled in the Buildium Resident Center for all residents of this property."
          }
        },
        "additionalProperties": false,
        "description": "Electronic payment settings."
      },
      "EFTPaymentsPutMessage": {
        "required": [
          "PaymentsEnabled"
        ],
        "type": "object",
        "properties": {
          "PaymentsEnabled": {
            "type": "boolean",
            "description": "Indicates whether EFT payments are enabled in the Buildium Resident Center for all residents of this property. Note, to enable EFT payments the operating bank account for the property must have EFT payments provisioned."
          }
        },
        "additionalProperties": false,
        "description": "Electronic payment settings."
      },
      "EPaySettingsMessage": {
        "type": "object",
        "properties": {
          "EFTPayments": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EFTPaymentsMessage"
              }
            ],
            "description": "The property EFT payment settings.",
            "nullable": true
          },
          "CreditCardPayments": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CCPaymentsMessage"
              }
            ],
            "description": "The property credit card payment settings.",
            "nullable": true
          },
          "OfflinePayments": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OfflinePaymentsMessage"
              }
            ],
            "description": "The property offline payment settings.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EPaySettingsPutMessage": {
        "required": [
          "CreditCardPayments",
          "EFTPayments",
          "OfflinePayments"
        ],
        "type": "object",
        "properties": {
          "EFTPayments": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EFTPaymentsPutMessage"
              }
            ],
            "description": "The property EFT payment settings."
          },
          "CreditCardPayments": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CCPaymentsPutMessage"
              }
            ],
            "description": "The property credit card payment settings."
          },
          "OfflinePayments": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OfflinePaymentsPutMessage"
              }
            ],
            "description": "The property offline payment settings."
          }
        },
        "additionalProperties": false
      },
      "ElectronicPaymentsMessage": {
        "type": "object",
        "properties": {
          "DebitTransactionLimit": {
            "type": "number",
            "description": "Debit transaction limit",
            "format": "double"
          },
          "CreditTransactionLimit": {
            "type": "number",
            "description": "Credit transaction limit",
            "format": "double"
          },
          "DebitMonthlyLimit": {
            "type": "number",
            "description": "Monthly debt limit",
            "format": "double"
          },
          "CreditMonthlyLimit": {
            "type": "number",
            "description": "Monthly credit limit",
            "format": "double"
          },
          "ResidentEFTConvienceFeeAmount": {
            "type": "number",
            "description": "Fee charged per transaction by EFT",
            "format": "double",
            "nullable": true
          },
          "ResidentCreditCardConvenienceFeeAmount": {
            "type": "number",
            "description": "Fee charged per transaction by Credit Card",
            "format": "double",
            "nullable": true
          },
          "CreditCardServiceFeePercentage": {
            "type": "number",
            "description": "Fee charged for using a Credit Card in transactions",
            "format": "double",
            "nullable": true
          },
          "IsCreditCardServiceFeePaidByResident": {
            "type": "boolean",
            "description": "Whether the credit card service fee is paid by residents",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmailMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Email unique identifier.",
            "format": "int32"
          },
          "SentDateTime": {
            "type": "string",
            "description": "The date and time the email was sent.",
            "format": "date-time"
          },
          "Subject": {
            "type": "string",
            "description": "Email subject.",
            "nullable": true
          },
          "Sender": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmailSenderMessage"
              }
            ],
            "description": "User who sent the email.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmailPostMessage": {
        "required": [
          "ExcludeDelinquentRecipients",
          "IncludeAlternateEmails",
          "IncludeAssociationTenants",
          "Subject",
          "TemplateId"
        ],
        "type": "object",
        "properties": {
          "TemplateId": {
            "type": "integer",
            "description": "Unique identifier of the email template to use for the body of the email. Any tokens present in the template will be replaced based on the recipient(s) of the email.\r\nThe following email templates cannot be used:\r\n<ul><li>1 (Tenant Statement)</li><li>2 (Homeowner Statement)</li><li>3 (Rental Owner Statement)</li><li>123 (Association Tenant Invoice)</li><li>124 (Rental Tenant Invoice)</li></ul>",
            "format": "int32"
          },
          "Subject": {
            "minLength": 1,
            "type": "string",
            "description": "Email subject."
          },
          "IncludeAlternateEmails": {
            "type": "boolean",
            "description": "Indicates whether to send the email to the recipient's primary and alternate email addresses."
          },
          "ExcludeDelinquentRecipients": {
            "type": "boolean",
            "description": "Indicates whether to exclude sending emails to association owners that are flagged as delinquent. This only applies to association recipients."
          },
          "IncludeAssociationTenants": {
            "type": "boolean",
            "description": "Indicates whether to include association tenants. Only applies to association properties."
          },
          "PropertyIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A list of association and/or rental property unique identifiers to send the email to. Cannot be populated if 'RecipientIds' is present.",
            "nullable": true
          },
          "RecipientIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A list of individual unique identifiers to send the email to. Cannot be populated if 'PropertyIds' is present.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmailRecipientMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Recipient unique identifier.",
            "format": "int32",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "Name of the recipient.",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Email address of the recipient.",
            "nullable": true
          },
          "RecipientType": {
            "enum": [
              "Tenant",
              "AssociationOwner",
              "RentalOwner",
              "AssociationTenant",
              "Applicant",
              "Vendor",
              "Staff",
              "Unknown"
            ],
            "type": "string",
            "description": "The type of recipient."
          },
          "Href": {
            "type": "string",
            "description": "A link to the resource associated with the recipient.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmailSenderMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "User unique identifier.",
            "format": "int32"
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the user.",
            "nullable": true
          },
          "Href": {
            "type": "string",
            "description": "A link to the user resource.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EmergencyContactMessage": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Emergency contact name",
            "nullable": true
          },
          "RelationshipDescription": {
            "type": "string",
            "description": "Emergency contact relationship to the person.",
            "nullable": true
          },
          "Phone": {
            "type": "string",
            "description": "Emergency contact phone number",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Emergency contact email address.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents an emergency contact."
      },
      "FileCategoryMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "File category unique identifier.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the file category.",
            "nullable": true
          },
          "IsEditable": {
            "type": "boolean",
            "description": "Indicates whether the category is editable."
          }
        },
        "additionalProperties": false,
        "description": "File category."
      },
      "FileCategoryPostMessage": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the file category. The value cannot exceed 100 characters."
          }
        },
        "additionalProperties": false,
        "description": "File category."
      },
      "FileCategoryPutMessage": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the file category. The value cannot exceed 100 characters."
          }
        },
        "additionalProperties": false,
        "description": "File Category"
      },
      "FileDownloadMessage": {
        "type": "object",
        "properties": {
          "DownloadUrl": {
            "type": "string",
            "description": "A transient URL that can be used to download the requested file. This URL expires after 5 minutes.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FileEntityMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Entity unique identifier.",
            "format": "int32",
            "nullable": true
          },
          "EntityType": {
            "enum": [
              "Unknown",
              "Account",
              "Association",
              "AssociationOwner",
              "AssociationUnit",
              "Lease",
              "OwnershipAccount",
              "PublicAsset",
              "Rental",
              "RentalOwner",
              "RentalUnit",
              "Tenant",
              "Vendor"
            ],
            "type": "string",
            "description": "The entity type."
          },
          "Href": {
            "type": "string",
            "description": "A link to the entity resource.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The entity the file is associated to."
      },
      "FileMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "File unique identifier.",
            "format": "int32"
          },
          "FileEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileEntityMessage"
              }
            ],
            "description": "The entity associated with the file.",
            "nullable": true
          },
          "CategoryId": {
            "type": "integer",
            "description": "The category identifier assigned to this file.",
            "format": "int32",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "description": "Title of the file.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Description of the file.",
            "nullable": true
          },
          "PhysicalFileName": {
            "type": "string",
            "description": "Physical name of the file on the server.",
            "nullable": true
          },
          "Size": {
            "type": "integer",
            "description": "Size of the file. Unit of measure is bytes.",
            "format": "int32"
          },
          "ContentType": {
            "type": "string",
            "description": "MIME type of the file.",
            "nullable": true
          },
          "UploadedDateTime": {
            "type": "string",
            "description": "Date the file was uploaded.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "FileNamePostMessage": {
        "required": [
          "FileName"
        ],
        "type": "object",
        "properties": {
          "FileName": {
            "minLength": 1,
            "type": "string",
            "description": "Name of file being uploaded. The value can not exceed 255 characters."
          }
        },
        "additionalProperties": false
      },
      "FilePutMessage": {
        "required": [
          "CategoryId",
          "Title"
        ],
        "type": "object",
        "properties": {
          "Title": {
            "minLength": 1,
            "type": "string",
            "description": "The title of the file. The value cannot exceed 255 characters."
          },
          "Description": {
            "type": "string",
            "description": "A description of the file. The value cannot exceed 65000 characters.",
            "nullable": true
          },
          "CategoryId": {
            "type": "integer",
            "description": "The category identifier to assign to this file.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "FileSharingAccountMessage": {
        "type": "object",
        "properties": {
          "AllResidents": {
            "type": "boolean",
            "description": "Indicates whether file is shared with all residents via the Resident Center."
          },
          "PropertyIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A list of rental property unique identifiers whose residents should receive the file.",
            "nullable": true
          },
          "AllRentalOwners": {
            "type": "boolean",
            "description": "Indicates whether file is shared with all rental owners via the portal."
          },
          "RentalOwnerIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A list of rental owner unique identifiers that should receive the file.",
            "nullable": true
          },
          "WebsiteVisitors": {
            "type": "boolean",
            "description": "Indicates whether file is shared with anyone visiting the company's public site."
          }
        },
        "additionalProperties": false,
        "description": "The file share settings for the account file entity type."
      },
      "FileSharingAccountPutMessage": {
        "type": "object",
        "properties": {
          "AllResidents": {
            "type": "boolean",
            "description": "Indicates whether file is shared with all residents via the Resident Center.",
            "nullable": true
          },
          "PropertyIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A list of rental property unique identifiers whose residents should receive the file.",
            "nullable": true
          },
          "AllRentalOwners": {
            "type": "boolean",
            "description": "Indicates whether file is shared with all rental owners via the portal.",
            "nullable": true
          },
          "RentalOwnerIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A list of rental owner unique identifiers that should receive the file.",
            "nullable": true
          },
          "WebsiteVisitors": {
            "type": "boolean",
            "description": "Indicates whether file is shared with anyone visiting the company's public site.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The file share settings for the account file entity type."
      },
      "FileSharingAssociationMessage": {
        "type": "object",
        "properties": {
          "AssociationOwners": {
            "type": "boolean",
            "description": "Indicates whether file is shared with association owners."
          },
          "BoardMembers": {
            "type": "boolean",
            "description": "Indicates whether file is shared with board members of the association. Note: file is automatically shared when file is shared with association owners."
          }
        },
        "additionalProperties": false,
        "description": "The file share settings for the association file entity type."
      },
      "FileSharingAssociationOwnerMessage": {
        "type": "object",
        "properties": {
          "AssociationOwner": {
            "type": "boolean",
            "description": "Indicates whether file is shared with the association owner."
          }
        },
        "additionalProperties": false,
        "description": "The file share settings for the association owner file entity type."
      },
      "FileSharingAssociationOwnerPutMessage": {
        "type": "object",
        "properties": {
          "AssociationOwner": {
            "type": "boolean",
            "description": "Indicates whether file is shared with the association owner.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The file share settings for the association owner file entity type."
      },
      "FileSharingAssociationPutMessage": {
        "type": "object",
        "properties": {
          "AssociationOwners": {
            "type": "boolean",
            "description": "Indicates whether file is shared with association owners.",
            "nullable": true
          },
          "BoardMembers": {
            "type": "boolean",
            "description": "Indicates whether file is shared with board members of the association. Note: file is automatically shared when file is shared with association owners.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The file share settings for the association file entity type."
      },
      "FileSharingAssociationUnitMessage": {
        "type": "object",
        "properties": {
          "AssociationOwners": {
            "type": "boolean",
            "description": "Indicates whether file is shared with association owners."
          },
          "BoardMembers": {
            "type": "boolean",
            "description": "Indicates whether file is shared with board members of the association."
          }
        },
        "additionalProperties": false,
        "description": "The file share settings for the association unit file entity type."
      },
      "FileSharingAssociationUnitPutMessage": {
        "type": "object",
        "properties": {
          "AssociationOwners": {
            "type": "boolean",
            "description": "Indicates whether file is shared with association owners.",
            "nullable": true
          },
          "BoardMembers": {
            "type": "boolean",
            "description": "Indicates whether file is shared with board members of the association.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The file share settings for the association unit file entity type."
      },
      "FileSharingCommitteeMessage": {
        "type": "object",
        "properties": {
          "AssociationOwners": {
            "type": "boolean",
            "description": "Indicates whether file is shared with association owners."
          },
          "BoardMembers": {
            "type": "boolean",
            "description": "Indicates whether file is shared with board members of the association."
          },
          "Committee": {
            "type": "boolean",
            "description": "Indicates whether file is shared with association committee."
          }
        },
        "additionalProperties": false,
        "description": "The file share settings for the committee file entity type."
      },
      "FileSharingCommitteePutMessage": {
        "type": "object",
        "properties": {
          "AssociationOwners": {
            "type": "boolean",
            "description": "Indicates whether file is shared with association owners.",
            "nullable": true
          },
          "BoardMembers": {
            "type": "boolean",
            "description": "Indicates whether file is shared with board members of the association.",
            "nullable": true
          },
          "Committee": {
            "type": "boolean",
            "description": "Indicates whether file is shared with association committee.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The file share settings for the committee file entity type."
      },
      "FileSharingLeaseMessage": {
        "type": "object",
        "properties": {
          "Tenants": {
            "type": "boolean",
            "description": "Indicates whether file is shared with tenants on the lease."
          },
          "RentalOwners": {
            "type": "boolean",
            "description": "Indicates whether file is shared with rental owners of the property."
          }
        },
        "additionalProperties": false,
        "description": "The file share settings for the lease file entity type."
      },
      "FileSharingLeasePutMessage": {
        "type": "object",
        "properties": {
          "Tenants": {
            "type": "boolean",
            "description": "Indicates whether file is shared with tenants on the lease.",
            "nullable": true
          },
          "RentalOwners": {
            "type": "boolean",
            "description": "Indicates whether file is shared with rental owners of the property.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The file share settings for the lease file entity type."
      },
      "FileSharingMessage": {
        "type": "object",
        "properties": {
          "Account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileSharingAccountMessage"
              }
            ],
            "description": "Account file sharing settings.",
            "nullable": true
          },
          "Rental": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileSharingRentalMessage"
              }
            ],
            "description": "Rental file sharing settings.",
            "nullable": true
          },
          "RentalUnit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileSharingRentalUnitMesage"
              }
            ],
            "description": "Rental unit file sharing settings.",
            "nullable": true
          },
          "Lease": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileSharingLeaseMessage"
              }
            ],
            "description": "Lease file sharing settings.",
            "nullable": true
          },
          "Tenant": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileSharingTenantMessage"
              }
            ],
            "description": "Tenant file sharing settings.",
            "nullable": true
          },
          "RentalOwner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileSharingRentalOwnerMessage"
              }
            ],
            "description": "Rental owner file sharing settings.",
            "nullable": true
          },
          "Association": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileSharingAssociationMessage"
              }
            ],
            "description": "Association file sharing settings.",
            "nullable": true
          },
          "AssociationUnit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileSharingAssociationUnitMessage"
              }
            ],
            "description": "Association unit file sharing settings.",
            "nullable": true
          },
          "OwnershipAccount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileSharingOwnershipAccountMessage"
              }
            ],
            "description": "Ownership account file sharing settings.",
            "nullable": true
          },
          "AssociationOwner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileSharingAssociationOwnerMessage"
              }
            ],
            "description": "Association owner file sharing settings.",
            "nullable": true
          },
          "Vendor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileSharingVendorMessage"
              }
            ],
            "description": "Vendor file sharing settings.",
            "nullable": true
          },
          "Committee": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileSharingCommitteeMessage"
              }
            ],
            "description": "Committee file sharing settings.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FileSharingOwnershipAccountMessage": {
        "type": "object",
        "properties": {
          "AssociationOwners": {
            "type": "boolean",
            "description": "Indicates whether file is shared with association owners."
          },
          "BoardMembers": {
            "type": "boolean",
            "description": "Indicates whether file is shared with board members of the association."
          }
        },
        "additionalProperties": false,
        "description": "The file share settings for the ownership account file entity type."
      },
      "FileSharingOwnershipAccountPutMessage": {
        "type": "object",
        "properties": {
          "AssociationOwners": {
            "type": "boolean",
            "description": "Indicates whether file is shared with association owners.",
            "nullable": true
          },
          "BoardMembers": {
            "type": "boolean",
            "description": "Indicates whether file is shared with board members of the association.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The file share settings for the ownership account file entity type."
      },
      "FileSharingPutMessage": {
        "type": "object",
        "properties": {
          "Account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileSharingAccountPutMessage"
              }
            ],
            "description": "Account file sharing settings. Note, can only update this property if the file is an account's file.",
            "nullable": true
          },
          "Rental": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileSharingRentalPutMessage"
              }
            ],
            "description": "Rental file sharing settings. Note, can only update this property if the file is a rental's file.",
            "nullable": true
          },
          "RentalUnit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileSharingRentalUnitPutMesage"
              }
            ],
            "description": "Rental unit file sharing settings. Note, can only update this property if the file is a rental unit's file.",
            "nullable": true
          },
          "Lease": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileSharingLeasePutMessage"
              }
            ],
            "description": "Lease file sharing settings. Note, can only update this property if the file is a lease's file.",
            "nullable": true
          },
          "Tenant": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileSharingTenantPutMessage"
              }
            ],
            "description": "Tenant file sharing settings. Note, can only update this property if the file is a tenant's file.",
            "nullable": true
          },
          "RentalOwner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileSharingRentalOwnerPutMessage"
              }
            ],
            "description": "Rental owner file sharing settings. Note, can only update this property if the file is a rental owner's file.",
            "nullable": true
          },
          "Association": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileSharingAssociationPutMessage"
              }
            ],
            "description": "Association file sharing settings. Note, can only update this property if the file is an association's file.",
            "nullable": true
          },
          "AssociationUnit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileSharingAssociationUnitPutMessage"
              }
            ],
            "description": "Association unit file sharing settings. Note, can only update this property if the file is an association unit's file.",
            "nullable": true
          },
          "OwnershipAccount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileSharingOwnershipAccountPutMessage"
              }
            ],
            "description": "Ownership account file sharing settings. Note, can only update this property if the file is an ownership account's file.",
            "nullable": true
          },
          "AssociationOwner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileSharingAssociationOwnerPutMessage"
              }
            ],
            "description": "Association owner file sharing settings. Note, can only update this property if the file is an association owner's file.",
            "nullable": true
          },
          "Vendor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileSharingVendorPutMessage"
              }
            ],
            "description": "Vendor file sharing settings. Note, can only update this property if the file is a vendor's file.",
            "nullable": true
          },
          "Committee": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FileSharingCommitteePutMessage"
              }
            ],
            "description": "Committee file sharing settings. Note, can only update this property if the file is a committee's file.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FileSharingRentalMessage": {
        "type": "object",
        "properties": {
          "RentalOwners": {
            "type": "boolean",
            "description": "Indicates whether file is shared with rental owners of the property."
          },
          "Tenants": {
            "type": "boolean",
            "description": "Indicates whether file is shared with tenants of the property."
          }
        },
        "additionalProperties": false,
        "description": "The file share settings for the rental file entity type."
      },
      "FileSharingRentalOwnerMessage": {
        "type": "object",
        "properties": {
          "RentalOwner": {
            "type": "boolean",
            "description": "Indicates whether file is shared with rental owner of the property."
          }
        },
        "additionalProperties": false,
        "description": "The file share settings for the rental owner file entity type."
      },
      "FileSharingRentalOwnerPutMessage": {
        "type": "object",
        "properties": {
          "RentalOwner": {
            "type": "boolean",
            "description": "Indicates whether file is shared with the rental owner of the property.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The file share settings for the rental owner file entity type."
      },
      "FileSharingRentalPutMessage": {
        "type": "object",
        "properties": {
          "RentalOwners": {
            "type": "boolean",
            "description": "Indicates whether file is shared with rental owners of the property.",
            "nullable": true
          },
          "Tenants": {
            "type": "boolean",
            "description": "Indicates whether file is shared with tenants of the property.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The file share settings for the rental file entity type."
      },
      "FileSharingRentalUnitMesage": {
        "type": "object",
        "properties": {
          "RentalOwners": {
            "type": "boolean",
            "description": "Indicates whether file is shared with rental owners of the property."
          },
          "Tenants": {
            "type": "boolean",
            "description": "Indicates whether file is shared with tenants of the property."
          }
        },
        "additionalProperties": false,
        "description": "The file share settings for the rental unit file entity type."
      },
      "FileSharingRentalUnitPutMesage": {
        "type": "object",
        "properties": {
          "RentalOwners": {
            "type": "boolean",
            "description": "Indicates whether file is shared with rental owners of the property.",
            "nullable": true
          },
          "Tenants": {
            "type": "boolean",
            "description": "Indicates whether file is shared with tenants of the property.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The file share settings for the rental unit file entity type."
      },
      "FileSharingTenantMessage": {
        "type": "object",
        "properties": {
          "Tenants": {
            "type": "boolean",
            "description": "Indicates whether file is shared with tenants on the lease."
          },
          "RentalOwners": {
            "type": "boolean",
            "description": "Indicates whether file is shared with rental owners of the property."
          }
        },
        "additionalProperties": false,
        "description": "The file share settings for the tenant file entity type."
      },
      "FileSharingTenantPutMessage": {
        "type": "object",
        "properties": {
          "Tenants": {
            "type": "boolean",
            "description": "Indicates whether file is shared with tenants on the lease.",
            "nullable": true
          },
          "RentalOwners": {
            "type": "boolean",
            "description": "Indicates whether file is shared with rental owners of the property.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The file share settings for the tenant file entity type."
      },
      "FileSharingVendorMessage": {
        "type": "object",
        "properties": {
          "Vendor": {
            "type": "boolean",
            "description": "Indicates whether file is shared with the vendor."
          }
        },
        "additionalProperties": false,
        "description": "The file share settings for the vendor file entity type."
      },
      "FileSharingVendorPutMessage": {
        "type": "object",
        "properties": {
          "Vendor": {
            "type": "boolean",
            "description": "Indicates whether file is shared with the vendor.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The file share settings for the vendor file entity type."
      },
      "FileUploadPostMessage": {
        "required": [
          "CategoryId",
          "EntityType",
          "FileName",
          "Title"
        ],
        "type": "object",
        "properties": {
          "EntityType": {
            "enum": [
              "Account",
              "Association",
              "AssociationOwner",
              "AssociationUnit",
              "Lease",
              "OwnershipAccount",
              "PublicAsset",
              "Rental",
              "RentalOwner",
              "RentalUnit",
              "Tenant",
              "Vendor"
            ],
            "type": "string",
            "description": "Specifies the type of entity that `EntityId` refers to."
          },
          "EntityId": {
            "type": "integer",
            "description": "Unique identified of the Entity Type.",
            "format": "int32",
            "nullable": true
          },
          "FileName": {
            "minLength": 1,
            "type": "string",
            "description": "Name of file being uploaded. The value can not exceed 255 characters."
          },
          "Title": {
            "minLength": 1,
            "type": "string",
            "description": "Title of file upload. The value can not exceed 255 characters."
          },
          "Description": {
            "type": "string",
            "description": "Description of file upload. The value can not exceed 1000 characters.",
            "nullable": true
          },
          "CategoryId": {
            "type": "integer",
            "description": "Unique identified of file category.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "FileUploadTicketMessage": {
        "type": "object",
        "properties": {
          "BucketUrl": {
            "type": "string",
            "description": "AWS S3 Bucket Url.",
            "nullable": true
          },
          "FormData": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "AWS Meta Data.",
            "nullable": true
          },
          "PhysicalFileName": {
            "type": "string",
            "description": "The physical file name.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GLAccountBalanceItemMessage": {
        "type": "object",
        "properties": {
          "Balance": {
            "type": "number",
            "description": "The sum of transactions associated with the general ledger account for the given accounting entity.",
            "format": "double"
          },
          "AccountingEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountingEntityMessage"
              }
            ],
            "description": "Accounting entity associated with the balance.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An object that represents an accounting entity's contribution to the general ledger account total balance."
      },
      "GLAccountBalanceMessage": {
        "type": "object",
        "properties": {
          "TotalBalance": {
            "type": "number",
            "description": "The sum of transactions across all accounting entities (rental properties, association properties and your company) that are associated with the given general ledger account.",
            "format": "double"
          },
          "GLAccount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GLAccountMessage"
              }
            ],
            "description": "General ledger account the balance is related to.",
            "nullable": true
          },
          "AccountingEntityBalances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GLAccountBalanceItemMessage"
            },
            "description": "A collection of accounting entity balances that make up the `TotalBalance`.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents the balance amount of a general ledger account."
      },
      "GLAccountMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "General ledger account unique identifier.",
            "format": "int32"
          },
          "AccountNumber": {
            "type": "string",
            "description": "General ledger account number.",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "Name of the general ledger account.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Description of the general ledger account.",
            "nullable": true
          },
          "Type": {
            "enum": [
              "Asset",
              "Liability",
              "Equity",
              "Income",
              "Expense"
            ],
            "type": "string",
            "description": "Describes the type of general ledger account."
          },
          "SubType": {
            "enum": [
              "CurrentAsset",
              "FixedAsset",
              "CurrentLiability",
              "LongTermLiability",
              "Equity",
              "Income",
              "NonOperatingIncome",
              "OperatingExpenses",
              "NonOperatingExpenses"
            ],
            "type": "string",
            "description": "Describes the subtype of the general ledger account."
          },
          "IsDefaultGLAccount": {
            "type": "boolean",
            "description": "Indicates if the general ledger account is a default for auto populating fields."
          },
          "DefaultAccountName": {
            "type": "string",
            "description": "Indicates the original name of the general ledger account if it is a default account.",
            "nullable": true
          },
          "IsContraAccount": {
            "type": "boolean",
            "description": "Indicates whether the account is a contra account."
          },
          "IsBankAccount": {
            "type": "boolean",
            "description": "Indicates whether the account is a bank account."
          },
          "CashFlowClassification": {
            "enum": [
              "OperatingActivities",
              "InvestingActivities",
              "FinancingActivities"
            ],
            "type": "string",
            "description": "Describes the cash flow classification for the general ledger account.",
            "nullable": true
          },
          "ExcludeFromCashBalances": {
            "type": "boolean",
            "description": "Indicates whether transactions associated with the account should be excluded from cash balances."
          },
          "SubAccounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GLAccountMessage"
            },
            "description": "Children general ledger accounts. The relationship only goes one level deep.",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "description": "Indicates whether the account is active."
          },
          "ParentGLAccountId": {
            "type": "integer",
            "description": "Unique identifier of the parent general ledger account, if applicable.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A message that represents a general ledger account."
      },
      "GLAccountPostMessage": {
        "required": [
          "AccountNumber",
          "Name",
          "SubType"
        ],
        "type": "object",
        "properties": {
          "SubType": {
            "enum": [
              "CurrentAsset",
              "FixedAsset",
              "CurrentLiability",
              "LongTermLiability",
              "Equity",
              "Income",
              "NonOperatingIncome",
              "OperatingExpenses",
              "NonOperatingExpenses"
            ],
            "type": "string",
            "description": "Describes the subtype of the general ledger account."
          },
          "IsCashAsset": {
            "type": "boolean",
            "description": "Indicates if an account is a Cash Asset. Can only have a value if SubType is `CurrentAsset`",
            "nullable": true
          },
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the general ledger account. The name cannot exceed 50 characters and must be unique across all general ledger accounts."
          },
          "AccountNumber": {
            "minLength": 1,
            "type": "string",
            "description": "General ledger account number. The account number cannot exceed 12 characters and must be unique across all general ledger accounts."
          },
          "Description": {
            "type": "string",
            "description": "Description of the general ledger account. The description cannot exceed 250 characters.",
            "nullable": true
          },
          "IsContraAccount": {
            "type": "boolean",
            "description": "Indicates whether the account is a contra account. Must be null if `IsCashAsset` field is set to true.",
            "nullable": true
          },
          "CashFlowClassification": {
            "enum": [
              "OperatingActivities",
              "InvestingActivities",
              "FinancingActivities"
            ],
            "type": "string",
            "description": "Describes the cash flow classification for the general ledger account. Must be null if `IsCashAsset` field is set to true.",
            "nullable": true
          },
          "ParentGLAccountId": {
            "type": "integer",
            "description": "Unique identifier of the parent general ledger account. Indicates if this is a sub general ledger account.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GLAccountPutMessage": {
        "required": [
          "Name",
          "SubType"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the general ledger account. The name cannot exceed 50 characters and must be unique across all general ledger accounts."
          },
          "SubType": {
            "enum": [
              "CurrentAsset",
              "FixedAsset",
              "CurrentLiability",
              "LongTermLiability",
              "Equity",
              "Income",
              "NonOperatingIncome",
              "OperatingExpenses",
              "NonOperatingExpenses"
            ],
            "type": "string",
            "description": "Describes the subtype of the general ledger account."
          },
          "ParentGLAccountId": {
            "type": "integer",
            "description": "Unique identifier of the parent general ledger account. Indicates if this is a sub general ledger account.",
            "format": "int32",
            "nullable": true
          },
          "IsCashAsset": {
            "type": "boolean",
            "description": "Indicates if an account is a Cash Asset. Can only have a value if SubType is `CurrentAsset`",
            "nullable": true
          },
          "AccountNumber": {
            "type": "string",
            "description": "General ledger account number. The account number cannot exceed 12 characters and must be unique across all general ledger accounts.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Description of the general ledger account. The description cannot exceed 250 characters.",
            "nullable": true
          },
          "IsContraAccount": {
            "type": "boolean",
            "description": "Indicates whether the account is a contra account. Must be null if `IsCashAsset` field is set to true.",
            "nullable": true
          },
          "CashFlowClassification": {
            "enum": [
              "OperatingActivities",
              "InvestingActivities",
              "FinancingActivities"
            ],
            "type": "string",
            "description": "Describes the cash flow classification for the general ledger account. Must be null if `IsCashAsset` field is set to true.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GLTransactionMessageV1": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "General ledger transaction unique identifier.",
            "format": "int32"
          },
          "Amount": {
            "type": "number",
            "description": "General ledger transaction amount.",
            "format": "double"
          },
          "CheckNumber": {
            "type": "string",
            "description": "General ledger transaction check number.",
            "nullable": true
          },
          "EntryDate": {
            "type": "string",
            "description": "Date the transaction was made.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "General ledger transaction memo.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GeneralJournalEntryLineSaveMessage": {
        "required": [
          "Amount",
          "GLAccountId",
          "PostingType"
        ],
        "type": "object",
        "properties": {
          "GLAccountId": {
            "type": "integer",
            "description": "The general ledger account identifier under which the line item amount will be recorded. Query the General Ledger Account endpoint <a href=\"#operation/AccountingExternalApi_GetAllGLAccounts\">Get All GLAccounts</a> for a listing of available accounts.",
            "format": "int32"
          },
          "Memo": {
            "type": "string",
            "description": "Memo for the line item.",
            "nullable": true
          },
          "PostingType": {
            "enum": [
              "Credit",
              "Debit"
            ],
            "type": "string",
            "description": "The posting type for the line item."
          },
          "Amount": {
            "type": "number",
            "description": "Amount of the line item.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "GeneralJournalEntryPostMessage": {
        "required": [
          "AccountingEntity",
          "Date",
          "Lines"
        ],
        "type": "object",
        "properties": {
          "AccountingEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountingEntitySaveMessage"
              }
            ],
            "description": "A rental property, association or company to associate with the general journal entry."
          },
          "Date": {
            "type": "string",
            "description": "Date of the general journal entry. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "Description of the general journal entry. Must be no longer than 240 characters.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeneralJournalEntryLineSaveMessage"
            },
            "description": "A list of general journal entry lines. At least two lines are required. The total amount of the debit PostingType lines must equal the total of the credit PostingType lines."
          }
        },
        "additionalProperties": false
      },
      "GeneralJournalEntryPutMessage": {
        "required": [
          "AccountingEntity",
          "Date",
          "Lines"
        ],
        "type": "object",
        "properties": {
          "AccountingEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountingEntitySaveMessage"
              }
            ],
            "description": "A rental property, association or company to associate with the general journal entry."
          },
          "Date": {
            "type": "string",
            "description": "Date of the general journal entry. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "Description of the general journal entry. Must be no longer than 240 characters.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeneralJournalEntryLineSaveMessage"
            },
            "description": "A list of general journal entry lines. At least two lines are required. The total amount of the debit PostingType lines must equal the total of the credit PostingType lines."
          }
        },
        "additionalProperties": false
      },
      "GeneralLedgerEntryMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unique identifier of the transaction associated with the entry.",
            "format": "int32"
          },
          "Date": {
            "type": "string",
            "description": "Date of the transaction.",
            "format": "date"
          },
          "Description": {
            "type": "string",
            "description": "Transaction description.",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "Entry amount.",
            "format": "double"
          },
          "Balance": {
            "type": "number",
            "description": "The general ledger account balance after this entry was recorded.",
            "format": "double"
          },
          "TransactionType": {
            "enum": [
              "Bill",
              "Check",
              "Charge",
              "Payment",
              "Credit",
              "Refund",
              "ApplyDeposit",
              "ElectronicFundsTransfer",
              "Other",
              "Deposit",
              "GeneralJournalEntry",
              "OwnerContribution",
              "ReversePayment",
              "ReverseElectronicFundsTransfer",
              "VendorCredit",
              "RentalApplicationFeePayment",
              "ReverseRentalApplicationFeePayment",
              "ReverseOwnerContribution",
              "VendorRefund",
              "UnreversedPayment",
              "UnreversedElectronicFundsTransfer",
              "UnreversedOwnerContribution",
              "UnreversedRentalApplicationFeePayment",
              "ReversedEftRefund"
            ],
            "type": "string",
            "description": "Indicates the type of transaction that occurred."
          },
          "AccountingEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountingEntityMessage"
              }
            ],
            "description": "The accounting entity associated with the transaction.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GeneralLedgerJournalLineMessage": {
        "type": "object",
        "properties": {
          "GLAccount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GLAccountMessage"
              }
            ],
            "description": "General ledger account the line item is related to.",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "Amount of the line item.",
            "format": "double"
          },
          "IsCashPosting": {
            "type": "boolean",
            "description": "Indicates whether the line item is a cash posting."
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "Reference number for the line item.",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "Memo for the line item.",
            "nullable": true
          },
          "AccountingEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountingEntityMessage"
              }
            ],
            "description": "Accounting entity associated with the line item.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a line item for a journal entry."
      },
      "GeneralLedgerJournalMessage": {
        "type": "object",
        "properties": {
          "Memo": {
            "type": "string",
            "description": "Memo associated with the journal.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeneralLedgerJournalLineMessage"
            },
            "description": "A collection of line items associated with the journal.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GeneralLedgerMessage": {
        "type": "object",
        "properties": {
          "GLAccountId": {
            "type": "integer",
            "description": "Unique identifier of the general ledger account associated with the entries.",
            "format": "int32"
          },
          "GLAccountName": {
            "type": "string",
            "description": "Name of the general ledger account associated with the entries.",
            "nullable": true
          },
          "BeginningBalance": {
            "type": "number",
            "description": "The general ledger account balance based on the date range requested.",
            "format": "double"
          },
          "TotalAmount": {
            "type": "number",
            "description": "The sum of the entry amounts that were recorded under this general ledger account within the date range requested.",
            "format": "double"
          },
          "Entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GeneralLedgerEntryMessage"
            },
            "description": "Entries applied to the general ledger account.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GeneralLedgerTransactionMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Transaction unique identifier.",
            "format": "int32"
          },
          "Date": {
            "type": "string",
            "description": "Date of the transaction.",
            "format": "date"
          },
          "TransactionType": {
            "enum": [
              "Bill",
              "Check",
              "Charge",
              "Payment",
              "Credit",
              "Refund",
              "ApplyDeposit",
              "ElectronicFundsTransfer",
              "Other",
              "Deposit",
              "GeneralJournalEntry",
              "OwnerContribution",
              "ReversePayment",
              "ReverseElectronicFundsTransfer",
              "VendorCredit",
              "RentalApplicationFeePayment",
              "ReverseRentalApplicationFeePayment",
              "ReverseOwnerContribution",
              "VendorRefund",
              "UnreversedPayment",
              "UnreversedElectronicFundsTransfer",
              "UnreversedOwnerContribution",
              "UnreversedRentalApplicationFeePayment",
              "ReversedEftRefund"
            ],
            "type": "string",
            "description": "Type of transaction that occurred"
          },
          "TotalAmount": {
            "type": "number",
            "description": "Sum of all `Journal.Lines.Amount` entries in the transaction.",
            "format": "double"
          },
          "CheckNumber": {
            "type": "string",
            "description": "Check number associated with the transaction, if applicable.",
            "nullable": true
          },
          "UnitAgreement": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UnitAgreementMessage"
              }
            ],
            "description": "The unit agreement associated with the transaction, if applicable. Null if value is not set.",
            "nullable": true
          },
          "UnitId": {
            "type": "integer",
            "description": "Unit unique identifier associated with the transaction, if applicable. Null if value is not set.",
            "format": "int32",
            "nullable": true
          },
          "UnitNumber": {
            "type": "string",
            "description": "Unit number associated with the transaction, if applicable. Null if value is not set.",
            "nullable": true
          },
          "PaymentDetail": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PaymentDetailMessage"
              }
            ],
            "description": "The payment details associated with the transaction.",
            "nullable": true
          },
          "DepositDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DepositDetailMessage"
              }
            ],
            "description": "The deposit details associated with the transaction.",
            "nullable": true
          },
          "Application": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplicationReferenceMessage"
              }
            ],
            "description": "The application associated with the transaction in case of an application transaction. Null if it is not an application transaction.",
            "nullable": true
          },
          "Journal": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GeneralLedgerJournalMessage"
              }
            ],
            "description": "Journal associated with the transaction. The journal describes how the transaction should be recorded for accounting purposes.",
            "nullable": true
          },
          "LastUpdatedDateTime": {
            "type": "string",
            "description": "The date and time the transaction was last updated.",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a financial transaction"
      },
      "IJsonTypeInfoResolver": {
        "type": "object",
        "additionalProperties": false
      },
      "ImageReorderRequestPutMessage": {
        "required": [
          "Ids"
        ],
        "type": "object",
        "properties": {
          "Ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Unique identifiers for the images. The request must contain the ids of all images."
          }
        },
        "additionalProperties": false
      },
      "InsuredTenantMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Tenant unique identifier.",
            "format": "int32"
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the tenant.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the tenant.",
            "nullable": true
          },
          "IsPrimaryInsured": {
            "type": "boolean",
            "description": "Indicates whether this tenant is the primary insured person on the policy. This only applies to policies with a `CarrierType` of `MSI`.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InternalTransactionStatusMessage": {
        "type": "object",
        "properties": {
          "IsPending": {
            "type": "boolean",
            "description": "Indicates whether the transaction is pending processing."
          },
          "ResultDate": {
            "type": "string",
            "description": "The date the transaction was processed.",
            "format": "date",
            "nullable": true
          },
          "ResultCode": {
            "type": "string",
            "description": "The result code of the transaction.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This object represents the status for internal transactions"
      },
      "JavaScriptEncoder": {
        "type": "object",
        "properties": {
          "MaxOutputCharactersPerInputCharacter": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "JournalLineMessage": {
        "type": "object",
        "properties": {
          "GLAccount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GLAccountMessage"
              }
            ],
            "description": "General ledger account the line item is related to.",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "Amount of the line item.",
            "format": "double"
          },
          "IsCashPosting": {
            "type": "boolean",
            "description": "Indicates whether the line item is a cash posting."
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "Reference number for the line item.",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "Memo for the line item.",
            "nullable": true
          },
          "PropertyId": {
            "type": "integer",
            "description": "PropertyId associated with the line item.",
            "format": "int32"
          },
          "UnitId": {
            "type": "integer",
            "description": "UnitId associated with the line item.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a line item for a journal entry."
      },
      "JournalMessage": {
        "type": "object",
        "properties": {
          "Memo": {
            "type": "string",
            "description": "Memo associated with the journal.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JournalLineMessage"
            },
            "description": "A collection of line items associated with the journal.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "JsonPatchOperation": {
        "required": [
          "op",
          "path"
        ],
        "type": "object",
        "properties": {
          "op": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "value": {
            "type": "object"
          },
          "from": {
            "type": "string"
          }
        }
      },
      "LastUpdatedByUserMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "User unique identifier.",
            "format": "int32"
          },
          "FirstName": {
            "type": "string",
            "description": "User first name.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "User last name.",
            "nullable": true
          },
          "Href": {
            "type": "string",
            "description": "A link to the user resource.",
            "nullable": true
          },
          "UpdatedDateTime": {
            "type": "string",
            "description": "The date and time the note was last updated.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Last updated details."
      },
      "LeaseAccountDetailMessage": {
        "type": "object",
        "properties": {
          "SecurityDeposit": {
            "type": "number",
            "description": "Security deposit for the lease. Null if no security deposit exists.",
            "format": "double",
            "nullable": true
          },
          "Rent": {
            "type": "number",
            "description": "Rent for the lease. Null if no rent exists.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents lease financial details."
      },
      "LeaseAutoAllocatedPaymentPostMessage": {
        "required": [
          "Date",
          "PaymentMethod",
          "SendEmailReceipt",
          "TotalAmount"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "The date of the transaction. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "PaymentMethod": {
            "enum": [
              "Check",
              "Cash",
              "MoneyOrder",
              "CashierCheck",
              "DirectDeposit",
              "CreditCard",
              "ElectronicPayment"
            ],
            "type": "string",
            "description": "The payment method used for the transaction."
          },
          "PayeeUserId": {
            "type": "integer",
            "description": "The payee's user unique identifier.",
            "format": "int32",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "A brief note describing the reason for the payment. The value cannot exceed 65 characters.",
            "nullable": true
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "The reference Number of the transaction. The value cannot exceed 30 characters.",
            "nullable": true
          },
          "SendEmailReceipt": {
            "type": "boolean",
            "description": "An indicator for whether or not to send an email receipt to the payee. If the payee does not have an email address set, no email will be sent."
          },
          "TotalAmount": {
            "type": "number",
            "description": "The total amount of the payment being created.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "LeaseChargeLineMessage": {
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Amount of the line item.",
            "format": "double"
          },
          "GLAccountId": {
            "type": "integer",
            "description": "Unique ientifier of the general ledger account associated with the charge.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LeaseChargeLineSaveMessage": {
        "required": [
          "Amount",
          "GLAccountId"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Line item amount.",
            "format": "double"
          },
          "GLAccountId": {
            "type": "integer",
            "description": "The general ledger account identifier under which the line item amount will be recorded.",
            "format": "int32"
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "Reference number for the line item. The value cannot exceed 30 characters.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a line item on a lease charge"
      },
      "LeaseChargeMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Charge unique identifier.",
            "format": "int32"
          },
          "Date": {
            "type": "string",
            "description": "Date of the charge.",
            "format": "date"
          },
          "TotalAmount": {
            "type": "number",
            "description": "Sum of all `Lines.Amount` entries in the charge.",
            "format": "double"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the charge.",
            "nullable": true
          },
          "BillId": {
            "type": "integer",
            "description": "The bill identifier this charge is associated with, if applicable.",
            "format": "int32",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaseChargeLineMessage"
            },
            "description": "A collection of line items associated with the charge.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LeaseChargePostMessage": {
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "Date of the charge. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the charge. The value cannot exceed 65 characters.",
            "nullable": true
          },
          "BillId": {
            "type": "integer",
            "description": "Unique identifier of the bill this charge is associated to. If provided, the property of the lease the\r\ncharge is being created in must be in at least one line item of the bill.",
            "format": "int32",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaseChargeLineSaveMessage"
            },
            "description": "A collection of line items included in the charge. At least one line item is required.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a charge related to a lease"
      },
      "LeaseChargePutMessage": {
        "required": [
          "Date",
          "Lines"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "Date of the charge. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the charge. The value cannot exceed 65 characters.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaseChargeLineSaveMessage"
            },
            "description": "Collection of line items to be included in the charge. All existing line items will be deleted and replaced with the line items in this request. At least 1 line item is required."
          }
        },
        "additionalProperties": false
      },
      "LeaseChargeRecurringTransactionMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unique identifier of the recurring charge schedule.",
            "format": "int32"
          },
          "LeaseId": {
            "type": "integer",
            "description": "The unique identifier of the lease that the recurring charge will be applied to.",
            "format": "int32"
          },
          "GLAccountId": {
            "type": "integer",
            "description": "The general ledger account unique identifier the recurring charge is applied to.",
            "format": "int32",
            "nullable": true
          },
          "RentId": {
            "type": "integer",
            "description": "The unique identifier of the scheduled Rent entity. If the charge is not associated with a Rent entity then the value will be `NULL`.",
            "format": "int32",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "The amount of the recurring charge.",
            "format": "double"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the recurring charge.",
            "nullable": true
          },
          "OccurrencesRemaining": {
            "type": "integer",
            "description": "The number of remaining times this recurring charge will be processed.",
            "format": "int32",
            "nullable": true
          },
          "FirstOccurrenceDate": {
            "type": "string",
            "description": "The date the first occurence this charge was processed.",
            "format": "date",
            "nullable": true
          },
          "NextOccurrenceDate": {
            "type": "string",
            "description": "The next date the scheduled charge will be processed.",
            "format": "date"
          },
          "PostDaysInAdvance": {
            "type": "integer",
            "description": "The number of days ahead of the transaction date the charge will post on the lease ledger. This setting is used to add the charge to the ledger ahead of it's due date for visibility. For example, if the `FirstOccurrenceDate` is set to 8/10/2022 and this value is set to 5 then the charge will added to the ledger on 8/5/2022, but will have transaction date of 8/10/2022.",
            "format": "int32"
          },
          "Frequency": {
            "enum": [
              "Monthly",
              "Weekly",
              "Every2Weeks",
              "Quarterly",
              "Yearly",
              "Every2Months",
              "Daily",
              "Every6Months",
              "OneTime"
            ],
            "type": "string",
            "description": "Specifies the frequency at which the recurring charge will be processed."
          },
          "Duration": {
            "enum": [
              "Unspecified",
              "UntilEndOfTerm",
              "SpecificNumber",
              "SpecificDate"
            ],
            "type": "string",
            "description": "Specifies the period of time/occurrences the recurring charge will be processed. Note, if the `Frequency` field is set to `OneTime` this field should be set to `NULL` as any submitted value will be ignored."
          }
        },
        "additionalProperties": false
      },
      "LeaseCosignerPostMessage": {
        "required": [
          "FirstName",
          "LastName"
        ],
        "type": "object",
        "properties": {
          "FirstName": {
            "minLength": 1,
            "type": "string",
            "description": "First name of the cosigner."
          },
          "LastName": {
            "minLength": 1,
            "type": "string",
            "description": "Last name of the cosigner."
          },
          "Email": {
            "type": "string",
            "description": "Email for the cosigner.",
            "nullable": true
          },
          "AlternateEmail": {
            "type": "string",
            "description": "Alternate Email for the cosigner.",
            "nullable": true
          },
          "PhoneNumbers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumbersMessage"
              }
            ],
            "description": "List of phone numbers for the cosigner.",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Address of the cosigner.",
            "nullable": true
          },
          "AlternateAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Alternate address for the cosigner.",
            "nullable": true
          },
          "MailingPreference": {
            "enum": [
              "PrimaryAddress",
              "AlternateAddress"
            ],
            "type": "string",
            "description": "Mailing preferences for the cosigner. If an alternate address exists and this value is not provided then the primary address will be set as the preferred address.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This object represents a rental lease cosigner."
      },
      "LeaseLedgerCreditLinePostMessage": {
        "required": [
          "Amount",
          "GlAccountId"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Line item amount.",
            "format": "double"
          },
          "GlAccountId": {
            "type": "integer",
            "description": "The general ledger account identifier under which the line item amount will be recorded. The account must be a liability or income type.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Credit line item."
      },
      "LeaseLedgerCreditPostMessage": {
        "required": [
          "CreditType",
          "Date",
          "Lines"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "Date of the transaction. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "Description of the transaction. The value cannot exceed 65 characters.",
            "nullable": true
          },
          "CreditType": {
            "enum": [
              "WaiveUnpaid",
              "Exchange",
              "PreviouslyDeposited"
            ],
            "type": "string",
            "description": "Indicates how the credit should be applied.\r\n<ul><li>WaiveUnpaid - This credit type allows for reversing one or more charges without losing record of what has changed.</li><li>Exchange - This credit type allows for one of the following: 1) Reimburse a resident for a out-of-pocket expense, 2) Compensate for a service, 3) Write-off a resident balance considered uncollectable.</li><li>PreviouslyDeposited - This credit type allows for issuing a credit against payments that have already been deposited.</li></ul>"
          },
          "OffsettingGLAccountId": {
            "type": "integer",
            "description": "Sets the offsetting general ledger account identifier for the credit.\r\n\r\nThis value must be provided when the `CreditType` field is set to `Exchange` or `PreviouslyDeposited`.\r\n\r\nWhen the `CreditType` is `Exchange` this must be an *expense* general ledger account type.\r\n\r\nWhen the `CreditType` is `PreviouslyDeposited` this must be an *equity* general ledger account type.",
            "format": "int32",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaseLedgerCreditLinePostMessage"
            },
            "description": "A collection of line items included in the credit. At least one line item is required."
          }
        },
        "additionalProperties": false
      },
      "LeaseLedgerDepositWithholdingLinePostMessage": {
        "required": [
          "Amount",
          "GLAccountId"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Line item amount.",
            "format": "double"
          },
          "GLAccountId": {
            "type": "integer",
            "description": "General ledger account identifier under which the line item amount will be recorded. Must be an Income account.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LeaseLedgerDepositWithholdingLinePutMessage": {
        "required": [
          "Amount",
          "GLAccountId"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Line item amount.",
            "format": "double"
          },
          "GLAccountId": {
            "type": "integer",
            "description": "General ledger account identifier under which the line item amount will be recorded. Must be an Income account.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LeaseLedgerDepositWithholdingPostMessage": {
        "required": [
          "DepositLiabilityGLAccountId",
          "EntryDate"
        ],
        "type": "object",
        "properties": {
          "EntryDate": {
            "type": "string",
            "description": "Date of the deposit withholding. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "DepositLiabilityGLAccountId": {
            "type": "integer",
            "description": "The identifier of the liability general ledger account from which to withhold the funds. Note, the specified liability account must have a positive balance.",
            "format": "int32"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the withholding. Memo cannot exceed 65 characters.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaseLedgerDepositWithholdingLinePostMessage"
            },
            "description": "Line items specifying the income accounts the deposit will be applied to. The total amount of the line items can not exceed the balance of the liability account.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LeaseLedgerDepositWithholdingPutMessage": {
        "required": [
          "DepositLiabilityGLAccountId",
          "EntryDate"
        ],
        "type": "object",
        "properties": {
          "EntryDate": {
            "type": "string",
            "description": "Date of the deposit withholding. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "DepositLiabilityGLAccountId": {
            "type": "integer",
            "description": "The identifier of the liability general ledger account from which to withhold the funds. Note, the specified liability account must have a positive balance.",
            "format": "int32"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the withholding. Memo cannot exceed 65 characters.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaseLedgerDepositWithholdingLinePutMessage"
            },
            "description": "Line items specifying the income accounts the deposit will be applied to. The total amount of the line items can not exceed the balance of the liability account.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LeaseLedgerPaymentLineSaveMessage": {
        "required": [
          "Amount",
          "GLAccountId"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Amount of the line item.",
            "format": "double"
          },
          "GLAccountId": {
            "type": "integer",
            "description": "The general ledger account identifier under which the line item amount will be recorded.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a line item on a lease ledger payment"
      },
      "LeaseLedgerPaymentPostMessage": {
        "required": [
          "Date",
          "Lines",
          "PaymentMethod",
          "SendEmailReceipt"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "The date of the transaction. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "PaymentMethod": {
            "enum": [
              "Check",
              "Cash",
              "MoneyOrder",
              "CashierCheck",
              "DirectDeposit",
              "CreditCard",
              "ElectronicPayment"
            ],
            "type": "string",
            "description": "The payment method used for the transaction."
          },
          "PayeeUserId": {
            "type": "integer",
            "description": "The payee's user unique identifier.",
            "format": "int32",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "A brief note describing the reason for the payment. The value cannot exceed 65 characters.",
            "nullable": true
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "The reference Number of the transaction. The value cannot exceed 30 characters.",
            "nullable": true
          },
          "SendEmailReceipt": {
            "type": "boolean",
            "description": "An indicator for whether or not to send an email receipt to the payee. If the payee does not have an email address set, no email will be sent."
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaseLedgerPaymentLineSaveMessage"
            },
            "description": "A collection of line items included in the payment. At least one line item is required."
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a Payment made in a particular lease ledger."
      },
      "LeaseLedgerPaymentPutMessage": {
        "required": [
          "Date",
          "Lines",
          "PaymentMethod"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "The date of the transaction. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "PaymentMethod": {
            "enum": [
              "Check",
              "Cash",
              "MoneyOrder",
              "CashierCheck",
              "DirectDeposit",
              "CreditCard",
              "ElectronicPayment",
              "BuildiumEFT",
              "BuildiumCC",
              "RetailCash"
            ],
            "type": "string",
            "description": "The payment method used for the transaction."
          },
          "PayeeUserId": {
            "type": "integer",
            "description": "The payee's user unique identifier.",
            "format": "int32",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "A brief note describing the reason for the payment. The value cannot exceed 65 characters.",
            "nullable": true
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "The reference Number of the transaction. The value cannot exceed 30 characters.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaseLedgerPaymentLineSaveMessage"
            },
            "description": "A collection of line items included in the payment. At least one line item is required."
          }
        },
        "additionalProperties": false
      },
      "LeaseLedgerRefundLineMessage": {
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Amount of the line item.",
            "format": "double"
          },
          "GLAccountId": {
            "type": "integer",
            "description": "Unique identifier of the general ledger account associated with the refund.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LeaseLedgerRefundLinePostMessage": {
        "required": [
          "Amount",
          "GLAccountId"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Amount of the line item.",
            "format": "double"
          },
          "GLAccountId": {
            "type": "integer",
            "description": "Unique identifier of the general ledger account associated with the refund.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LeaseLedgerRefundMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Refund unique identifier.",
            "format": "int32"
          },
          "Date": {
            "type": "string",
            "description": "Date of the refund.",
            "format": "date"
          },
          "Payees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayeeMessage"
            },
            "description": "List of payees being refunded.",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the refund, if applicable.",
            "nullable": true
          },
          "CheckNumber": {
            "type": "string",
            "description": "Check number associated with the refund, if applicable.",
            "nullable": true
          },
          "BankAccountId": {
            "type": "integer",
            "description": "Unique identifier of the bank account that the refund was made from.",
            "format": "int32"
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "Address to be displayed on the refund check.",
            "nullable": true
          },
          "TotalAmount": {
            "type": "number",
            "description": "Total amount of the refund.",
            "format": "double"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaseLedgerRefundLineMessage"
            },
            "description": "A collection of line items included in the refund.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LeaseLedgerRefundPostMessage": {
        "required": [
          "Address",
          "BankAccountId",
          "Date",
          "Lines",
          "PayeeUserIds"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "The date of the refund. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "PayeeUserIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Unique identifiers of the users receiving the refund."
          },
          "Memo": {
            "type": "string",
            "description": "A brief note describing the reason for the refund. The value cannot exceed 65 characters.",
            "nullable": true
          },
          "CheckNumber": {
            "type": "string",
            "description": "Check number associated with the refund, if applicable. The value cannot exceed 30 characters.",
            "nullable": true
          },
          "BankAccountId": {
            "type": "integer",
            "description": "Unique identifier of the bank account the refund is issued from.",
            "format": "int32"
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Address to be displayed on the refund check."
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaseLedgerRefundLinePostMessage"
            },
            "description": "A collection of line items included in the refund. At least one line item is required."
          }
        },
        "additionalProperties": false
      },
      "LeaseLedgerReversePaymentNSFChargePostMessage": {
        "required": [
          "GLAccountId",
          "TotalAmount"
        ],
        "type": "object",
        "properties": {
          "GLAccountId": {
            "type": "integer",
            "description": "Income general ledger income account to record the charge under.",
            "format": "int32"
          },
          "TotalAmount": {
            "type": "number",
            "description": "Total amount to charge the tenant.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Non-sufficient funds (NSF) charge to the tenant."
      },
      "LeaseLedgerReversePaymentOtherBankChargePostMessage": {
        "required": [
          "GLAccountId",
          "TotalAmount"
        ],
        "type": "object",
        "properties": {
          "GLAccountId": {
            "type": "integer",
            "description": "Expense general ledger account to associate the bank fee.",
            "format": "int32"
          },
          "TotalAmount": {
            "type": "number",
            "description": "Total amount of the bank fee.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Fee assessed by the bank for the reversed payment."
      },
      "LeaseLedgerReversePaymentPostMessage": {
        "required": [
          "EntryDate",
          "PaymentTransactionId"
        ],
        "type": "object",
        "properties": {
          "EntryDate": {
            "type": "string",
            "description": "Date of the transaction.",
            "format": "date"
          },
          "PaymentTransactionId": {
            "type": "integer",
            "description": "Transaction identifier of the payment to reverse. Note, this payment transaction must be deposited.",
            "format": "int32"
          },
          "NSFCharge": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LeaseLedgerReversePaymentNSFChargePostMessage"
              }
            ],
            "description": "Non-sufficient funds (NSF) charge.",
            "nullable": true
          },
          "BankFee": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LeaseLedgerReversePaymentOtherBankChargePostMessage"
              }
            ],
            "description": "Bank for fee assessed for the reversed payment.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LeaseMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Lease unique identifier.",
            "format": "int32"
          },
          "PropertyId": {
            "type": "integer",
            "description": "Rental property unique identifier.",
            "format": "int32"
          },
          "UnitId": {
            "type": "integer",
            "description": "Unit unique identifier.",
            "format": "int32"
          },
          "UnitNumber": {
            "type": "string",
            "description": "Unit number specified in the lease.",
            "nullable": true
          },
          "LeaseFromDate": {
            "type": "string",
            "description": "Start date of the lease.",
            "format": "date",
            "nullable": true
          },
          "LeaseToDate": {
            "type": "string",
            "description": "End date of the lease.",
            "format": "date",
            "nullable": true
          },
          "LeaseType": {
            "enum": [
              "None",
              "Fixed",
              "FixedWithRollover",
              "AtWill"
            ],
            "type": "string",
            "description": "Describes the type of lease."
          },
          "LeaseStatus": {
            "enum": [
              "Active",
              "Past",
              "Future"
            ],
            "type": "string",
            "description": "Indicates the status of the lease."
          },
          "IsEvictionPending": {
            "type": "boolean",
            "description": "Indicates whether the lease has an eviction pending."
          },
          "TermType": {
            "enum": [
              "MonthToMonth",
              "Standard",
              "Owner"
            ],
            "type": "string",
            "description": "Describes the term type of the lease."
          },
          "RenewalOfferStatus": {
            "enum": [
              "NotSet",
              "NotStarted",
              "Generated",
              "Declined",
              "Renewed",
              "Draft",
              "Unsigned",
              "PartiallySigned",
              "Countersign",
              "Activated",
              "Sent",
              "Accepted"
            ],
            "type": "string",
            "description": "Describes the status of the renewal offer. Null if no renewal offer exists.",
            "nullable": true
          },
          "CurrentTenants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TenantMessage"
            },
            "description": "List of the current tenants on the lease.",
            "nullable": true
          },
          "CurrentNumberOfOccupants": {
            "type": "integer",
            "description": "Count of current tenants.",
            "format": "int32"
          },
          "AccountDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LeaseAccountDetailMessage"
              }
            ],
            "description": "Financial details of the lease.",
            "nullable": true
          },
          "Cosigners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CosignerMessage"
            },
            "description": "List of the cosigners on the lease.",
            "nullable": true
          },
          "AutomaticallyMoveOutTenants": {
            "type": "boolean",
            "description": "Indicates whether to automatically move out all tenants assigned to the lease and set the lease status to past when the lease ends."
          },
          "CreatedDateTime": {
            "type": "string",
            "description": "Date and time the lease was created.",
            "format": "date-time"
          },
          "LastUpdatedDateTime": {
            "type": "string",
            "description": "The date and time the lease was last updated.",
            "format": "date-time",
            "nullable": true
          },
          "MoveOutData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaseMoveOutDataMessage"
            },
            "description": "Move out data of lease",
            "nullable": true
          },
          "PaymentDueDay": {
            "type": "integer",
            "description": "Day of the month payment is due.",
            "format": "int32"
          },
          "Tenants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaseTenantMessage"
            },
            "description": "List of all tenants ever associated with the lease",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This object represents a rental property lease."
      },
      "LeaseMoveOutDataMessage": {
        "type": "object",
        "properties": {
          "TenantId": {
            "type": "integer",
            "description": "Tenant unique identifier.",
            "format": "int32"
          },
          "MoveOutDate": {
            "type": "string",
            "description": "Date the tenant will move out of the leased unit.",
            "format": "date"
          },
          "NoticeGivenDate": {
            "type": "string",
            "description": "Date the tenant move out notice was received.",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LeaseMoveOutDataPostMessage": {
        "required": [
          "MoveOutDate",
          "TenantId"
        ],
        "type": "object",
        "properties": {
          "TenantId": {
            "type": "integer",
            "description": "Tenant unique identifier.",
            "format": "int32"
          },
          "MoveOutDate": {
            "type": "string",
            "description": "Date the tenant(s) will move out of the leased unit.",
            "format": "date"
          },
          "NoticeGivenDate": {
            "type": "string",
            "description": "Date the tenant(s) gave their move out notice.",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LeaseOutstandingBalanceMessage": {
        "type": "object",
        "properties": {
          "LeaseId": {
            "type": "integer",
            "description": "Lease unique identifier.",
            "format": "int32"
          },
          "PropertyId": {
            "type": "integer",
            "description": "Property unique identifier.",
            "format": "int32"
          },
          "UnitId": {
            "type": "integer",
            "description": "Property unit unique identifier.",
            "format": "int32",
            "nullable": true
          },
          "Balance0To30Days": {
            "type": "number",
            "description": "Outstanding balance due from within the last 30 days.",
            "format": "double"
          },
          "Balance31To60Days": {
            "type": "number",
            "description": "Outstanding balance due from within 31 to 60 days ago.",
            "format": "double"
          },
          "Balance61To90Days": {
            "type": "number",
            "description": "Outstanding balance due from within 61 to 90 days ago.",
            "format": "double"
          },
          "BalanceOver90Days": {
            "type": "number",
            "description": "Outstanding balance due from over 90 days ago.",
            "format": "double"
          },
          "TotalBalance": {
            "type": "number",
            "description": "Total outstanding balance due.",
            "format": "double"
          },
          "Balances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OutstandingBalancesLineMessage"
            },
            "description": "Breakdown of outstanding balance due by general ledger account.",
            "nullable": true
          },
          "PastDueEmailSentDate": {
            "type": "string",
            "description": "Date of notification for outstanding balance.",
            "format": "date-time",
            "nullable": true
          },
          "EvictionPendingDate": {
            "type": "string",
            "description": "Date of notification for pending eviction.",
            "format": "date",
            "nullable": true
          },
          "IsNoticeGiven": {
            "type": "boolean",
            "description": "Indicates if notice was sent."
          }
        },
        "additionalProperties": false
      },
      "LeasePostMessage": {
        "required": [
          "LeaseFromDate",
          "LeaseType",
          "SendWelcomeEmail",
          "UnitId"
        ],
        "type": "object",
        "properties": {
          "LeaseType": {
            "enum": [
              "Fixed",
              "FixedWithRollover",
              "AtWill"
            ],
            "type": "string",
            "description": "Describes the type of lease.\r\n\r\n\r\n`AtWill` leases are month-to-month leases. Setting a lease as at will tells Buildium when the tenant's lease initially started, but since there is no lease end date, Buildium will never move the lease to expired, and it will continue to post any automatic transactions (like recurring monthly rent charges or late fees) until you manually end the lease.\r\n\r\n\r\n\r\n`Fixed` leases are leases that have specific start and end dates.When the end date occurs, the lease will move from active to expired, and any transactions set to post automatically(like recurring monthly rent charges or late fees) will stop posting.\r\n\r\n\r\n\r\n`FixedWithRollover` leases are similar to fixed leases, but instead of Buildium moving this lease to expired as of the end date, it will move the lease to an at will status, which tells Buildium to continue posting monthly rent charges, late fees for you until you manually end the lease."
          },
          "UnitId": {
            "type": "integer",
            "description": "Unit unique identifier associated with the lease.",
            "format": "int32"
          },
          "LeaseFromDate": {
            "type": "string",
            "description": "Start date of the lease.",
            "format": "date"
          },
          "LeaseToDate": {
            "type": "string",
            "description": "End date of the lease.",
            "format": "date",
            "nullable": true
          },
          "SendWelcomeEmail": {
            "type": "boolean",
            "description": "Indicates whether to send a welcome email to all tenants on the lease inviting them to the resident center website."
          },
          "Tenants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RentalTenantPutMessage"
            },
            "description": "List of new tenants to add to the lease. The list cannot exceed five tenants.",
            "nullable": true
          },
          "TenantIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of identifiers for existing tenants to add to the lease. The list cannot exceed five tenants.",
            "nullable": true
          },
          "ApplicantIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of identifiers for applicants to become tenants on the lease. Identifiers must refer to applicants with a Status of `Approved`. The list cannot exceed five applicants.",
            "nullable": true
          },
          "Cosigners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaseCosignerPostMessage"
            },
            "description": "List of the cosigners on the lease.",
            "nullable": true
          },
          "Rent": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LeaseRentPostMessage"
              }
            ],
            "description": "Rent charge on the post message",
            "nullable": true
          },
          "SecurityDeposit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LeaseSecurityDepositPostMessage"
              }
            ],
            "description": "The security deposit.",
            "nullable": true
          },
          "ProratedFirstMonthRent": {
            "type": "number",
            "description": "Prorated rent charged for the first month of the lease. Must be null if the lease begins on the first day of a month.",
            "format": "double",
            "nullable": true
          },
          "ProratedLastMonthRent": {
            "type": "number",
            "description": "Prorated rent charged for the last month of the lease. Must be null if the lease ends on the last day of a month.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LeasePutMessage": {
        "required": [
          "IsEvictionPending",
          "LeaseFromDate",
          "LeaseType",
          "UnitId"
        ],
        "type": "object",
        "properties": {
          "LeaseType": {
            "enum": [
              "Fixed",
              "FixedWithRollover",
              "AtWill"
            ],
            "type": "string",
            "description": "Describes the type of lease."
          },
          "UnitId": {
            "type": "integer",
            "description": "Unit unique identifier associated with the lease.",
            "format": "int32"
          },
          "LeaseFromDate": {
            "type": "string",
            "description": "Start date of the lease.",
            "format": "date"
          },
          "LeaseToDate": {
            "type": "string",
            "description": "End date of the lease.",
            "format": "date",
            "nullable": true
          },
          "IsEvictionPending": {
            "type": "boolean",
            "description": "Indicates whether the lease has an eviction pending."
          },
          "AutomaticallyMoveOutTenants": {
            "type": "boolean",
            "description": "Indicates whether to automatically move out all tenants assigned to the lease and set the lease status to past when the lease ends.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LeaseRecurringCreditMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unique identifier of the recurring credit schedule.",
            "format": "int32"
          },
          "LeaseId": {
            "type": "integer",
            "description": "The unique identifier of the lease that the recurring credit will be applied to.",
            "format": "int32"
          },
          "CreditType": {
            "enum": [
              "WaiveUnpaid",
              "Exchange",
              "PreviouslyDeposited"
            ],
            "type": "string",
            "description": "Indicates how the credit will be applied.\r\n<ul><li>WaiveUnpaid - This credit type allows for reversing one or more charges without losing record of what has changed.</li><li>Exchange - This credit type allows for one of the following: 1) Reimburse a resident for a out-of-pocket expense, 2) Compensate for a service, 3) Write-off a resident balance considered uncollectable.</li><li>PreviouslyDeposited - This credit type allows for issuing a credit against payments that have already been deposited.</li></ul>"
          },
          "OffsettingGLAccountId": {
            "type": "integer",
            "description": "Offsetting general ledger account identifier. The offsetting general ledger account acts as the expense account.",
            "format": "int32",
            "nullable": true
          },
          "PostingRuleGLAccountId": {
            "type": "integer",
            "description": "Indicates whether to apply a posting rule when processing the transaction that would only record the credit if a prior payment has been made.\r\n\r\n\r\n\r\nSet the field value to the <b>Rent Income</b> general ledger account identifier if the credit should only be recorded when a payment was made and applied to the <b>Rent Income</b> general ledger account.\r\n\r\n\r\n\r\nSet the field value to the <b>Accounts Receivable</b> general ledger account identifier if the credit should only be recorded when a payment was made and applied to *any* general ledger account.\r\n\r\n\r\n\r\nSet the field value to <b>null</b> to always record the credit.",
            "format": "int32",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecurringTransactionLineMessage"
            },
            "description": "Line items describing how the credit is to be allocated when the recurring transaction is processed.",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "The total amount of the recurring credit based on sum of the `Lines.Amount`.",
            "format": "double"
          },
          "OccurrencesRemaining": {
            "type": "integer",
            "description": "The number of remaining times this recurring credit will be processed.",
            "format": "int32",
            "nullable": true
          },
          "FirstOccurrenceDate": {
            "type": "string",
            "description": "The date the first occurrence this credit was processed.",
            "format": "date",
            "nullable": true
          },
          "NextOccurrenceDate": {
            "type": "string",
            "description": "The next date the scheduled credit will be processed.",
            "format": "date"
          },
          "PostDaysInAdvance": {
            "type": "integer",
            "description": "Specifies the number of days ahead of the transaction date the credit will post on the lease ledger. This setting can be used to add the charge to the ledger ahead of the due date for visibility. For example, if the `FirstOccurrenceDate` is set to 8/10/2022 and this value is set to 5 then the charge will added to the ledger on 8/5/2022, but will have transaction date of 8/10/2022.",
            "format": "int32"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the recurring credit.",
            "nullable": true
          },
          "Frequency": {
            "enum": [
              "Monthly",
              "Weekly",
              "Every2Weeks",
              "Quarterly",
              "Yearly",
              "Every2Months",
              "Daily",
              "Every6Months",
              "OneTime"
            ],
            "type": "string",
            "description": "Indicates the frequency at which the recurring credit is processed."
          },
          "Duration": {
            "enum": [
              "Unspecified",
              "UntilEndOfTerm",
              "SpecificNumber",
              "SpecificDate"
            ],
            "type": "string",
            "description": "Specifies the period of time/occurrences the recurring payment will be processed. Note, if the `Frequency` field is set to `OneTime` this field should be set to `NULL` as any submitted value will be ignored."
          }
        },
        "additionalProperties": false
      },
      "LeaseRecurringPaymentMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unique identifier for the recurring payment schedule.",
            "format": "int32"
          },
          "LeaseId": {
            "type": "integer",
            "description": "The unique identifier of the lease that the recurring payment will be applied to.",
            "format": "int32"
          },
          "Payer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayeeMessage"
              }
            ],
            "description": "User information for the resident making the payment.",
            "nullable": true
          },
          "PaymentMethod": {
            "enum": [
              "None",
              "Check",
              "Cash",
              "MoneyOrder",
              "CashierCheck",
              "DirectDeposit",
              "CreditCard",
              "ElectronicPayment",
              "RetailCash"
            ],
            "type": "string",
            "description": "The method of payment for the transaction."
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecurringTransactionLineMessage"
            },
            "description": "Line items describing how the payment is to be allocated when the recurring transaction is processed.",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "The total amount of the recurring payment based on sum of the `Lines.Amount`.",
            "format": "double"
          },
          "OccurrencesRemaining": {
            "type": "integer",
            "description": "The number of remaining times this recurring payment will be processed.",
            "format": "int32",
            "nullable": true
          },
          "FirstOccurrenceDate": {
            "type": "string",
            "description": "The date the first occurrence this payment was processed.",
            "format": "date"
          },
          "NextOccurrenceDate": {
            "type": "string",
            "description": "The next date the scheduled payment will be processed.",
            "format": "date"
          },
          "PostDaysInAdvance": {
            "type": "integer",
            "description": "Specifies the number of days ahead of the transaction date the payment will post on the lease ledger. This setting can be used to add the charge to the ledger ahead of the due date for visibility. For example, if the `FirstOccurrenceDate` is set to 8/10/2022 and this value is set to 5 then the charge will added to the ledger on 8/5/2022, but will have transaction date of 8/10/2022.",
            "format": "int32"
          },
          "Frequency": {
            "enum": [
              "Monthly",
              "Weekly",
              "Every2Weeks",
              "Quarterly",
              "Yearly",
              "Every2Months",
              "Daily",
              "Every6Months",
              "OneTime"
            ],
            "type": "string",
            "description": "Indicates the frequency at which the recurring payment is processed."
          },
          "Duration": {
            "enum": [
              "Unspecified",
              "UntilEndOfTerm",
              "SpecificNumber",
              "SpecificDate"
            ],
            "type": "string",
            "description": "Specifies the period of time/occurrences the recurring payment will be processed. Note, if the `Frequency` field is set to `OneTime` this field should be set to `NULL` as any submitted value will be ignored."
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the recurring payment.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LeaseRenewalHistoryMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Lease renewal unique identifier.",
            "format": "int32"
          },
          "LeaseId": {
            "type": "integer",
            "description": "Lease unique identifier.",
            "format": "int32"
          },
          "LeaseStatus": {
            "enum": [
              "Active",
              "Past",
              "Future"
            ],
            "type": "string",
            "description": "Indicates the status of the lease."
          },
          "LeaseFromDate": {
            "type": "string",
            "description": "Start date of the lease.",
            "format": "date"
          },
          "LeaseToDate": {
            "type": "string",
            "description": "End date of the lease.",
            "format": "date",
            "nullable": true
          },
          "LeaseType": {
            "enum": [
              "None",
              "Fixed",
              "FixedWithRollover",
              "AtWill"
            ],
            "type": "string",
            "description": "Describes the type of lease."
          },
          "Rent": {
            "type": "number",
            "description": "Rent for the lease.",
            "format": "double"
          },
          "RentId": {
            "type": "integer",
            "description": "The unique identifier of the scheduled Rent entity. If the renewal is not associated with a Rent entity then the value will be `NULL`.",
            "format": "int32",
            "nullable": true
          },
          "TenantIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Unique identifiers of tenants on the lease.",
            "nullable": true
          },
          "CreatedDateTime": {
            "type": "string",
            "description": "Date and time the lease renewal was created.",
            "format": "date-time"
          },
          "LastUpdatedDateTime": {
            "type": "string",
            "description": "The date and time the lease renewal was last updated.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LeaseRenewalMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Lease renewal unique identifier.",
            "format": "int32"
          },
          "LeaseStatus": {
            "enum": [
              "Active",
              "Past",
              "Future"
            ],
            "type": "string",
            "description": "Indicates the status of the lease."
          },
          "LeaseFromDate": {
            "type": "string",
            "description": "Start date of the lease.",
            "format": "date"
          },
          "LeaseToDate": {
            "type": "string",
            "description": "End date of the lease.",
            "format": "date",
            "nullable": true
          },
          "LeaseType": {
            "enum": [
              "None",
              "Fixed",
              "FixedWithRollover",
              "AtWill"
            ],
            "type": "string",
            "description": "Describes the type of lease."
          },
          "Rent": {
            "type": "number",
            "description": "Rent for the lease.",
            "format": "double"
          },
          "RentId": {
            "type": "integer",
            "description": "The unique identifier of the scheduled Rent entity. If the renewal is not associated with a Rent entity then the value will be `NULL`.",
            "format": "int32",
            "nullable": true
          },
          "TenantIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Unique identifiers of tenants on the lease.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LeaseRenewalPostMessage": {
        "required": [
          "LeaseType",
          "Rent",
          "SendWelcomeEmail"
        ],
        "type": "object",
        "properties": {
          "LeaseType": {
            "enum": [
              "Fixed",
              "FixedWithRollover",
              "AtWill"
            ],
            "type": "string",
            "description": "Describes the type of lease."
          },
          "LeaseToDate": {
            "type": "string",
            "description": "End date of the lease. This is required if `LeaseType` is `Fixed` or `FixedWithRollover`",
            "format": "date",
            "nullable": true
          },
          "AutomaticallyMoveOutTenants": {
            "type": "boolean",
            "description": "Indicates whether to automatically move out all tenants assigned to the lease and set the lease status to past when the lease ends.",
            "nullable": true
          },
          "Rent": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LeaseRentPostMessage"
              }
            ],
            "description": "The rent for the lease."
          },
          "Cosigners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaseCosignerPostMessage"
            },
            "description": "List of the cosigners to create on the lease.",
            "nullable": true
          },
          "TenantIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Unique identifiers of existing tenants to include on the lease. The request must include at least one tenant in this property OR the `Tenants` property.",
            "nullable": true
          },
          "Tenants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RentalTenantRenewalPostMessage"
            },
            "description": "List of new tenants to create on the lease. The request must include at least one tenant in this property OR the `TenantIds` property.",
            "nullable": true
          },
          "SendWelcomeEmail": {
            "type": "boolean",
            "description": "Indicates whether to send a welcome email to all tenants on the lease inviting them to the resident center website."
          },
          "RecurringChargesToStop": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Unique identifiers of existing recurring charges on the lease to stop.",
            "nullable": true
          },
          "RecurringChargesToCreate": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChargeRecurringTransactionPostMessage"
            },
            "description": "List of new recurring charges to create.",
            "nullable": true
          },
          "RecurringChargesToUpdate": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChargeRecurringTransactionPutMessage"
            },
            "description": "List of existing recurring charges to update.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LeaseRentChargeMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Rent charge unique identifier.",
            "format": "int32"
          },
          "GLAccountId": {
            "type": "integer",
            "description": "General ledger account unique identifier the rent charge is related to.",
            "format": "int32"
          },
          "Amount": {
            "type": "number",
            "description": "Amount of the rent charge.",
            "format": "double"
          },
          "Memo": {
            "type": "string",
            "description": "Memo for the rent charge.",
            "nullable": true
          },
          "FirstChargeDate": {
            "type": "string",
            "description": "First date for the rent charge.",
            "format": "date"
          },
          "PostDaysInAdvance": {
            "type": "integer",
            "description": "Number of days ahead of the due date the charge will post on the lease ledger.",
            "format": "int32"
          },
          "DueOnDayOfTheMonth": {
            "type": "integer",
            "description": "The day of the month the rent charge is due.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LeaseRentChargePostMessage": {
        "required": [
          "Amount",
          "GlAccountId",
          "NextDueDate"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "The amount of the charge.",
            "format": "double"
          },
          "GlAccountId": {
            "type": "integer",
            "description": "The general ledger account identifier under which to record the charge.",
            "format": "int32"
          },
          "NextDueDate": {
            "type": "string",
            "description": "Indicates the next date the charge will be applied to the lease ledger. This date will also be used as the start date for the calculating the `Cycle` of when to apply the next charge. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "Memo for the charge.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LeaseRentMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Rent unique identifier.",
            "format": "int32"
          },
          "StartDate": {
            "type": "string",
            "description": "Start date of the rent.",
            "format": "date"
          },
          "EndDate": {
            "type": "string",
            "description": "End date of the rent.",
            "format": "date",
            "nullable": true
          },
          "TotalAmount": {
            "type": "number",
            "description": "Total amount of the rent.",
            "format": "double"
          },
          "RentCycle": {
            "enum": [
              "None",
              "Monthly",
              "Weekly",
              "Every2Weeks",
              "Quarterly",
              "Yearly",
              "Every2Months",
              "Daily",
              "Every6Months",
              "OneTime"
            ],
            "type": "string",
            "description": "Determines the frequency at which rent is charged."
          },
          "BackdateCharges": {
            "type": "boolean",
            "description": "Indicates whether backdated charges should be created when creating or editing rents. This field will always return false, even if backdated charges exist."
          },
          "CreatedDateTime": {
            "type": "string",
            "description": "The date and time the rent was created.",
            "format": "date-time",
            "nullable": true
          },
          "CreatedByUserId": {
            "type": "integer",
            "description": "Unique identifier of user that created the rent.",
            "format": "int32",
            "nullable": true
          },
          "Charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaseRentChargeMessage"
            },
            "description": "A collection of charges associated with the rent.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LeaseRentPostMessage": {
        "required": [
          "Charges",
          "Cycle"
        ],
        "type": "object",
        "properties": {
          "Cycle": {
            "enum": [
              "Monthly",
              "Weekly",
              "Every2Weeks",
              "Quarterly",
              "Yearly",
              "Every2Months",
              "Daily",
              "Every6Months",
              "OneTime"
            ],
            "type": "string",
            "description": "Indicates the cadence of when rent `Charges` will be applied automatically to the lease ledger."
          },
          "Charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaseRentChargePostMessage"
            },
            "description": "List of charges to apply to the lease."
          }
        },
        "additionalProperties": false,
        "description": "The rent for the lease. When provided in the request the charges for the specified amount will be automatically applied to the lease ledger on the cadence specified in the `Cycle`."
      },
      "LeaseSecurityDepositPostMessage": {
        "required": [
          "Amount",
          "DueDate"
        ],
        "type": "object",
        "properties": {
          "DueDate": {
            "type": "string",
            "description": "The date the security deposit is due. This date will be used as the transaction date when applying the charge to the lease ledger.",
            "format": "date"
          },
          "Amount": {
            "type": "number",
            "description": "Security deposit amount.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "The security deposit on the lease. When provided in the request a one-time charge for the specified amount will be applied to the lease ledger."
      },
      "LeaseTenantMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Tenant unique identifier.",
            "format": "int32"
          },
          "Status": {
            "enum": [
              "MovedOut",
              "Current",
              "Future"
            ],
            "type": "string",
            "description": "Indicates the tenant's current status in relation to the lease."
          },
          "MoveInDate": {
            "type": "string",
            "description": "Indicates the tenant's move-in date.",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LeaseTransactionMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Transaction unique identifier.",
            "format": "int32"
          },
          "Date": {
            "type": "string",
            "description": "Date of the transaction.",
            "format": "date"
          },
          "TransactionType": {
            "type": "string",
            "description": "Type of transaction that occurred.",
            "nullable": true
          },
          "TransactionTypeEnum": {
            "enum": [
              "Bill",
              "Check",
              "Charge",
              "Payment",
              "Credit",
              "Refund",
              "ApplyDeposit",
              "ElectronicFundsTransfer",
              "Other",
              "Deposit",
              "GeneralJournalEntry",
              "OwnerContribution",
              "ReversePayment",
              "ReverseElectronicFundsTransfer",
              "VendorCredit",
              "RentalApplicationFeePayment",
              "ReverseRentalApplicationFeePayment",
              "ReverseOwnerContribution",
              "VendorRefund",
              "UnreversedPayment",
              "UnreversedElectronicFundsTransfer",
              "UnreversedOwnerContribution",
              "UnreversedRentalApplicationFeePayment",
              "ReversedEftRefund"
            ],
            "type": "string",
            "description": "The type of transaction that occurred."
          },
          "TotalAmount": {
            "type": "number",
            "description": "Sum of all `Journal.Lines.Amount` entries in the transaction.",
            "format": "double"
          },
          "CheckNumber": {
            "type": "string",
            "description": "Check number associated with the transaction, if applicable.",
            "nullable": true
          },
          "LeaseId": {
            "type": "integer",
            "description": "Lease unique identifier associated with the transaction, if applicable. Null if value is not set.",
            "format": "int32",
            "nullable": true
          },
          "PayeeTenantId": {
            "type": "integer",
            "description": "The payee's tenant unique identifier associated with the transaction, where applicable.",
            "format": "int32",
            "nullable": true
          },
          "PaymentMethod": {
            "type": "string",
            "description": "The payment method used for the transaction.",
            "nullable": true
          },
          "Journal": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JournalMessage"
              }
            ],
            "description": "Journal associated with the transaction. The journal describes how the transaction should be recorded for accounting purposes.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a financial transaction"
      },
      "ListingContactMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Listing contact unique identifier.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of listing contact.",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Email of the listing contact.",
            "nullable": true
          },
          "PhoneNumber": {
            "type": "string",
            "description": "Phone number of the listing contact.",
            "nullable": true
          },
          "Website": {
            "type": "string",
            "description": "Website of the listing contact.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The contact information for the listing."
      },
      "ListingContactSaveMessage": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the listing contact. This name must be unique across all listing contacts."
          },
          "Email": {
            "type": "string",
            "description": "Email address for the listing contact.",
            "nullable": true
          },
          "PhoneNumber": {
            "type": "string",
            "description": "Phone number of the listing contact. The value must be between 10 and 20 characters, ideally formatted as (123) 123-1234.",
            "nullable": true
          },
          "Website": {
            "type": "string",
            "description": "Website associated with the listing contact. The value must be a valid URL including the HTTP protocol. For example http://www.example.com.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListingEntityFilePostMessage": {
        "required": [
          "FileName",
          "ShowInListing"
        ],
        "type": "object",
        "properties": {
          "FileName": {
            "minLength": 1,
            "type": "string",
            "description": "Name of file being uploaded. The value can not exceed 255 characters."
          },
          "Description": {
            "type": "string",
            "description": "A description of the file. The value cannot exceed 100 characters.",
            "nullable": true
          },
          "ShowInListing": {
            "type": "boolean",
            "description": "Indicates whether the image will be shown in listings."
          }
        },
        "additionalProperties": false
      },
      "ListingFileMessage": {
        "type": "object",
        "properties": {
          "Type": {
            "enum": [
              "Image",
              "Video"
            ],
            "type": "string",
            "description": "Indicates the media type of file."
          },
          "Name": {
            "type": "string",
            "description": "The name of the file.",
            "nullable": true
          },
          "Url": {
            "type": "string",
            "description": "The the full URL to access the file.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListingMessage": {
        "type": "object",
        "properties": {
          "ListingDate": {
            "type": "string",
            "description": "The date the listing was created in Buildium. It does not reflect when the listing was syndicated and listed in external systems. It can take 24-48 hours for a listing to be syndicated once it is created in Buildium.",
            "format": "date"
          },
          "Rent": {
            "type": "number",
            "description": "The asking rent amount for this unit.",
            "format": "double"
          },
          "Deposit": {
            "type": "number",
            "description": "The deposit amount for the unit.",
            "format": "double",
            "nullable": true
          },
          "LeaseTerms": {
            "type": "string",
            "description": "A summary of the lease terms.",
            "nullable": true
          },
          "AvailableDate": {
            "type": "string",
            "description": "The date the unit will be available to move in.",
            "format": "date"
          },
          "IsManagedExternally": {
            "type": "boolean",
            "description": "Indicates if the listing is managed by an external vendor. Note, the `Contact` property will be `null` if the this property is `true` as the contact information is managed by a vendor outside of Buildium."
          },
          "RentalApplicationUrl": {
            "type": "string",
            "description": "The URL to the online rental application hosted by Buildium.",
            "nullable": true
          },
          "Contact": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ListingContactMessage"
              }
            ],
            "description": "The contact information for the listing.",
            "nullable": true
          },
          "Property": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ListingPropertyMessage"
              }
            ],
            "description": "Details of the unit property.",
            "nullable": true
          },
          "Unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ListingUnitMessage"
              }
            ],
            "description": "Details of the unit.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListingPropertyMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Rental property unique identifier.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the rental property.",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "Address of the rental property.",
            "nullable": true
          },
          "NumberUnits": {
            "type": "integer",
            "description": "Number of units in the rental property.",
            "format": "int32"
          },
          "StructureDescription": {
            "type": "string",
            "description": "Description of the rental property structure.",
            "nullable": true
          },
          "YearBuilt": {
            "type": "integer",
            "description": "Year the rental property was built.",
            "format": "int32",
            "nullable": true
          },
          "Features": {
            "type": "array",
            "items": {
              "enum": [
                "LaundryRoom",
                "WheelchairAccess",
                "DoorAttendant",
                "Elevator",
                "Parking",
                "StorageUnits",
                "Pool",
                "FitnessCenter",
                "TennisCourt",
                "ClubHouse",
                "Power",
                "ParkingCommercial",
                "SprinklerSystem",
                "DockHighDoorsOrLoadingAvailable",
                "Availability24Hours",
                "AccentWalls",
                "BasketballCourt",
                "Bilingual",
                "BoatDocks",
                "BusinessCenter",
                "CarWashArea",
                "ChildCare",
                "ClubDiscount",
                "ConferenceRoom",
                "Concierge",
                "FreeWeights",
                "FurnishedAvailable",
                "GamingStations",
                "Garage",
                "Gate",
                "GroceryService",
                "GroupExercise",
                "GuestRoom",
                "Housekeeping",
                "HouseSitting",
                "JoggingWalkingTrails",
                "LakeFront",
                "LakeAccess",
                "Library",
                "MealService",
                "MediaRoom",
                "MultiUseRoom",
                "NightPatrol",
                "OnSiteMaintenance",
                "OnSiteManagement",
                "PackageReceiving",
                "PerDiemAccepted",
                "PlayGround",
                "Racquetball",
                "RecRoom",
                "Recycling",
                "Sauna",
                "ShortTermLease",
                "SmokeFree",
                "Spa",
                "Sundeck",
                "Transportation",
                "TVLounge",
                "ValetTrash",
                "Vintage",
                "VolleyballCourt",
                "WirelessInternet",
                "HighSpeedInternet"
              ],
              "type": "string"
            },
            "description": "List of features for the property.",
            "nullable": true
          },
          "IncludedInRent": {
            "type": "array",
            "items": {
              "enum": [
                "Gas",
                "Electric",
                "Trash",
                "Water",
                "HotWater",
                "Telephone",
                "Heat",
                "Cable",
                "AirCon",
                "Satellite",
                "Sewer",
                "BroadbandInternet"
              ],
              "type": "string"
            },
            "description": "The list of amenities included in rent the property has.",
            "nullable": true
          },
          "Files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingFileMessage"
            },
            "description": "List of media files associated with the property.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Details of the unit property."
      },
      "ListingPutMessage": {
        "required": [
          "AvailableDate",
          "IsManagedExternally",
          "Rent"
        ],
        "type": "object",
        "properties": {
          "Rent": {
            "type": "number",
            "description": "Rent for the listing.",
            "format": "double"
          },
          "Deposit": {
            "type": "number",
            "description": "Deposit for the listing.",
            "format": "double",
            "nullable": true
          },
          "LeaseTerms": {
            "type": "string",
            "description": "The lease term for the listing.",
            "nullable": true
          },
          "AvailableDate": {
            "type": "string",
            "description": "The date the listing is available.",
            "format": "date"
          },
          "ContactId": {
            "type": "integer",
            "description": "The contact Id for the listing.",
            "format": "int32",
            "nullable": true
          },
          "IsManagedExternally": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a rental unit's Listing Contact."
      },
      "ListingUnitMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Rental unit unique identifier.",
            "format": "int32"
          },
          "UnitNumber": {
            "type": "string",
            "description": "Unit number.",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "Address of the unit.",
            "nullable": true
          },
          "UnitBedrooms": {
            "enum": [
              "NotSet",
              "Studio",
              "OneBed",
              "TwoBed",
              "ThreeBed",
              "FourBed",
              "FiveBed",
              "SixBed",
              "SevenBed",
              "EightBed",
              "NineBedPlus"
            ],
            "type": "string",
            "description": "Number of bedrooms in the unit. Null if no value is set.",
            "nullable": true
          },
          "UnitBathrooms": {
            "enum": [
              "NotSet",
              "OneBath",
              "OnePointFiveBath",
              "TwoBath",
              "TwoPointFiveBath",
              "ThreeBath",
              "FourBath",
              "FiveBath",
              "FivePlusBath",
              "ThreePointFiveBath",
              "FourPointFiveBath"
            ],
            "type": "string",
            "description": "Number of bathrooms in the unit. Null if no value is set.",
            "nullable": true
          },
          "UnitSize": {
            "type": "integer",
            "description": "Size of the unit. Null if no value is set.",
            "format": "int32",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Description of the unit.",
            "nullable": true
          },
          "MarketRent": {
            "type": "number",
            "description": "Market rent of the unit. This value is separate from the lease rent and is typically used for rental listings. Null if no value is set.",
            "format": "double",
            "nullable": true
          },
          "Features": {
            "type": "array",
            "items": {
              "enum": [
                "CableReady",
                "Microwave",
                "HardwoodFloors",
                "HighSpeedInternet",
                "AirConditioning",
                "Refrigerator",
                "Dishwasher",
                "WalkinClosets",
                "BalconyOrDeckOrPatio",
                "GarageParking",
                "Carport",
                "FencedYard",
                "LaundryRoomOrHookups",
                "Fireplace",
                "CableReadyCommercial",
                "HighSpeedInternetCommercial",
                "AirConditioningCommercial",
                "Heating",
                "OvenOrRange",
                "HeatElectric",
                "HeatGas",
                "HeatOil",
                "PetsAllowed",
                "Balcony",
                "PrivateBalcony",
                "PrivatePatio",
                "Dryer",
                "Heat",
                "WD_Hookup",
                "Washer",
                "AdditionalStorage",
                "Alarm",
                "Carpet",
                "CeilingFan",
                "ControlledAccess",
                "Courtyard",
                "Disposal",
                "DoubleSinkVanity",
                "FramedMirrors",
                "Furnished",
                "Handrails",
                "IndividualClimateControl",
                "IslandKitchen",
                "LinenCloset",
                "Pantry",
                "Satellite",
                "Skylight",
                "TileFlooring",
                "VaultedCeiling",
                "View",
                "VinylFlooring",
                "WheelChair",
                "WindowCoverings",
                "DogFriendly",
                "CatFriendly"
              ],
              "type": "string"
            },
            "description": "List of features for the unit.",
            "nullable": true
          },
          "Files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListingFileMessage"
            },
            "description": "List of media files associated with the unit.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Details of the unit."
      },
      "LockPeriodSettingsGlobalMessage": {
        "type": "object",
        "properties": {
          "LockDate": {
            "type": "string",
            "description": "Financial transactions on or prior to this date will be locked.",
            "format": "date"
          }
        },
        "additionalProperties": false
      },
      "LockPeriodSettingsOverridesMessage": {
        "type": "object",
        "properties": {
          "Property": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PropertyMessage"
              }
            ],
            "description": "The property to which the override will be applied.",
            "nullable": true
          },
          "LockDate": {
            "type": "string",
            "description": "Accounting transactions related to the property specified in the Property field on or prior to this date will be locked.",
            "format": "date"
          }
        },
        "additionalProperties": false
      },
      "LoggedByStaffUserMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The staff user unique identifier.",
            "format": "int32"
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the staff user.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the staff user.",
            "nullable": true
          },
          "Href": {
            "type": "string",
            "description": "A link to the staff user resource.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The staff member that logged the call."
      },
      "LookupMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MailingTemplateMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Unique identifier of the mailing template.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the mailing template.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Description of the mailing template.",
            "nullable": true
          },
          "RecipientType": {
            "enum": [
              "Tenants",
              "AssociationOwners",
              "RentalOwners",
              "Vendors",
              "Applicants"
            ],
            "type": "string",
            "description": "Intended recipient type for mailings using the template."
          }
        },
        "additionalProperties": false
      },
      "MeterReadingDetailMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Unique identifier of the reading detail.",
            "format": "int32"
          },
          "UnitId": {
            "type": "integer",
            "description": "Unique identifier of the unit.",
            "format": "int32"
          },
          "UnitNumber": {
            "type": "string",
            "description": "Number of the unit.",
            "nullable": true
          },
          "PriorValue": {
            "type": "integer",
            "description": "Previous meter reading value.",
            "format": "int32"
          },
          "Value": {
            "type": "integer",
            "description": "Most recent meter reading value.",
            "format": "int32"
          },
          "ReadingDate": {
            "type": "string",
            "description": "Date the meter was read.",
            "format": "date"
          }
        },
        "additionalProperties": false
      },
      "MeterReadingDetailPutMessage": {
        "required": [
          "PriorValue",
          "UnitId",
          "Value"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Unique identifier of the detail being updated.",
            "format": "int32",
            "nullable": true
          },
          "UnitId": {
            "type": "integer",
            "description": "Unique identifier of the unit associated with the meter reading.",
            "format": "int32"
          },
          "PriorValue": {
            "type": "integer",
            "description": "Previous meter reading value.",
            "format": "int32"
          },
          "Value": {
            "type": "integer",
            "description": "Current meter reading value.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MeterReadingDetailsMessage": {
        "type": "object",
        "properties": {
          "ReadingDate": {
            "type": "string",
            "description": "Requested date for meter reading details. Details will be the most recent readings on or before this date.",
            "format": "date"
          },
          "MeterType": {
            "enum": [
              "Unknown",
              "Electric",
              "Gas",
              "Oil",
              "Water",
              "Sewer"
            ],
            "type": "string",
            "description": "Type of meter the reading is for."
          },
          "Details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeterReadingDetailMessage"
            },
            "description": "List of reading details for all units.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MeterReadingDetailsPutMessage": {
        "required": [
          "Details",
          "MeterType",
          "ReadingDate"
        ],
        "type": "object",
        "properties": {
          "ReadingDate": {
            "type": "string",
            "description": "Date the meter reading occurred on. Date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "MeterType": {
            "enum": [
              "Electric",
              "Gas",
              "Oil",
              "Water",
              "Sewer"
            ],
            "type": "string",
            "description": "Type of meter being read."
          },
          "Details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeterReadingDetailPutMessage"
            },
            "description": "Collection of detailed meter readings. At least one item is required."
          }
        },
        "additionalProperties": false
      },
      "MeterReadingMessage": {
        "type": "object",
        "properties": {
          "ReadingDate": {
            "type": "string",
            "description": "Date the meter reading was recorded.",
            "format": "date"
          },
          "ResponseMeterType": {
            "enum": [
              "Unknown",
              "Electric",
              "Gas",
              "Oil",
              "Water",
              "Sewer"
            ],
            "type": "string",
            "description": "Meter type for the meter reading."
          },
          "Value": {
            "type": "integer",
            "description": "Total value across all units for the meter reading.",
            "format": "int32"
          },
          "Usage": {
            "type": "integer",
            "description": "The amount used between the prior reading and this reading, calculated by subtracting prior value from value. Usage will be the basis used when charging tenants for a reading.",
            "format": "int32"
          },
          "ChargesCreated": {
            "type": "boolean",
            "description": "Indicates if charges were created for the meter reading."
          }
        },
        "additionalProperties": false
      },
      "MultipleBillPaymentAllocationLinePostMessage": {
        "type": "object",
        "properties": {
          "BillId": {
            "type": "integer",
            "description": "Unique identifier of the bill.",
            "format": "int32",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BillPaymentLinePostMessage"
            },
            "description": "A collection of payment line items.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MultipleBillPaymentsPostMessage": {
        "required": [
          "BankAccountId",
          "BillIds",
          "EntryDate"
        ],
        "type": "object",
        "properties": {
          "BankAccountId": {
            "type": "integer",
            "description": "Unique identifier of the bank account that the payment was made from.",
            "format": "int32"
          },
          "EntryDate": {
            "type": "string",
            "description": "Date the payment was made.",
            "format": "date"
          },
          "QueueChecksForPrinting": {
            "type": "boolean",
            "description": "Indicates whether to queue local check printing. Bank account associated with the bill must have check printing enabled to be true.",
            "nullable": true
          },
          "BillIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Unique identifiers of bills for full payment. Bill ids cannot be present here if they are part of the `PaymentAllocations` collection."
          },
          "VendorCreditIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Unique identifiers of the vendor credits to apply to the payment.",
            "nullable": true
          },
          "PaymentAllocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MultipleBillPaymentAllocationLinePostMessage"
            },
            "description": "A collection of payment allocations for individual bills. Bill ids cannot be present here if they are fully paid as part of the `BillIds` collection.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NoteMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Note unique identifier.",
            "format": "int32"
          },
          "Note": {
            "type": "string",
            "description": "Note contents.",
            "nullable": true
          },
          "LastUpdatedByUser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LastUpdatedByUserMessage"
              }
            ],
            "description": "User who most recently updated the note.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NotePostMessage": {
        "required": [
          "Note"
        ],
        "type": "object",
        "properties": {
          "Note": {
            "minLength": 1,
            "type": "string",
            "description": "Note contents. The value cannot exceed 65535 characters."
          }
        },
        "additionalProperties": false
      },
      "NotePutMessage": {
        "required": [
          "Note"
        ],
        "type": "object",
        "properties": {
          "Note": {
            "minLength": 1,
            "type": "string",
            "description": "Note contents. The value cannot exceed 65535 characters."
          }
        },
        "additionalProperties": false
      },
      "OfflinePaymentsMessage": {
        "type": "object",
        "properties": {
          "DisplayInfoInResidentCenter": {
            "type": "boolean",
            "description": "Indicates whether the offline payment information is displayed in the Buildium Resident Center."
          },
          "DisplayCompanyAddress": {
            "type": "boolean",
            "description": "Indicates whether to display the company address along with the offline payment information. If `DisplayInfoInResidentCenter` is false the company address will not be displayed."
          },
          "PaymentInstructions": {
            "type": "string",
            "description": "Directions for how to make offline payments. If `DisplayInfoInResidentCenter` is false the payment instructions will not be displayed.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Offline payment settings."
      },
      "OfflinePaymentsPutMessage": {
        "required": [
          "DisplayCompanyAddress",
          "DisplayInfoInResidentCenter"
        ],
        "type": "object",
        "properties": {
          "DisplayInfoInResidentCenter": {
            "type": "boolean",
            "description": "Indicates whether the offline payment information is displayed in the Buildium Resident Center."
          },
          "DisplayCompanyAddress": {
            "type": "boolean",
            "description": "Indicates whether to display the company address along with the offline payment information. If `DisplayInfoInResidentCenter` is false the company address will not be displayed."
          },
          "PaymentInstructions": {
            "type": "string",
            "description": "Directions for how to make offline payments. The value cannot exceed 65,535 characters. If `DisplayInfoInResidentCenter` is false the payment instructions will not be displayed.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Offline payment settings."
      },
      "OutstandingBalancesLineMessage": {
        "type": "object",
        "properties": {
          "GlAccountId": {
            "type": "integer",
            "description": "General ledger account unique identifier.",
            "format": "int32"
          },
          "TotalBalance": {
            "type": "number",
            "description": "Total balance of the account on the line item.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "OwnershipAccountAutoAllocatedPaymentPostMessage": {
        "required": [
          "Date",
          "PaymentMethod",
          "SendEmailReceipt",
          "TotalAmount"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "The date of the transaction. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "PaymentMethod": {
            "enum": [
              "Check",
              "Cash",
              "MoneyOrder",
              "CashierCheck",
              "DirectDeposit",
              "CreditCard",
              "ElectronicPayment"
            ],
            "type": "string",
            "description": "The payment method used for the transaction."
          },
          "PayeeUserId": {
            "type": "integer",
            "description": "The payee's user unique identifier.",
            "format": "int32",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "A brief note describing the reason for the payment. The value cannot exceed 65 characters.",
            "nullable": true
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "The reference Number of the transaction. The value cannot exceed 30 characters.",
            "nullable": true
          },
          "SendEmailReceipt": {
            "type": "boolean",
            "description": "An indicator for whether or not to send an email receipt to the payee. If the payee does not have an email address set, no email will be sent."
          },
          "TotalAmount": {
            "type": "number",
            "description": "The total amount of the payment being created.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "OwnershipAccountChargeRecurringTransactionMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unique identifier of the recurring charge schedule.",
            "format": "int32"
          },
          "OwnershipAccountId": {
            "type": "integer",
            "description": "The unique identifier of the ownership account that the recurring charge will be applied to.",
            "format": "int32"
          },
          "GLAccountId": {
            "type": "integer",
            "description": "The general ledger account unique identifier the recurring charge is applied to.",
            "format": "int32",
            "nullable": true
          },
          "RentId": {
            "type": "integer",
            "description": "The unique identifier of the scheduled Rent entity. If the charge is not associated with a Rent entity then the value will be `NULL`.",
            "format": "int32",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "The amount of the recurring charge.",
            "format": "double"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the recurring charge.",
            "nullable": true
          },
          "FirstOccurrenceDate": {
            "type": "string",
            "description": "The date the first occurence this charge was processed.",
            "format": "date",
            "nullable": true
          },
          "NextOccurrenceDate": {
            "type": "string",
            "description": "The next date the scheduled charge will be processed.",
            "format": "date"
          },
          "PostDaysInAdvance": {
            "type": "integer",
            "description": "Specifies the number of days ahead of the transaction date the charge will post on the lease ledger. This setting can be used to add the charge to the ledger ahead of the due date for visibility. For example, if the `FirstOccurrenceDate` is set to 8/10/2022 and this value is set to 5 then the charge will added to the ledger on 8/5/2022, but will have transaction date of 8/10/2022.",
            "format": "int32"
          },
          "OccurrencesRemaining": {
            "type": "integer",
            "description": "The number of remaining times this recurring charge will be processed.",
            "format": "int32",
            "nullable": true
          },
          "Frequency": {
            "enum": [
              "Monthly",
              "Weekly",
              "Every2Weeks",
              "Quarterly",
              "Yearly",
              "Every2Months",
              "Daily",
              "Every6Months",
              "OneTime"
            ],
            "type": "string",
            "description": "Indicates the frequency at which the recurring charge is processed."
          },
          "Duration": {
            "enum": [
              "Unspecified",
              "UntilEndOfTerm",
              "SpecificNumber",
              "SpecificDate"
            ],
            "type": "string",
            "description": "Specifies the period of time/occurrences the recurring charge will be processed. Note, if the `Frequency` field is set to `OneTime` this field should be set to `NULL` as any submitted value will be ignored."
          }
        },
        "additionalProperties": false
      },
      "OwnershipAccountCreditLinePostMessage": {
        "required": [
          "Amount",
          "GlAccountId"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Line item amount.",
            "format": "double"
          },
          "GlAccountId": {
            "type": "integer",
            "description": "The general ledger account identifier under which the line item amount will be recorded. The account must be a liability or income type.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "OwnershipAccountCreditPostMessage": {
        "required": [
          "CreditType",
          "Date",
          "Lines"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "Date of the transaction. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "Description of the transaction. The value cannot exceed 65 characters.",
            "nullable": true
          },
          "CreditType": {
            "enum": [
              "WaiveUnpaid",
              "Exchange",
              "PreviouslyDeposited"
            ],
            "type": "string",
            "description": "Indicates how the credit should be applied.\r\n<ul><li>WaiveUnpaid - This credit type allows for reversing one or more charges without losing record of what has changed.</li><li>Exchange - This credit type allows for one of the following: 1) Reimburse a resident for a out-of-pocket expense, 2) Compensate for a service, 3) Write-off a resident balance considered uncollectable.</li><li>PreviouslyDeposited - This credit type allows for issuing a credit against payments that have already been deposited.</li></ul>"
          },
          "OffsettingGLAccountId": {
            "type": "integer",
            "description": "Sets the offsetting general ledger account identifier for the credit.\r\n\r\nThis value must be provided when the `CreditType` field is set to `Exchange` or `PreviouslyDeposited`.\r\n\r\nWhen the `CreditType` is `Exchange` this must be an *expense* general ledger account type.\r\n\r\nWhen the `CreditType` is `PreviouslyDeposited` this must be an *equity* general ledger account type.",
            "format": "int32",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OwnershipAccountCreditLinePostMessage"
            },
            "description": "A collection of line items included in the credit. At least one line item is required."
          }
        },
        "additionalProperties": false
      },
      "OwnershipAccountDepositWithholdingLinePostMessage": {
        "required": [
          "Amount",
          "GLAccountId"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Line item amount.",
            "format": "double"
          },
          "GLAccountId": {
            "type": "integer",
            "description": "General Ledger Account identifier under which the line item amount will be recorded. Must be an Income account.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "OwnershipAccountDepositWithholdingLinePutMessage": {
        "required": [
          "Amount",
          "GLAccountId"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Line item amount.",
            "format": "double"
          },
          "GLAccountId": {
            "type": "integer",
            "description": "General Ledger Account identifier under which the line item amount will be recorded. Must be an Income account.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "OwnershipAccountDepositWithholdingPostMessage": {
        "required": [
          "DepositLiabilityGLAccountId",
          "EntryDate"
        ],
        "type": "object",
        "properties": {
          "EntryDate": {
            "type": "string",
            "description": "Date of the deposit withholding. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "DepositLiabilityGLAccountId": {
            "type": "integer",
            "description": "The identifier of the liability general ledger account from which to withhold the funds. Note, the specified liability account must have a positive balance.",
            "format": "int32"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the withholding. Memo cannot exceed 65 characters.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OwnershipAccountDepositWithholdingLinePostMessage"
            },
            "description": "Line items specifying the income accounts the deposit will be applied to. The total amount of the line items can not exceed the balance of the liability account.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OwnershipAccountDepositWithholdingPutMessage": {
        "required": [
          "DepositLiabilityGLAccountId",
          "EntryDate"
        ],
        "type": "object",
        "properties": {
          "EntryDate": {
            "type": "string",
            "description": "Date of the deposit withholding. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "DepositLiabilityGLAccountId": {
            "type": "integer",
            "description": "The identifier of the liability general ledger account from which to withhold the funds.",
            "format": "int32"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the withholding. Memo cannot exceed 65 characters.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OwnershipAccountDepositWithholdingLinePutMessage"
            },
            "description": "Line items specifying the income accounts the deposit will be applied to.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OwnershipAccountLedgerChargeLineMessage": {
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Amount of the line item.",
            "format": "double"
          },
          "GLAccountId": {
            "type": "integer",
            "description": "Unique ientifier of the general ledger account associated with the charge.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "OwnershipAccountLedgerChargeLinesPutMessage": {
        "required": [
          "Amount",
          "GLAccountId"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Line item amount.",
            "format": "double"
          },
          "GLAccountId": {
            "type": "integer",
            "description": "The general ledger account identifier under which the line item amount will be recorded. The account must be a liability or income type.",
            "format": "int32"
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "Reference number associated with the charge. The value cannot exceed 30 characters.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OwnershipAccountLedgerChargeLinesSaveMessage": {
        "required": [
          "Amount",
          "GlAccountId"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Line item amount.",
            "format": "double"
          },
          "GlAccountId": {
            "type": "integer",
            "description": "The general ledger account identifier under which the line item amount will be recorded. The account must be a liability or income type.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "OwnershipAccountLedgerChargeMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Charge unique identifier.",
            "format": "int32"
          },
          "Date": {
            "type": "string",
            "description": "Date of the charge.",
            "format": "date"
          },
          "TotalAmount": {
            "type": "number",
            "description": "Sum of all `Lines.Amount` entries in the charge.",
            "format": "double"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the charge.",
            "nullable": true
          },
          "BillId": {
            "type": "integer",
            "description": "The bill identifier this charge is associated with, if applicable.",
            "format": "int32",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OwnershipAccountLedgerChargeLineMessage"
            },
            "description": "A collection of line items associated with the charge.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OwnershipAccountLedgerChargePostMessage": {
        "required": [
          "Date",
          "Lines"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "Date of the charge. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the charge. The value cannot exceed 65 characters.",
            "nullable": true
          },
          "BillId": {
            "type": "integer",
            "description": "Unique identifier of the bill this charge is associated to. If provided, the property of the\r\nownership account ledger the charge is being created in must be in at least one line item of the bill.",
            "format": "int32",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OwnershipAccountLedgerChargeLinesSaveMessage"
            },
            "description": "Collection of line items to be included in the charge. All existing line items will be deleted and replaced with the line items in this request. At least 1 line item is required."
          }
        },
        "additionalProperties": false
      },
      "OwnershipAccountLedgerChargePutMessage": {
        "required": [
          "Date",
          "Lines"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "Date of the charge. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the charge. The value cannot exceed 65 characters.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OwnershipAccountLedgerChargeLinesPutMessage"
            },
            "description": "A collection of line items included in the charge. At least one line item is required."
          }
        },
        "additionalProperties": false
      },
      "OwnershipAccountLedgerPaymentLineSaveMessage": {
        "required": [
          "Amount",
          "GLAccountId"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Amount of the line item.",
            "format": "double"
          },
          "GLAccountId": {
            "type": "integer",
            "description": "The general ledger account identifier under which the line item amount will be recorded.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a line item on an Ownership Account Ledger Payment"
      },
      "OwnershipAccountLedgerPaymentPostMessage": {
        "required": [
          "Date",
          "Lines",
          "PaymentMethod",
          "SendEmailReceipt"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "The date of the transaction. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "PaymentMethod": {
            "enum": [
              "Check",
              "Cash",
              "MoneyOrder",
              "CashierCheck",
              "DirectDeposit",
              "CreditCard",
              "ElectronicPayment"
            ],
            "type": "string",
            "description": "The payment method used for the transaction."
          },
          "PayeeUserId": {
            "type": "integer",
            "description": "The payee's user unique identifier.",
            "format": "int32",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "A brief note describing the reason for the payment. The value cannot exceed 65 characters.",
            "nullable": true
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "The reference Number of the transaction. The value cannot exceed 30 characters.",
            "nullable": true
          },
          "SendEmailReceipt": {
            "type": "boolean",
            "description": "An indicator for whether or not to send an email receipt to the payee. If the payee does not have an email address set, no email will be sent."
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OwnershipAccountLedgerPaymentLineSaveMessage"
            },
            "description": "A collection of line items included in the payment. At least one line item is required."
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a Payment made in a particular Ownership Account Ledger"
      },
      "OwnershipAccountLedgerPaymentPutMessage": {
        "required": [
          "Date",
          "Lines",
          "PaymentMethod"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "The date of the transaction. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "PaymentMethod": {
            "enum": [
              "Check",
              "Cash",
              "MoneyOrder",
              "CashierCheck",
              "DirectDeposit",
              "CreditCard",
              "ElectronicPayment",
              "BuildiumEFT",
              "BuildiumCC",
              "RetailCash"
            ],
            "type": "string",
            "description": "The payment method used for the transaction."
          },
          "PayeeUserId": {
            "type": "integer",
            "description": "The payee's user unique identifier.",
            "format": "int32",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "A brief note describing the reason for the payment. The value cannot exceed 65 characters.",
            "nullable": true
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "The reference Number of the transaction. The value cannot exceed 30 characters.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OwnershipAccountLedgerPaymentLineSaveMessage"
            },
            "description": "A collection of line items included in the payment. At least one line item is required."
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a Payment made in a particular Ownership Account Ledger"
      },
      "OwnershipAccountOutstandingBalanceMessage": {
        "type": "object",
        "properties": {
          "OwnershipAccountId": {
            "type": "integer",
            "description": "Ownership account unique identifier.",
            "format": "int32"
          },
          "AssociationId": {
            "type": "integer",
            "description": "Association unique identifier .",
            "format": "int32"
          },
          "UnitId": {
            "type": "integer",
            "description": "Association unit unique identifier.",
            "format": "int32",
            "nullable": true
          },
          "Balance0To30Days": {
            "type": "number",
            "description": "Outstanding balance due from within the last 30 days.",
            "format": "double"
          },
          "Balance31To60Days": {
            "type": "number",
            "description": "Outstanding balance due from within 31 to 60 days ago.",
            "format": "double"
          },
          "Balance61To90Days": {
            "type": "number",
            "description": "Outstanding balance due from within 61 to 90 days ago.",
            "format": "double"
          },
          "BalanceOver90Days": {
            "type": "number",
            "description": "Outstanding balance due from over 90 days ago.",
            "format": "double"
          },
          "TotalBalance": {
            "type": "number",
            "description": "Total outstanding balance due.",
            "format": "double"
          },
          "Balances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OutstandingBalancesLineMessage"
            },
            "description": "Breakdown of outstanding balance due by general ledger account.",
            "nullable": true
          },
          "PastDueEmailSentDate": {
            "type": "string",
            "description": "Date of notification for outstanding balance.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OwnershipAccountRecurringCreditMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unique identifier of the recurring credit schedule.",
            "format": "int32"
          },
          "OwnershipAccountId": {
            "type": "integer",
            "description": "The unique identifier of the ownership account that the recurring credit will be applied to.",
            "format": "int32"
          },
          "CreditType": {
            "enum": [
              "WaiveUnpaid",
              "Exchange",
              "PreviouslyDeposited"
            ],
            "type": "string",
            "description": "Indicates how the credit will be applied.\r\n<ul><li>WaiveUnpaid - This credit type allows for reversing one or more charges without losing record of what has changed.</li><li>Exchange - This credit type allows for one of the following: 1) Reimburse a resident for a out-of-pocket expense, 2) Compensate for a service, 3) Write-off a resident balance considered uncollectable.</li><li>PreviouslyDeposited - This credit type allows for issuing a credit against payments that have already been deposited.</li></ul>"
          },
          "OffsettingGLAccountId": {
            "type": "integer",
            "description": "Offsetting general ledger account identifier. The offsetting general ledger account acts as the expense account.",
            "format": "int32",
            "nullable": true
          },
          "PostingRuleGLAccountId": {
            "type": "integer",
            "description": "Indicates whether to apply a posting rule when processing the transaction that would only record the credit if a prior payment has been made.\r\n\r\n\r\n\r\nSet the field value to the <b>Rent Income</b> general ledger account identifier if the credit should only be recorded when a payment was made and applied to the <b>Rent Income</b> general ledger account.\r\n\r\n\r\n\r\nSet the field value to the <b>Accounts Receivable</b> general ledger account identifier if the credit should only be recorded when a payment was made and applied to *any* general ledger account.\r\n\r\n\r\n\r\nSet the field value to <b>null</b> to always record the credit.",
            "format": "int32",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecurringTransactionLineMessage"
            },
            "description": "Line items describing how the credit is to be allocated when the recurring transaction is processed.",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "The total amount of the recurring credit based on sum of the `Lines.Amount`.",
            "format": "double"
          },
          "OccurrencesRemaining": {
            "type": "integer",
            "description": "The number of remaining times this recurring credit will be processed.",
            "format": "int32",
            "nullable": true
          },
          "FirstOccurrenceDate": {
            "type": "string",
            "description": "The date the first occurrence this credit was processed.",
            "format": "date",
            "nullable": true
          },
          "NextOccurrenceDate": {
            "type": "string",
            "description": "The next date the scheduled credit will be processed.",
            "format": "date"
          },
          "PostDaysInAdvance": {
            "type": "integer",
            "description": "Specifies the number of days ahead of the transaction date the credit will post on the lease ledger. This setting can be used to add the credit to the ledger ahead of the due date for visibility. For example, if the `FirstOccurrenceDate` is set to 8/10/2022 and this value is set to 5 then the charge will added to the ledger on 8/5/2022, but will have transaction date of 8/10/2022.",
            "format": "int32"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the recurring credit.",
            "nullable": true
          },
          "Frequency": {
            "enum": [
              "Monthly",
              "Weekly",
              "Every2Weeks",
              "Quarterly",
              "Yearly",
              "Every2Months",
              "Daily",
              "Every6Months",
              "OneTime"
            ],
            "type": "string",
            "description": "Indicates the frequency at which the recurring credit is processed."
          },
          "Duration": {
            "enum": [
              "Unspecified",
              "UntilEndOfTerm",
              "SpecificNumber",
              "SpecificDate"
            ],
            "type": "string",
            "description": "Specifies the period of time/occurrences the recurring credit will be processed. Note, if the `Frequency` field is set to `OneTime` this field should be set to `NULL` as any submitted value will be ignored."
          }
        },
        "additionalProperties": false
      },
      "OwnershipAccountRecurringPaymentMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unique identifier of the recurring payment schedule.",
            "format": "int32"
          },
          "OwnershipAccountId": {
            "type": "integer",
            "description": "The unique identifier of the ownership account that the recurring payment will be applied to.",
            "format": "int32"
          },
          "Payer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayeeMessage"
              }
            ],
            "description": "User information for the resident making the payment.",
            "nullable": true
          },
          "PaymentMethod": {
            "enum": [
              "None",
              "Check",
              "Cash",
              "MoneyOrder",
              "CashierCheck",
              "DirectDeposit",
              "CreditCard",
              "ElectronicPayment",
              "RetailCash"
            ],
            "type": "string",
            "description": "The method of payment for the transaction."
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecurringTransactionLineMessage"
            },
            "description": "Line items describing how the payment is to be allocated when the recurring transaction is processed.",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "The total amount of the recurring payment based on sum of the `Lines.Amount`.",
            "format": "double"
          },
          "FirstOccurrenceDate": {
            "type": "string",
            "description": "The date the first occurence this payment was processed.",
            "format": "date"
          },
          "NextOccurrenceDate": {
            "type": "string",
            "description": "The next date the scheduled payment will be processed.",
            "format": "date"
          },
          "PostDaysInAdvance": {
            "type": "integer",
            "description": "Specifies the number of days ahead of the transaction date the payment will post on the lease ledger. This setting can be used to add the payment to the ledger ahead of the due date for visibility. For example, if the `FirstOccurrenceDate` is set to 8/10/2022 and this value is set to 5 then the charge will added to the ledger on 8/5/2022, but will have transaction date of 8/10/2022.",
            "format": "int32"
          },
          "Frequency": {
            "enum": [
              "Monthly",
              "Weekly",
              "Every2Weeks",
              "Quarterly",
              "Yearly",
              "Every2Months",
              "Daily",
              "Every6Months",
              "OneTime"
            ],
            "type": "string",
            "description": "Specifies the frequency at which the recurring payment will be processed."
          },
          "Duration": {
            "enum": [
              "Unspecified",
              "UntilEndOfTerm",
              "SpecificNumber",
              "SpecificDate"
            ],
            "type": "string",
            "description": "Specifies the period of time/occurrences the recurring payment will be processed. Note, if the `Frequency` field is set to `OneTime` this field should be set to `NULL` as any submitted value will be ignored."
          },
          "OccurrencesRemaining": {
            "type": "integer",
            "description": "The number of remaining times this recurring payment will be processed.",
            "format": "int32",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the recurring payment.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OwnershipAccountRefundLineMessage": {
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Amount of the account on the line item.",
            "format": "double"
          },
          "GLAccountId": {
            "type": "integer",
            "description": "Unique identifier of the general ledger account associated with the refund.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "OwnershipAccountRefundLinesPostMessage": {
        "required": [
          "Amount",
          "GLAccountId"
        ],
        "type": "object",
        "properties": {
          "Amount": {
            "type": "number",
            "description": "Line item amount.",
            "format": "double"
          },
          "GLAccountId": {
            "type": "integer",
            "description": "The general ledger account identifier under which the line item amount will be recorded. The account must be a liability or income type.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "OwnershipAccountRefundMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Refund unique identifier.",
            "format": "int32"
          },
          "Date": {
            "type": "string",
            "description": "Date of the refund.",
            "format": "date"
          },
          "Payees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PayeeMessage"
            },
            "description": "List of payees being refunded.",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the refund, if applicable.",
            "nullable": true
          },
          "CheckNumber": {
            "type": "string",
            "description": "Check number associated with the refund, if applicable.",
            "nullable": true
          },
          "BankAccountId": {
            "type": "integer",
            "description": "Unique identifier of the bank account that the refund was made from.",
            "format": "int32"
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "Address to be displayed on the refund check.",
            "nullable": true
          },
          "TotalAmount": {
            "type": "number",
            "description": "Total amount of the refund.",
            "format": "double"
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OwnershipAccountRefundLineMessage"
            },
            "description": "A collection of line items included in the refund.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OwnershipAccountRefundPostMessage": {
        "required": [
          "Address",
          "BankAccountId",
          "Date",
          "Lines",
          "PayeeUserIds"
        ],
        "type": "object",
        "properties": {
          "Date": {
            "type": "string",
            "description": "The date of the refund. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "PayeeUserIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Unique identifiers of the users receiving the refund."
          },
          "Memo": {
            "type": "string",
            "description": "A brief note describing the reason for the refund. The value cannot exceed 65 characters.",
            "nullable": true
          },
          "CheckNumber": {
            "type": "string",
            "description": "Check number associated with the refund, if applicable. The value cannot exceed 30 characters.",
            "nullable": true
          },
          "BankAccountId": {
            "type": "integer",
            "description": "Unique identifier of the bank account the refund is issued from.",
            "format": "int32"
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Address to be displayed on the refund check."
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OwnershipAccountRefundLinesPostMessage"
            },
            "description": "A collection of line items included in the refund. At least one line item is required."
          }
        },
        "additionalProperties": false
      },
      "OwnershipAccountTransactionMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Transaction unique identifier.",
            "format": "int32"
          },
          "Date": {
            "type": "string",
            "description": "Date of the transaction.",
            "format": "date"
          },
          "TransactionType": {
            "type": "string",
            "description": "Type of transaction that occurred.",
            "nullable": true
          },
          "TransactionTypeEnum": {
            "enum": [
              "Bill",
              "Check",
              "Charge",
              "Payment",
              "Credit",
              "Refund",
              "ApplyDeposit",
              "ElectronicFundsTransfer",
              "Other",
              "Deposit",
              "GeneralJournalEntry",
              "OwnerContribution",
              "ReversePayment",
              "ReverseElectronicFundsTransfer",
              "VendorCredit",
              "RentalApplicationFeePayment",
              "ReverseRentalApplicationFeePayment",
              "ReverseOwnerContribution",
              "VendorRefund",
              "UnreversedPayment",
              "UnreversedElectronicFundsTransfer",
              "UnreversedOwnerContribution",
              "UnreversedRentalApplicationFeePayment",
              "ReversedEftRefund"
            ],
            "type": "string",
            "description": "The type of transaction that occurred."
          },
          "TotalAmount": {
            "type": "number",
            "description": "Sum of all `Journal.Lines.Amount` entries in the transaction.",
            "format": "double"
          },
          "CheckNumber": {
            "type": "string",
            "description": "Check number associated with the transaction, if applicable.",
            "nullable": true
          },
          "OwnershipAccountId": {
            "type": "integer",
            "description": "Ownership account unique identifier associated with the transaction, if applicable. Null if value is not set.",
            "format": "int32",
            "nullable": true
          },
          "PayeeAssociationOwnerId": {
            "type": "integer",
            "description": "The payee's association owner unique identifier associated with the transaction, where applicable.",
            "format": "int32",
            "nullable": true
          },
          "PaymentMethod": {
            "type": "string",
            "description": "The payment method used for the transaction.",
            "nullable": true
          },
          "Journal": {
            "allOf": [
              {
                "$ref": "#/components/schemas/JournalMessage"
              }
            ],
            "description": "Journal associated with the transaction. The journal describes how the transaction should be recorded for accounting purposes.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a financial transaction"
      },
      "PaidByMessage": {
        "type": "object",
        "properties": {
          "AccountingEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountingEntityMessage"
              }
            ],
            "description": "Accounting entity associated with the line item.",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "Amount of the line item.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Transaction line item."
      },
      "PartialPaymentSettingsMessage": {
        "type": "object",
        "properties": {
          "RequirePaymentsInFull": {
            "type": "boolean",
            "description": "Partial payment settings."
          }
        },
        "additionalProperties": false
      },
      "PartialPaymentSettingsPatchMessage": {
        "type": "object",
        "properties": {
          "RequirePaymentsInFull": {
            "type": "boolean",
            "description": "Whether or not the ownership account payments are required in full.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "example": [
          {
            "op": "replace",
            "path": "/myPath",
            "value": "myNewValue"
          },
          {
            "op": "move",
            "path": "/oldPath",
            "value": "/newPath"
          },
          {
            "op": "test",
            "path": "/myCollection/0/value",
            "value": "42"
          },
          {
            "op": "replace",
            "path": "/myCollection/0/value",
            "value": "77"
          }
        ]
      },
      "ParticipantMessage": {
        "type": "object",
        "properties": {
          "EntityId": {
            "type": "integer",
            "description": "The unique identifier for the participant entity.",
            "format": "int32"
          },
          "EntityResources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParticipantResourceMessage"
            },
            "description": "A list of the participants entity types and links to the entity resource. Note, that a participant can have more than one type assigned to them. For example, they could be both a vendor and a rental owner.",
            "nullable": true
          },
          "UnitAgreement": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UnitAgreementMessage"
              }
            ],
            "description": "The unit agreement associated with the participant.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The participant in the phone call."
      },
      "ParticipantResourceMessage": {
        "type": "object",
        "properties": {
          "Type": {
            "enum": [
              "Vendor",
              "RentalOwner",
              "RentalTenant",
              "AssociationOwner"
            ],
            "type": "string",
            "description": "Indicates the participant type."
          },
          "Href": {
            "type": "string",
            "description": "A link to the participant resource.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The participant in the phone call."
      },
      "PayeeMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The payer user unique identifier.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "The name of the payer.",
            "nullable": true
          },
          "Type": {
            "enum": [
              "Tenant",
              "AssociationTenant",
              "AssociationOwner",
              "RentalOwner",
              "Vendor",
              "Staff",
              "Applicant"
            ],
            "type": "string",
            "description": "The payer user entity type."
          },
          "Href": {
            "type": "string",
            "description": "A link to the resource endpoint associated with the payer.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The payer of the transaction."
      },
      "PaymentDetailMessage": {
        "type": "object",
        "properties": {
          "PaymentMethod": {
            "enum": [
              "None",
              "Check",
              "Cash",
              "MoneyOrder",
              "CashierCheck",
              "DirectDeposit",
              "CreditCard",
              "ElectronicPayment",
              "RetailCash"
            ],
            "type": "string",
            "description": "The payment method used for the transaction."
          },
          "Payee": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PayeeMessage"
              }
            ],
            "description": "The payee of the transaction.",
            "nullable": true
          },
          "IsInternalTransaction": {
            "type": "boolean",
            "description": "Whether the transaction is processed internally."
          },
          "InternalTransactionStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InternalTransactionStatusMessage"
              }
            ],
            "description": "The status of the transaction. Note, this is only applicable for if `IsInternalTransaction` is `true`.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This object represents payment details."
      },
      "PaymentRecurringTransactionPostMessage": {
        "required": [
          "FirstOccurrenceDate",
          "Frequency",
          "PaymentMethod",
          "PostDaysInAdvance"
        ],
        "type": "object",
        "properties": {
          "PayerUserId": {
            "type": "integer",
            "description": "The unique identifier of the user making the payment.",
            "format": "int32",
            "nullable": true
          },
          "PaymentMethod": {
            "enum": [
              "Check",
              "Cash",
              "MoneyOrder",
              "CashierCheck",
              "DirectDeposit",
              "CreditCard",
              "ElectronicPayment"
            ],
            "type": "string",
            "description": "The payment method for the transaction."
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecurringTransactionLinePostMessage"
            },
            "description": "Line items describing how the payment is to be allocated when the payment is processed.",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the recurring payment. This value cannot exceed 65 characters.",
            "nullable": true
          },
          "FirstOccurrenceDate": {
            "type": "string",
            "description": "The date the payment will first be processed. This value along with the `Frequency` is also used as the basis for the date set on the transactions in future occurrences.",
            "format": "date"
          },
          "PostDaysInAdvance": {
            "type": "integer",
            "description": "Specifies the number of days ahead of the transaction date the payment will post on the lease ledger. This setting can be used to add the payment to the ledger ahead of the due date for visibility. For example, if the `FirstOccurrenceDate` is set to 8/10/2022 and this value is set to 5 then the charge will added to the ledger on 8/5/2022, but will have transaction date of 8/10/2022. Note, the value must be between 0 to 45 or set to 60, 75 or 90.",
            "format": "int32"
          },
          "Frequency": {
            "enum": [
              "Monthly",
              "Weekly",
              "Every2Weeks",
              "Quarterly",
              "Yearly",
              "Every2Months",
              "Daily",
              "Every6Months",
              "OneTime"
            ],
            "type": "string",
            "description": "Specifies the frequency at which the recurring payment will be processed."
          },
          "Duration": {
            "enum": [
              "UntilEndOfTerm",
              "SpecificNumber"
            ],
            "type": "string",
            "description": "Specifies the period of time/occurrences the recurring payment will be processed. Note, if the `Frequency` field is set to `OneTime` this field should be set to `NULL` as any submitted value will be ignored.",
            "nullable": true
          },
          "NumberOfOccurrences": {
            "type": "integer",
            "description": "Indicates the number of times the recurring payment should be processed. This value is required if the `Duration` field is set to `SpecificNumber`. This value can not exceed 100.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentTransactionsMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Payment transaction unique identifier.",
            "format": "int32"
          },
          "AccountingEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountingEntityMessage"
              }
            ],
            "description": "The accounting entity associated with the payment.",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "Payment amount.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "PhoneLogMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Phone log unique identifier.",
            "format": "int32"
          },
          "Participant": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ParticipantMessage"
              }
            ],
            "description": "The participant in the phone call.",
            "nullable": true
          },
          "LoggedByStaffUser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LoggedByStaffUserMessage"
              }
            ],
            "description": "The staff member that logged the call.",
            "nullable": true
          },
          "Subject": {
            "type": "string",
            "description": "Subject of the phone call.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Description of the phone call.",
            "nullable": true
          },
          "CallDateTime": {
            "type": "string",
            "description": "The date and time in UTC of when the call took place.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "PhoneLogParticipantPostMessage": {
        "required": [
          "EntityId",
          "EntityType"
        ],
        "type": "object",
        "properties": {
          "EntityType": {
            "enum": [
              "Vendor",
              "RentalOwner",
              "RentalTenant",
              "AssociationOwner"
            ],
            "type": "string",
            "description": "The type of participant entity."
          },
          "EntityId": {
            "type": "integer",
            "description": "The unique identifier for the participant entity.",
            "format": "int32"
          },
          "UnitAgreement": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneLogParticipantUnitAgreementPostMessage"
              }
            ],
            "description": "The unit agreement associated with the participant.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The participant in the phone call."
      },
      "PhoneLogParticipantUnitAgreementPostMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unit agreement unique identifier. Note, if a value is provided in this field then `Type` must also be provided.",
            "format": "int32"
          },
          "Type": {
            "enum": [
              "NotSet",
              "Lease",
              "OwnershipAccount"
            ],
            "type": "string",
            "description": "The type of unit agreement. Note, this field is required if a value is provided for the `Id` field."
          }
        },
        "additionalProperties": false,
        "description": "The unit agreement associated with the participant."
      },
      "PhoneLogPostMessage": {
        "required": [
          "CallDateTime",
          "Description",
          "Participant",
          "Subject"
        ],
        "type": "object",
        "properties": {
          "Participant": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneLogParticipantPostMessage"
              }
            ],
            "description": "The participant in the phone call."
          },
          "Subject": {
            "minLength": 1,
            "type": "string",
            "description": "Subject of the phone call. This value is restricted to a maximum of 255 characters."
          },
          "Description": {
            "minLength": 1,
            "type": "string",
            "description": "Description of the phone call. This value is restricted to a maximum of 65,535 characters."
          },
          "CallDateTime": {
            "type": "string",
            "description": "The date and time the call took place. Time of the phone call must be UTC. Example format: \"2021-01-26T13:59:15Z\"",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "PhoneLogPutMessage": {
        "required": [
          "CallDateTime",
          "Description",
          "Subject"
        ],
        "type": "object",
        "properties": {
          "Subject": {
            "minLength": 1,
            "type": "string",
            "description": "Subject of the phone call. This value is restricted to a maximum of 255 characters."
          },
          "Description": {
            "minLength": 1,
            "type": "string",
            "description": "Description of the phone call. This value is restricted to a maximum of 65,535 characters."
          },
          "CallDateTime": {
            "type": "string",
            "description": "The date and time the call took place. Time of the phone call must be UTC. Example format: \"2021-01-26T13:59:15Z\"",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "PhoneNumberMessage": {
        "type": "object",
        "properties": {
          "Number": {
            "type": "string",
            "description": "Phone number.",
            "nullable": true
          },
          "Type": {
            "enum": [
              "NotSet",
              "Home",
              "Office",
              "Cell",
              "Personal",
              "Fax",
              "Other"
            ],
            "type": "string",
            "description": "Indicates the type of phone number."
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a phone number."
      },
      "PhoneNumbersMessage": {
        "type": "object",
        "properties": {
          "Home": {
            "type": "string",
            "description": "Home phone number. If provided, must be between 10 and 20 characters, ideally formatted as `(123) 123-1234`.",
            "nullable": true
          },
          "Work": {
            "type": "string",
            "description": "Work phone number. If provided, must be between 10 and 20 characters, ideally formatted as `(123) 123-1234`.",
            "nullable": true
          },
          "Mobile": {
            "type": "string",
            "description": "Mobile phone number. If provided, must be between 10 and 20 characters, ideally formatted as `(123) 123-1234`.",
            "nullable": true
          },
          "Fax": {
            "type": "string",
            "description": "Fax number. If provided, must be between 10 and 20 characters, ideally formatted as `(123) 123-1234`.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Phone numbers."
      },
      "PropertyGroupMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Property group unique identifier.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Property group name.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Property group description.",
            "nullable": true
          },
          "Properties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyMessage"
            },
            "description": "A list of association and/or rental property unique identifiers assigned to the property group.",
            "nullable": true
          },
          "CreatedByUser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatedByUserMessage"
              }
            ],
            "description": "User who created the property group.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PropertyGroupPostMessage": {
        "required": [
          "Name",
          "PropertyIds"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "Property group name. The name can not exceed 127 characters."
          },
          "Description": {
            "type": "string",
            "description": "Description of the property group. The description can not exceed 1000 characters.",
            "nullable": true
          },
          "PropertyIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A list of association and/or rental property unique identifiers to assign to the property group. Property groups cannot be created using inactive associations and/or rental properties."
          }
        },
        "additionalProperties": false
      },
      "PropertyGroupPutMessage": {
        "required": [
          "Name",
          "PropertyIds"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "Property group name. The name can not exceed 127 characters."
          },
          "Description": {
            "type": "string",
            "description": "Description of the property group. The description can not exceed 1000 characters.",
            "nullable": true
          },
          "PropertyIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A list of association and/or rental property unique identifiers to assign to the property group. Property groups cannot be updated using inactive associations and/or rental properties."
          }
        },
        "additionalProperties": false
      },
      "PropertyManagerMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Property manager unique identifier.",
            "format": "int32"
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the property manager.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the property manager.",
            "nullable": true
          },
          "CompanyName": {
            "type": "string",
            "description": "Company name of the rental owner. Empty if `IsCompany` is `false`.",
            "nullable": true
          },
          "IsCompany": {
            "type": "boolean",
            "description": "Denotes if the property manager is a company."
          },
          "ProfilePhotoUrl": {
            "type": "string",
            "description": "Profile photo URL for the property manager.",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Email of the property manager.",
            "nullable": true
          },
          "PhoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberMessage"
            },
            "description": "List of phone numbers associated with the property manager.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a property manager."
      },
      "PropertyMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The property unique identifier.",
            "format": "int32"
          },
          "Type": {
            "enum": [
              "Association",
              "Rental"
            ],
            "type": "string",
            "description": "The property type."
          },
          "Href": {
            "type": "string",
            "description": "A link to the property entity resource.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Property information."
      },
      "RecurringTransactionLineMessage": {
        "type": "object",
        "properties": {
          "GLAccountId": {
            "type": "integer",
            "description": "The general ledger account unique identifier the recurring transaction is related to.",
            "format": "int32"
          },
          "Amount": {
            "type": "number",
            "description": "Amount of the line item.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "RecurringTransactionLinePostMessage": {
        "required": [
          "Amount",
          "GLAccountId"
        ],
        "type": "object",
        "properties": {
          "GLAccountId": {
            "type": "integer",
            "description": "The general ledger account identifier under which the line item amount will be recorded. The account must be a liability or income type.",
            "format": "int32"
          },
          "Amount": {
            "type": "number",
            "description": "Line item amount.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "RecurringTransactionMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unique identifier for the recurring transaction schedule.",
            "format": "int32"
          },
          "TransactionType": {
            "enum": [
              "Bill",
              "Check",
              "Charge",
              "Payment",
              "Credit",
              "Refund",
              "ApplyDeposit",
              "ElectronicFundsTransfer",
              "Other",
              "Deposit",
              "GeneralJournalEntry",
              "OwnerContribution",
              "ReversePayment",
              "ReverseElectronicFundsTransfer",
              "VendorCredit",
              "RentalApplicationFeePayment",
              "ReverseRentalApplicationFeePayment",
              "ReverseOwnerContribution",
              "VendorRefund",
              "UnreversedPayment",
              "UnreversedElectronicFundsTransfer",
              "UnreversedOwnerContribution",
              "UnreversedRentalApplicationFeePayment",
              "ReversedEftRefund"
            ],
            "type": "string",
            "description": "Indicates the type of transaction to be applied to the ledger."
          },
          "IsExpired": {
            "type": "boolean",
            "description": "Indicates if the recurring transaction schedule has expired."
          },
          "RentId": {
            "type": "integer",
            "description": "The unique identifier of the scheduled Rent entity. This field is only applicable for `Charge` transaction types.",
            "format": "int32",
            "nullable": true
          },
          "OffsettingGLAccountId": {
            "type": "integer",
            "description": "Offsetting general ledger account identifier. The offsetting general ledger account acts as the expense account. Note, this field is only applicable for `Credit` transaction types.",
            "format": "int32",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecurringTransactionLineMessage"
            },
            "description": "Line items describing how the transaction is to be allocated when it is processed.",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "Total amount of the recurring transaction.",
            "format": "double"
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the recurring transaction.",
            "nullable": true
          },
          "FirstOccurrenceDate": {
            "type": "string",
            "description": "The date the first occurrence of this transaction was processed.",
            "format": "date",
            "nullable": true
          },
          "NextOccurrenceDate": {
            "type": "string",
            "description": "The next date the scheduled transaction will be processed.",
            "format": "date"
          },
          "PostDaysInAdvance": {
            "type": "integer",
            "description": "The number of days ahead of the transaction date the transaction will post on the lease ledger. This setting is used to add the transaction to the ledger ahead of it's due date for visibility. For example, if the `FirstOccurrenceDate` is set to 8/10/2022 and this value is set to 5 then the charge will added to the ledger on 8/5/2022, but will have transaction date of 8/10/2022.",
            "format": "int32"
          },
          "Frequency": {
            "enum": [
              "Monthly",
              "Weekly",
              "Every2Weeks",
              "Quarterly",
              "Yearly",
              "Every2Months",
              "Daily",
              "Every6Months",
              "OneTime"
            ],
            "type": "string",
            "description": "Indicates the frequency at which the recurring transaction is processed."
          },
          "Duration": {
            "enum": [
              "Unspecified",
              "UntilEndOfTerm",
              "SpecificNumber",
              "SpecificDate"
            ],
            "type": "string",
            "description": "Specifies the period of time/occurrences the recurring transaction will be processed. Note, if the `Frequency` field is set to `OneTime` this field should be set to `NULL` as any submitted value will be ignored."
          }
        },
        "additionalProperties": false
      },
      "ReferenceHandler": {
        "type": "object",
        "additionalProperties": false
      },
      "RentMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Rent unique identifier.",
            "format": "int32"
          },
          "LeaseId": {
            "type": "integer",
            "description": "The unique identifier of the lease that the rent will be applied to.",
            "format": "int32"
          },
          "StartDate": {
            "type": "string",
            "description": "Start date of the rent.",
            "format": "date"
          },
          "EndDate": {
            "type": "string",
            "description": "End date of the rent.",
            "format": "date",
            "nullable": true
          },
          "TotalAmount": {
            "type": "number",
            "description": "Total amount of the rent.",
            "format": "double"
          },
          "RentCycle": {
            "enum": [
              "None",
              "Monthly",
              "Weekly",
              "Every2Weeks",
              "Quarterly",
              "Yearly",
              "Every2Months",
              "Daily",
              "Every6Months",
              "OneTime"
            ],
            "type": "string",
            "description": "Determines the frequency at which rent is charged."
          },
          "BackdateCharges": {
            "type": "boolean",
            "description": "Indicates whether backdated charges should be created when creating or editing rents. This field will always return false, even if backdated charges exist."
          },
          "CreatedDateTime": {
            "type": "string",
            "description": "The date and time the rent was created.",
            "format": "date-time",
            "nullable": true
          },
          "CreatedByUserId": {
            "type": "integer",
            "description": "Unique identifier of user that created the rent.",
            "format": "int32",
            "nullable": true
          },
          "LastUpdatedDateTime": {
            "type": "string",
            "description": "Date and time the rent was last updated.",
            "format": "date-time",
            "nullable": true
          },
          "Charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaseRentChargeMessage"
            },
            "description": "A collection of charges associated with the rent.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RentScheduleChargePostMessage": {
        "required": [
          "Amount",
          "GlAccountId",
          "NextDueDate"
        ],
        "type": "object",
        "properties": {
          "GlAccountId": {
            "type": "integer",
            "description": "The general ledger account identifier under which to record the rent charge.",
            "format": "int32"
          },
          "Amount": {
            "type": "number",
            "description": "The amount of the rent charge.",
            "format": "double"
          },
          "Memo": {
            "type": "string",
            "description": "Memo for the rent charge.",
            "nullable": true
          },
          "PostDaysInAdvance": {
            "type": "integer",
            "description": "Number of days in advance of the due date to post the rent charge",
            "format": "int32",
            "nullable": true
          },
          "NextDueDate": {
            "type": "string",
            "description": "Indicates the next date the rent charge will be applied. This date will also be used as the start date for the calculating the `Cycle` of when to apply the next charge. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          }
        },
        "additionalProperties": false
      },
      "RentScheduleChargePutMessage": {
        "required": [
          "Amount",
          "GlAccountId",
          "NextDueDate"
        ],
        "type": "object",
        "properties": {
          "GlAccountId": {
            "type": "integer",
            "description": "The general ledger account identifier under which to record the rent charge.",
            "format": "int32"
          },
          "Amount": {
            "type": "number",
            "description": "The amount of the rent charge.",
            "format": "double"
          },
          "Memo": {
            "type": "string",
            "description": "Memo for the rent charge.",
            "nullable": true
          },
          "PostDaysInAdvance": {
            "type": "integer",
            "description": "Number of days in advance of the due date to post the rent charge",
            "format": "int32",
            "nullable": true
          },
          "NextDueDate": {
            "type": "string",
            "description": "Indicates the next date the rent charge will be applied. This date will also be used as the start date for the calculating the `Cycle` of when to apply the next charge. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          }
        },
        "additionalProperties": false
      },
      "RentSchedulePostMessage": {
        "required": [
          "BackdateCharges",
          "Charges",
          "RentCycle"
        ],
        "type": "object",
        "properties": {
          "StartDate": {
            "type": "string",
            "description": "Indicates the start of the rent schedule. The date must be formatted as YYYY-MM-DD.\r\nIf no rent schedules exist on a lease, this date must match the lease start date.",
            "format": "date",
            "nullable": true
          },
          "RentCycle": {
            "enum": [
              "Monthly",
              "Weekly",
              "Every2Weeks",
              "Quarterly",
              "Yearly",
              "Every2Months",
              "Daily",
              "Every6Months"
            ],
            "type": "string",
            "description": "Indicates the cadence of when rent charges will be applied."
          },
          "BackdateCharges": {
            "type": "boolean",
            "description": "Indicates if charges that should have posted prior to the date of Rent creation should be posted immediately with the appropriate dates."
          },
          "Charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RentScheduleChargePostMessage"
            },
            "description": "List of charges to apply to the lease."
          }
        },
        "additionalProperties": false
      },
      "RentSchedulePutMessage": {
        "required": [
          "BackdateCharges",
          "Charges",
          "RentCycle"
        ],
        "type": "object",
        "properties": {
          "RentCycle": {
            "enum": [
              "Monthly",
              "Weekly",
              "Every2Weeks",
              "Quarterly",
              "Yearly",
              "Every2Months",
              "Daily",
              "Every6Months"
            ],
            "type": "string",
            "description": "Indicates the cadence of when rent charges will be applied."
          },
          "BackdateCharges": {
            "type": "boolean",
            "description": "Indicates if charges that should have posted prior to the date of Rent creation should be posted immediately with the appropriate dates."
          },
          "Charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RentScheduleChargePutMessage"
            },
            "description": "List of charges to apply to the lease."
          }
        },
        "additionalProperties": false
      },
      "RentalApplianceMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Appliance unique identifier.",
            "format": "int32"
          },
          "PropertyId": {
            "type": "integer",
            "description": "Rental property unique identifier that the appliance belongs to.",
            "format": "int32"
          },
          "UnitId": {
            "type": "integer",
            "description": "Rental unit unique identifier that the appliance belongs to.",
            "format": "int32",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "description": "Name of the appliance.",
            "nullable": true
          },
          "Make": {
            "type": "string",
            "description": "Make of the appliance.",
            "nullable": true
          },
          "Model": {
            "type": "string",
            "description": "Model of the appliance.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Description of the appliance.",
            "nullable": true
          },
          "WarrantyEndDate": {
            "type": "string",
            "description": "Warranty end date of the appliance.",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RentalAppliancePostMessage": {
        "required": [
          "Name",
          "PropertyId"
        ],
        "type": "object",
        "properties": {
          "PropertyId": {
            "type": "integer",
            "description": "Rental property unique identifier that the appliance belongs to.",
            "format": "int32"
          },
          "UnitId": {
            "type": "integer",
            "description": "Rental unit unique identifier that the appliance belongs to.",
            "format": "int32",
            "nullable": true
          },
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the appliance. The name cannot exceed 100 characters."
          },
          "Make": {
            "type": "string",
            "description": "The make of the appliance. The make cannot exceed 30 characters.",
            "nullable": true
          },
          "Model": {
            "type": "string",
            "description": "The model of the appliance. The model cannot exceed 30 characters.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "The description of the appliance. The description cannot exceed 500 characters.",
            "nullable": true
          },
          "InstallDate": {
            "type": "string",
            "description": "The install date for the appliance's warranty. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          },
          "WarrantyEndDate": {
            "type": "string",
            "description": "The end date for the appliance's warranty. The warranty's end date cannot be before the installed date, if it exists. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RentalAppliancePutMessage": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "UnitId": {
            "type": "integer",
            "description": "The unit identifier the rental appliance belongs to. Must be within the rental property the appliance is in.",
            "format": "int32",
            "nullable": true
          },
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the rental appliance. The name cannot exceed 100 characters."
          },
          "Make": {
            "type": "string",
            "description": "The make of the rental appliance. The make cannot exceed 30 characters.",
            "nullable": true
          },
          "Model": {
            "type": "string",
            "description": "The model of the rental appliance. The model cannot exceed 30 characters.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "The description of the rental appliance. The description cannot exceed 500 characters.",
            "nullable": true
          },
          "WarrantyEndDate": {
            "type": "string",
            "description": "The end date for the rental appliance's warranty. The warranty's end date cannot be before the installed date, if it exists. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RentalApplianceServiceHistoryMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Appliance service history unique identifier.",
            "format": "int32"
          },
          "ServiceType": {
            "enum": [
              "Installed",
              "Serviced",
              "Uninstalled"
            ],
            "type": "string",
            "description": "Type of service performed."
          },
          "Date": {
            "type": "string",
            "description": "Date of the service.",
            "format": "date",
            "nullable": true
          },
          "Details": {
            "type": "string",
            "description": "Details of the service.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RentalApplianceServiceHistoryPostMessage": {
        "required": [
          "Date",
          "ServiceType"
        ],
        "type": "object",
        "properties": {
          "ServiceType": {
            "enum": [
              "Installed",
              "Serviced",
              "Uninstalled"
            ],
            "type": "string",
            "description": "Specifies the type of service that occured."
          },
          "Date": {
            "type": "string",
            "description": "Date the service was performed. Must be formatted as `YYYY-MM-DD`.",
            "format": "date"
          },
          "Details": {
            "type": "string",
            "description": "The service history details associated with the appliance. The description cannot exceed 100 characters.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RentalFeaturesMessage": {
        "type": "object",
        "properties": {
          "Features": {
            "type": "array",
            "items": {
              "enum": [
                "LaundryRoom",
                "WheelchairAccess",
                "DoorAttendant",
                "Elevator",
                "Parking",
                "StorageUnits",
                "Pool",
                "FitnessCenter",
                "TennisCourt",
                "ClubHouse",
                "Power",
                "ParkingCommercial",
                "SprinklerSystem",
                "DockHighDoorsOrLoadingAvailable",
                "Availability24Hours",
                "AccentWalls",
                "BasketballCourt",
                "Bilingual",
                "BoatDocks",
                "BusinessCenter",
                "CarWashArea",
                "ChildCare",
                "ClubDiscount",
                "ConferenceRoom",
                "Concierge",
                "FreeWeights",
                "FurnishedAvailable",
                "GamingStations",
                "Garage",
                "Gate",
                "GroceryService",
                "GroupExercise",
                "GuestRoom",
                "Housekeeping",
                "HouseSitting",
                "JoggingWalkingTrails",
                "LakeFront",
                "LakeAccess",
                "Library",
                "MealService",
                "MediaRoom",
                "MultiUseRoom",
                "NightPatrol",
                "OnSiteMaintenance",
                "OnSiteManagement",
                "PackageReceiving",
                "PerDiemAccepted",
                "PlayGround",
                "Racquetball",
                "RecRoom",
                "Recycling",
                "Sauna",
                "ShortTermLease",
                "SmokeFree",
                "Spa",
                "Sundeck",
                "Transportation",
                "TVLounge",
                "ValetTrash",
                "Vintage",
                "VolleyballCourt",
                "WirelessInternet",
                "HighSpeedInternet"
              ],
              "type": "string"
            },
            "description": "A list of overall property amenities.",
            "nullable": true
          },
          "IncludedInRent": {
            "type": "array",
            "items": {
              "enum": [
                "Gas",
                "Electric",
                "Trash",
                "Water",
                "HotWater",
                "Telephone",
                "Heat",
                "Cable",
                "AirCon",
                "Satellite",
                "Sewer",
                "BroadbandInternet"
              ],
              "type": "string"
            },
            "description": "A list of amenities that are included in rent.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Rental property amenities."
      },
      "RentalFeaturesPutMessage": {
        "type": "object",
        "properties": {
          "Features": {
            "type": "array",
            "items": {
              "enum": [
                "LaundryRoom",
                "WheelchairAccess",
                "DoorAttendant",
                "Elevator",
                "Parking",
                "StorageUnits",
                "Pool",
                "FitnessCenter",
                "TennisCourt",
                "ClubHouse",
                "Power",
                "ParkingCommercial",
                "SprinklerSystem",
                "DockHighDoorsOrLoadingAvailable",
                "Availability24Hours",
                "AccentWalls",
                "BasketballCourt",
                "Bilingual",
                "BoatDocks",
                "BusinessCenter",
                "CarWashArea",
                "ChildCare",
                "ClubDiscount",
                "ConferenceRoom",
                "Concierge",
                "FreeWeights",
                "FurnishedAvailable",
                "GamingStations",
                "Garage",
                "Gate",
                "GroceryService",
                "GroupExercise",
                "GuestRoom",
                "Housekeeping",
                "HouseSitting",
                "JoggingWalkingTrails",
                "LakeFront",
                "LakeAccess",
                "Library",
                "MealService",
                "MediaRoom",
                "MultiUseRoom",
                "NightPatrol",
                "OnSiteMaintenance",
                "OnSiteManagement",
                "PackageReceiving",
                "PerDiemAccepted",
                "PlayGround",
                "Racquetball",
                "RecRoom",
                "Recycling",
                "Sauna",
                "ShortTermLease",
                "SmokeFree",
                "Spa",
                "Sundeck",
                "Transportation",
                "TVLounge",
                "ValetTrash",
                "Vintage",
                "VolleyballCourt",
                "WirelessInternet",
                "HighSpeedInternet"
              ],
              "type": "string"
            },
            "description": "A list of overall property amenities. Any previously saved values that are not submitted in the update request will be deleted.",
            "nullable": true
          },
          "IncludedInRent": {
            "type": "array",
            "items": {
              "enum": [
                "Gas",
                "Electric",
                "Trash",
                "Water",
                "HotWater",
                "Telephone",
                "Heat",
                "Cable",
                "AirCon",
                "Satellite",
                "Sewer",
                "BroadbandInternet"
              ],
              "type": "string"
            },
            "description": "A list of amenities that are included in rent. Any previously saved values that are not submitted in the update request will be deleted.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RentalImageMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Rental image unique identifier.",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of the image.",
            "nullable": true
          },
          "PhysicalFileName": {
            "type": "string",
            "description": "Physical name of the file on the server.",
            "nullable": true
          },
          "Provider": {
            "enum": [
              "None",
              "YouTube",
              "Vimeo"
            ],
            "type": "string",
            "description": "The provider for the image. If an external provider is not used to host the image, this will be set to `None`."
          },
          "ShowInListing": {
            "type": "boolean",
            "description": "Indicates whether the image will be shown in listings for this rental."
          }
        },
        "additionalProperties": false
      },
      "RentalImagePutMessage": {
        "required": [
          "ShowInListing"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "Description of the image. The description cannot exceed 100 characters.",
            "nullable": true
          },
          "ShowInListing": {
            "type": "boolean",
            "description": "Indicates whether the image will be shown in listings for this rental."
          }
        },
        "additionalProperties": false
      },
      "RentalMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Rental property unique identifier.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the rental property.",
            "nullable": true
          },
          "StructureDescription": {
            "type": "string",
            "description": "Description of the rental property structure.",
            "nullable": true
          },
          "NumberUnits": {
            "type": "integer",
            "description": "Number of units in the rental property.",
            "format": "int32"
          },
          "IsActive": {
            "type": "boolean",
            "description": "Indicates whether the rental property is active within the Buildium platform."
          },
          "OperatingBankAccountId": {
            "type": "integer",
            "description": "The primary bank account that a rental property uses for its income and expenses.",
            "format": "int32"
          },
          "Reserve": {
            "type": "number",
            "description": "A property reserve is cash that a property manager keeps on hand in case of unexpected expenses. It is available cash that isn't disbursed in an owner draw.",
            "format": "double"
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "Address of the rental property.",
            "nullable": true
          },
          "YearBuilt": {
            "type": "integer",
            "description": "Year the rental property was built.",
            "format": "int32",
            "nullable": true
          },
          "RentalType": {
            "enum": [
              "None",
              "Residential",
              "Commercial"
            ],
            "type": "string",
            "description": "Indicates the type of rental property."
          },
          "RentalSubType": {
            "enum": [
              "CondoTownhome",
              "MultiFamily",
              "SingleFamily",
              "Industrial",
              "Office",
              "Retail",
              "ShoppingCenter",
              "Storage",
              "ParkingSpace"
            ],
            "type": "string",
            "description": "Indicates the sub type of the rental property."
          },
          "RentalManager": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PropertyManagerMessage"
              }
            ],
            "description": "Property manager associated with rental property.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a rental property."
      },
      "RentalOwnerContributionDataMessage": {
        "type": "object",
        "properties": {
          "ContributionRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RentalOwnerContributionMessage"
            },
            "description": "The contribution request details associated with the task.",
            "nullable": true
          },
          "ReminderSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RentalOwnerContributionReminderMessage"
              }
            ],
            "description": "The contribution request reminder settings.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RentalOwnerContributionDataPutMessage": {
        "type": "object",
        "properties": {
          "ContributionRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RentalOwnerContributionPutMessage"
            },
            "description": "The contribution request details associated with the task.",
            "nullable": true
          },
          "ReminderSettings": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RentalOwnerContributionReminderPutMessage"
              }
            ],
            "description": "The contribution request reminder settings.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RentalOwnerContributionMessage": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "Description of the contribution.",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "Amount being requested for the contribution.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Rental owner contribution detail"
      },
      "RentalOwnerContributionPutMessage": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "Description of the contribution.",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "Amount being requested for the contribution.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Rental owner contribution detail"
      },
      "RentalOwnerContributionReminderMessage": {
        "type": "object",
        "properties": {
          "IsActive": {
            "type": "boolean",
            "description": "Flag for enabling the reminders."
          },
          "RecurrenceDays": {
            "type": "integer",
            "description": "Interval of days for the reminder to be sent on.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Rental owner contribution reminder settings"
      },
      "RentalOwnerContributionReminderPutMessage": {
        "type": "object",
        "properties": {
          "IsActive": {
            "type": "boolean",
            "description": "Flag for enabling the reminders.",
            "nullable": true
          },
          "RecurrenceDays": {
            "type": "integer",
            "description": "Interval of days for the reminder to be sent on.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Rental owner contribution reminder settings"
      },
      "RentalOwnerMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Rental property owner unique identifier.",
            "format": "int32"
          },
          "IsCompany": {
            "type": "boolean",
            "description": "Indicates whether the rental owner is a company."
          },
          "IsActive": {
            "type": "boolean",
            "description": "Indicates whether the rental owner is active within the Buildium platform."
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the rental owner. Empty if `IsCompany` is `true`.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the rental owner. Empty if `IsCompany` is `true`.",
            "nullable": true
          },
          "PhoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberMessage"
            },
            "description": "Phone numbers associated with the rental owner.",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Email of the rental owner.",
            "nullable": true
          },
          "AlternateEmail": {
            "type": "string",
            "description": "Alternate email of the rental owner.",
            "nullable": true
          },
          "Comment": {
            "type": "string",
            "description": "Comments about the rental owner.",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "Address of the rental owner.",
            "nullable": true
          },
          "ManagementAgreementStartDate": {
            "type": "string",
            "description": "Start date of the management agreement with the rental owner. Null if value is not set.",
            "format": "date",
            "nullable": true
          },
          "ManagementAgreementEndDate": {
            "type": "string",
            "description": "End date of the management agreement with the rental owner. Null if value is not set.",
            "format": "date",
            "nullable": true
          },
          "CompanyName": {
            "type": "string",
            "description": "Company name of the rental owner. Empty if `IsCompany` is `false`.",
            "nullable": true
          },
          "PropertyIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A list of rental property ID's associated with this rental owner.",
            "nullable": true
          },
          "TaxInformation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RentalOwnerTaxInformationMessage"
              }
            ],
            "description": "The tax information of the rental owner.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a rental property owner."
      },
      "RentalOwnerPostMessage": {
        "required": [
          "Address",
          "IsCompany",
          "PropertyIds"
        ],
        "type": "object",
        "properties": {
          "FirstName": {
            "type": "string",
            "description": "First name of the rental owner. Required if `IsCompany` is `false`. The value cannot exceed 127 characters.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the rental owner. Required if `IsCompany` is `false`. The value cannot exceed 127 characters.",
            "nullable": true
          },
          "IsCompany": {
            "type": "boolean",
            "description": "Indicates whether the rental owner should be considered a company or person."
          },
          "CompanyName": {
            "type": "string",
            "description": "Company name of the rental owner. Required if `IsCompany` is `true`. The value cannot exceed 127 characters.",
            "nullable": true
          },
          "DateOfBirth": {
            "type": "string",
            "description": "Date of birth of the rental owner. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          },
          "ManagementAgreementStartDate": {
            "type": "string",
            "description": "Start date of the management agreement with the rental owner. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          },
          "ManagementAgreementEndDate": {
            "type": "string",
            "description": "End date of the management agreement with the rental owner. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Email of the rental owner.",
            "nullable": true
          },
          "AlternateEmail": {
            "type": "string",
            "description": "Alternate email of the rental owner.",
            "nullable": true
          },
          "PhoneNumbers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumbersMessage"
              }
            ],
            "description": "Phone numbers for the rental owner.",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Address of the rental owner."
          },
          "Comment": {
            "type": "string",
            "description": "Comments about the rental owner. The comments cannot exceed 65,535 characters.",
            "nullable": true
          },
          "PropertyIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A list of rental property ID's to associate with this rental owner. At least one property ID must be provided."
          },
          "TaxInformation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaxInformationPostMessage"
              }
            ],
            "description": "The tax information of the rental owner.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a rental property owner."
      },
      "RentalOwnerPutMessage": {
        "required": [
          "Address",
          "IsCompany",
          "PropertyIds"
        ],
        "type": "object",
        "properties": {
          "FirstName": {
            "type": "string",
            "description": "First name of the rental owner. Required if `IsCompany` is `false`. The value cannot exceed 127 characters.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the rental owner. Required if `IsCompany` is `false`. The value cannot exceed 127 characters.",
            "nullable": true
          },
          "IsCompany": {
            "type": "boolean",
            "description": "Indicates whether the rental owner should be considered a company or person."
          },
          "CompanyName": {
            "type": "string",
            "description": "Company name of the rental owner. Required if `IsCompany` is `true`. The value cannot exceed 127 characters.",
            "nullable": true
          },
          "DateOfBirth": {
            "type": "string",
            "description": "Date of birth of the rental owner. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          },
          "ManagementAgreementStartDate": {
            "type": "string",
            "description": "Start date of the management agreement with the rental owner. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          },
          "ManagementAgreementEndDate": {
            "type": "string",
            "description": "End date of the management agreement with the rental owner. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Email of the rental owner.",
            "nullable": true
          },
          "AlternateEmail": {
            "type": "string",
            "description": "Alternate email of the rental owner.",
            "nullable": true
          },
          "PhoneNumbers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumbersMessage"
              }
            ],
            "description": "Phone numbers for the rental owner.",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Address of the rental owner."
          },
          "Comment": {
            "type": "string",
            "description": "Comments about the rental owner. The comments cannot exceed 65,535 characters.",
            "nullable": true
          },
          "PropertyIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A list of rental property ID's to associate with this rental owner. At least one property ID must be provided."
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a rental property owner."
      },
      "RentalOwnerRequestTaskMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Request unique identifier.",
            "format": "int32"
          },
          "Category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskCategoryResponseMessage"
              }
            ],
            "description": "Request category.",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "description": "Request title.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Request description.",
            "nullable": true
          },
          "Property": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PropertyMessage"
              }
            ],
            "description": "The property details associated with the request.",
            "nullable": true
          },
          "UnitId": {
            "type": "integer",
            "description": "The unit unique identifier associated with the request.",
            "format": "int32",
            "nullable": true
          },
          "RequestedByUserEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestedByUserEntityMessage"
              }
            ],
            "description": "The contact details for the rental owner who submitted the request.",
            "nullable": true
          },
          "AssignedToUserId": {
            "type": "integer",
            "description": "The unique identifier of the staff user assigned to the request.",
            "format": "int32",
            "nullable": true
          },
          "TaskStatus": {
            "enum": [
              "New",
              "InProgress",
              "Completed",
              "Deferred",
              "Closed"
            ],
            "type": "string",
            "description": "Request status."
          },
          "Priority": {
            "enum": [
              "Low",
              "Normal",
              "High"
            ],
            "type": "string",
            "description": "Request priority."
          },
          "DueDate": {
            "type": "string",
            "description": "Request due date.",
            "format": "date",
            "nullable": true
          },
          "CreatedDateTime": {
            "type": "string",
            "description": "Date and time the request was created.",
            "format": "date-time",
            "nullable": true
          },
          "LastUpdatedDateTime": {
            "type": "string",
            "description": "Date and time the request was last updated.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RentalOwnerRequestTaskPostMessage": {
        "required": [
          "Priority",
          "RequestedByRentalOwnerId",
          "TaskStatus",
          "Title"
        ],
        "type": "object",
        "properties": {
          "Title": {
            "minLength": 1,
            "type": "string",
            "description": "Request title. The title can not exceed 127 characters."
          },
          "Description": {
            "type": "string",
            "description": "Request description. The description can not exceed 65500 characters.",
            "nullable": true
          },
          "CategoryId": {
            "type": "integer",
            "description": "The category identifier to assign the request.",
            "format": "int32",
            "nullable": true
          },
          "SubCategoryId": {
            "type": "integer",
            "description": "The subcategory identifier to assign the request.",
            "format": "int32",
            "nullable": true
          },
          "PropertyId": {
            "type": "integer",
            "description": "The unique identifier of property associated with the request. The assigned property must be active.",
            "format": "int32",
            "nullable": true
          },
          "UnitId": {
            "type": "integer",
            "description": "The unique identifier of the unit associated with the request. The unit must be associated with the `PropertyId` specified.",
            "format": "int32",
            "nullable": true
          },
          "AssignedToUserId": {
            "type": "integer",
            "description": "The unique identifier of the staff user assigned to the request. The user must be a `Staff` user type.",
            "format": "int32",
            "nullable": true
          },
          "TaskStatus": {
            "enum": [
              "New",
              "InProgress",
              "Completed",
              "Deferred",
              "Closed"
            ],
            "type": "string",
            "description": "Request status."
          },
          "Priority": {
            "enum": [
              "Low",
              "Normal",
              "High"
            ],
            "type": "string",
            "description": "Request priority."
          },
          "DueDate": {
            "type": "string",
            "description": "Request due date. The date must be formatted as YYYY-MM-DD.",
            "format": "date",
            "nullable": true
          },
          "RequestedByRentalOwnerId": {
            "type": "integer",
            "description": "The unique identifier of the rental owner that submitted the request.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "RentalOwnerRequestTaskPutMessage": {
        "required": [
          "Priority",
          "TaskStatus",
          "Title"
        ],
        "type": "object",
        "properties": {
          "Title": {
            "minLength": 1,
            "type": "string",
            "description": "Request title. The title can not exceed 127 characters."
          },
          "Message": {
            "type": "string",
            "description": "Description of the request update. The message can not exceed 65500 characters.",
            "nullable": true
          },
          "CategoryId": {
            "type": "integer",
            "description": "The category identifier to assign the request.",
            "format": "int32",
            "nullable": true
          },
          "SubCategoryId": {
            "type": "integer",
            "description": "The subcategory identifier to assign the request.",
            "format": "int32",
            "nullable": true
          },
          "PropertyId": {
            "type": "integer",
            "description": "The unique identifier of property associated with the request. The assigned property must be active.",
            "format": "int32",
            "nullable": true
          },
          "UnitId": {
            "type": "integer",
            "description": "The unique identifier of the unit associated with the request. The unit must be associated with the `PropertyId` specified.",
            "format": "int32",
            "nullable": true
          },
          "AssignedToUserId": {
            "type": "integer",
            "description": "The unique identifier of the staff user assigned to the request. The user must be a `Staff` user type.",
            "format": "int32",
            "nullable": true
          },
          "TaskStatus": {
            "enum": [
              "New",
              "InProgress",
              "Completed",
              "Deferred",
              "Closed"
            ],
            "type": "string",
            "description": "Request status."
          },
          "Priority": {
            "enum": [
              "Low",
              "Normal",
              "High"
            ],
            "type": "string",
            "description": "Request priority."
          },
          "DueDate": {
            "type": "string",
            "description": "Request due date. The date must be formatted as YYYY-MM-DD.",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RentalOwnerTaxInformationMessage": {
        "type": "object",
        "properties": {
          "TaxPayerIdType": {
            "enum": [
              "SSN",
              "EIN"
            ],
            "type": "string",
            "description": "Indicates the type of tax payer id being specified in the request.",
            "nullable": true
          },
          "TaxPayerId": {
            "type": "string",
            "description": "The tax payer identifier.",
            "nullable": true
          },
          "TaxPayerName1": {
            "type": "string",
            "description": "Tax payer name line 1.",
            "nullable": true
          },
          "TaxPayerName2": {
            "type": "string",
            "description": "Tax payer name line 2.",
            "nullable": true
          },
          "IncludeIn1099": {
            "type": "boolean",
            "description": "Indicates whether the rental owner should be included in 1099 form generation."
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "Address of the tax payer.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Rental owner tax information."
      },
      "RentalPreferredVendorMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Preferred vendor unique identifier.",
            "format": "int32"
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the preferred vendor.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the preferred vendor.",
            "nullable": true
          },
          "CompanyName": {
            "type": "string",
            "description": "Company name of the preferred vendor.",
            "nullable": true
          },
          "PrimaryEmail": {
            "type": "string",
            "description": "Primary email for the preferred vendor.",
            "nullable": true
          },
          "AlternateEmail": {
            "type": "string",
            "description": "Alternate email for the preferred vendor.",
            "nullable": true
          },
          "PhoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberMessage"
            },
            "description": "List of phone numbers of the preferred vendor.",
            "nullable": true
          },
          "Website": {
            "type": "string",
            "description": "Website of the preferred vendor.",
            "nullable": true
          },
          "IsCompany": {
            "type": "boolean",
            "description": "Indicates whether the preferred vendor is a company."
          }
        },
        "additionalProperties": false
      },
      "RentalPreferredVendorPutMessage": {
        "required": [
          "VendorIds"
        ],
        "type": "object",
        "properties": {
          "VendorIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A list of vendor identifiers that will be assigned as preferred vendors to the specified rental property. The submitted list of identifiers will overwrite any existing preferred vendors. Leaving the array empty will remove all vendors from the rental property."
          }
        },
        "additionalProperties": false
      },
      "RentalPropertyPostMessage": {
        "required": [
          "Address",
          "Name",
          "OperatingBankAccountId",
          "RentalSubType"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "Rental property name. The value cannot exceed 127 characters."
          },
          "StructureDescription": {
            "type": "string",
            "description": "Description of the rental property building. The description cannot exceed 65,535 characters.",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Rental property address."
          },
          "RentalSubType": {
            "enum": [
              "CondoTownhome",
              "MultiFamily",
              "SingleFamily",
              "Industrial",
              "Office",
              "Retail",
              "ShoppingCenter",
              "Storage",
              "ParkingSpace"
            ],
            "type": "string",
            "description": "Subtype of the rental property."
          },
          "RentalOwnerIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of existing rental owner ID's that are owners of this property.",
            "nullable": true
          },
          "OperatingBankAccountId": {
            "type": "integer",
            "description": "The primary bank account that a rental property uses for its income and expenses.",
            "format": "int32"
          },
          "PropertyManagerId": {
            "type": "integer",
            "description": "Indicates the staff member identifier that acts as the property manager for this rental property. Note, the staff member must have permissions to this rental to be assigned as the property manager.\r\nSet this field to null if you don't want to assign a staff member to the rental property.",
            "format": "int32",
            "nullable": true
          },
          "Reserve": {
            "type": "number",
            "description": "A property reserve is cash that a property manager keeps on hand in case of unexpected expenses. It is available cash that isn't disbursed in an owner draw.",
            "format": "double",
            "nullable": true
          },
          "YearBuilt": {
            "type": "integer",
            "description": "Indicates the year the rental property was built. If provided this value must be a four digit integer between 1000 and the current year.",
            "format": "int32",
            "nullable": true
          },
          "Units": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RentalPropertyUnitPostMessage"
            },
            "description": "Units of the rental property. If no values are provided, a default unit will be created for the property. The number of units cannot exceed 100. If you need to create more than 100 units for the property, use the <a href=\"#operation/RentalUnitsExternalApi_CreateRentalUnit\">Create a unit</a> endpoint to create the additional units once the property has been created.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RentalPropertyPutMessage": {
        "required": [
          "Address",
          "Name",
          "OperatingBankAccountId",
          "RentalSubType"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "Rental property name. The value cannot exceed 127 characters."
          },
          "StructureDescription": {
            "type": "string",
            "description": "Description of the rental property building. The description cannot exceed 65,535 characters.",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Rental property address"
          },
          "RentalSubType": {
            "enum": [
              "CondoTownhome",
              "MultiFamily",
              "SingleFamily",
              "Industrial",
              "Office",
              "Retail",
              "ShoppingCenter",
              "Storage",
              "ParkingSpace"
            ],
            "type": "string",
            "description": "Subtype of the rental property"
          },
          "OperatingBankAccountId": {
            "type": "integer",
            "description": "The primary bank account that an rental property uses for its income and expenses.",
            "format": "int32"
          },
          "PropertyManagerId": {
            "type": "integer",
            "description": "Indicates the staff member identifier that acts as the property manager for this rental property. Note, the staff member must have permissions to this rental to be assigned as the property manager.\r\nSet this field to null if you don't want to assign a staff member to the rental property.",
            "format": "int32",
            "nullable": true
          },
          "Reserve": {
            "type": "number",
            "description": "A property reserve is cash that a property manager keeps on hand in case of unexpected expenses. It is available cash that isn't disbursed in an owner draw.",
            "format": "double",
            "nullable": true
          },
          "YearBuilt": {
            "type": "integer",
            "description": "Indicates the year the rental property was built. If provided this value must be a four digit integer between 1000 and the current year.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RentalPropertyUnitPostMessage": {
        "required": [
          "Address",
          "UnitNumber"
        ],
        "type": "object",
        "properties": {
          "UnitNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Unit number. Must be unique within the rental property and cannot exceed 30 characters."
          },
          "UnitSize": {
            "type": "integer",
            "description": "Size of the unit.",
            "format": "int32",
            "nullable": true
          },
          "MarketRent": {
            "type": "number",
            "description": "Market rent of the unit. This value is separate from the lease rent and is typically used for rental listings.",
            "format": "double",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Rental unit address."
          },
          "UnitBedrooms": {
            "enum": [
              "NotSet",
              "Studio",
              "OneBed",
              "TwoBed",
              "ThreeBed",
              "FourBed",
              "FiveBed",
              "SixBed",
              "SevenBed",
              "EightBed",
              "NineBedPlus"
            ],
            "type": "string",
            "description": "Number of bedrooms in the unit.",
            "nullable": true
          },
          "UnitBathrooms": {
            "enum": [
              "NotSet",
              "OneBath",
              "OnePointFiveBath",
              "TwoBath",
              "TwoPointFiveBath",
              "ThreeBath",
              "FourBath",
              "FiveBath",
              "FivePlusBath",
              "ThreePointFiveBath",
              "FourPointFiveBath"
            ],
            "type": "string",
            "description": "Number of bathrooms in the unit.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Description of the unit. The description cannot exceed 65,535 characters.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RentalTenantPostMessage": {
        "required": [
          "Address",
          "FirstName",
          "LastName",
          "LeaseId"
        ],
        "type": "object",
        "properties": {
          "LeaseId": {
            "type": "integer",
            "description": "Lease ID to associate the tenant with.",
            "format": "int32"
          },
          "FirstName": {
            "minLength": 1,
            "type": "string",
            "description": "First name of the tenant. The value cannot exceed 127 characters."
          },
          "LastName": {
            "minLength": 1,
            "type": "string",
            "description": "Last name of the tenant. The value cannot exceed 127 characters."
          },
          "Email": {
            "type": "string",
            "description": "Email of the tenant.",
            "nullable": true
          },
          "AlternateEmail": {
            "type": "string",
            "description": "Alternate email of the tenant.",
            "nullable": true
          },
          "PhoneNumbers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumbersMessage"
              }
            ],
            "description": "Phone numbers for the tenant.",
            "nullable": true
          },
          "DateOfBirth": {
            "type": "string",
            "description": "Date of birth for the tenant. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          },
          "Comment": {
            "type": "string",
            "description": "Comments about the tenant. The value cannot exceed 65,535 characters.",
            "nullable": true
          },
          "TaxId": {
            "type": "string",
            "description": "Tax identifier of the tenant. Valid formats are: `12-1234567`, `123-12-1234`, `123456789`",
            "nullable": true
          },
          "EmergencyContact": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveEmergencyContactMessage"
              }
            ],
            "description": "Emergency contact information associated with the tenant.",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Address of the tenant."
          },
          "AlternateAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Alternate address of the tenant.",
            "nullable": true
          },
          "MailingPreference": {
            "enum": [
              "PrimaryAddress",
              "AlternateAddress"
            ],
            "type": "string",
            "description": "Mailing preference for the tenant. If an alternate address exists and this value is not provided then the primary address will be set as the preferred address.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RentalTenantPutMessage": {
        "required": [
          "Address",
          "FirstName",
          "LastName"
        ],
        "type": "object",
        "properties": {
          "FirstName": {
            "minLength": 1,
            "type": "string",
            "description": "First name of the tenant. The value cannot exceed 127 characters."
          },
          "LastName": {
            "minLength": 1,
            "type": "string",
            "description": "Last name of the tenant. The value cannot exceed 127 characters."
          },
          "Email": {
            "type": "string",
            "description": "Email of the tenant.",
            "nullable": true
          },
          "AlternateEmail": {
            "type": "string",
            "description": "Alternate email of the tenant.",
            "nullable": true
          },
          "PhoneNumbers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumbersMessage"
              }
            ],
            "description": "Phone numbers for the tenant.",
            "nullable": true
          },
          "DateOfBirth": {
            "type": "string",
            "description": "Date of birth for the tenant. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          },
          "Comment": {
            "type": "string",
            "description": "Comments about the tenant. The value cannot exceed 65,535 characters.",
            "nullable": true
          },
          "TaxId": {
            "type": "string",
            "description": "Tax identifier of the tenant. Valid formats are: `12-1234567`, `123-12-1234`, `123456789`",
            "nullable": true
          },
          "EmergencyContact": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveEmergencyContactMessage"
              }
            ],
            "description": "Emergency contact information associated with the tenant.",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Address of the tenant."
          },
          "AlternateAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Alternate address of the tenant.",
            "nullable": true
          },
          "MailingPreference": {
            "enum": [
              "PrimaryAddress",
              "AlternateAddress"
            ],
            "type": "string",
            "description": "Mailing preference for the tenant. If an alternate address exists and this value is not provided then the primary address will be set as the preferred address.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RentalTenantRenewalPostMessage": {
        "required": [
          "Address",
          "FirstName",
          "LastName"
        ],
        "type": "object",
        "properties": {
          "FirstName": {
            "minLength": 1,
            "type": "string",
            "description": "First name of the tenant. The value cannot exceed 127 characters."
          },
          "LastName": {
            "minLength": 1,
            "type": "string",
            "description": "Last name of the tenant. The value cannot exceed 127 characters."
          },
          "Email": {
            "type": "string",
            "description": "Email of the tenant.",
            "nullable": true
          },
          "AlternateEmail": {
            "type": "string",
            "description": "Alternate email of the tenant.",
            "nullable": true
          },
          "PhoneNumbers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumbersMessage"
              }
            ],
            "description": "Phone numbers for the tenant.",
            "nullable": true
          },
          "DateOfBirth": {
            "type": "string",
            "description": "Date of birth for the tenant. Must be formatted as `YYYY-MM-DD`.",
            "format": "date",
            "nullable": true
          },
          "Comment": {
            "type": "string",
            "description": "Comments about the tenant. The value cannot exceed 65,535 characters.",
            "nullable": true
          },
          "TaxId": {
            "type": "string",
            "description": "Tax identifier of the tenant. Valid formats are: `12-1234567`, `123-12-1234`, `123456789`",
            "nullable": true
          },
          "EmergencyContact": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveEmergencyContactMessage"
              }
            ],
            "description": "Emergency contact information associated with the tenant.",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Address of the tenant."
          },
          "AlternateAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Alternate address of the tenant.",
            "nullable": true
          },
          "MailingPreference": {
            "enum": [
              "PrimaryAddress",
              "AlternateAddress"
            ],
            "type": "string",
            "description": "Mailing preference for the tenant. If an alternate address exists and this value is not provided then the primary address will be set as the preferred address.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RentalUnitFeaturesMessage": {
        "type": "object",
        "properties": {
          "Features": {
            "type": "array",
            "items": {
              "enum": [
                "CableReady",
                "Microwave",
                "HardwoodFloors",
                "HighSpeedInternet",
                "AirConditioning",
                "Refrigerator",
                "Dishwasher",
                "WalkinClosets",
                "BalconyOrDeckOrPatio",
                "GarageParking",
                "Carport",
                "FencedYard",
                "LaundryRoomOrHookups",
                "Fireplace",
                "CableReadyCommercial",
                "HighSpeedInternetCommercial",
                "AirConditioningCommercial",
                "Heating",
                "OvenOrRange",
                "HeatElectric",
                "HeatGas",
                "HeatOil",
                "PetsAllowed",
                "Balcony",
                "PrivateBalcony",
                "PrivatePatio",
                "Dryer",
                "Heat",
                "WD_Hookup",
                "Washer",
                "AdditionalStorage",
                "Alarm",
                "Carpet",
                "CeilingFan",
                "ControlledAccess",
                "Courtyard",
                "Disposal",
                "DoubleSinkVanity",
                "FramedMirrors",
                "Furnished",
                "Handrails",
                "IndividualClimateControl",
                "IslandKitchen",
                "LinenCloset",
                "Pantry",
                "Satellite",
                "Skylight",
                "TileFlooring",
                "VaultedCeiling",
                "View",
                "VinylFlooring",
                "WheelChair",
                "WindowCoverings",
                "DogFriendly",
                "CatFriendly"
              ],
              "type": "string"
            },
            "description": "A list of unit amenities.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Rental unit amenities."
      },
      "RentalUnitFeaturesPutMessage": {
        "type": "object",
        "properties": {
          "Features": {
            "type": "array",
            "items": {
              "enum": [
                "CableReady",
                "Microwave",
                "HardwoodFloors",
                "HighSpeedInternet",
                "AirConditioning",
                "Refrigerator",
                "Dishwasher",
                "WalkinClosets",
                "BalconyOrDeckOrPatio",
                "GarageParking",
                "Carport",
                "FencedYard",
                "LaundryRoomOrHookups",
                "Fireplace",
                "CableReadyCommercial",
                "HighSpeedInternetCommercial",
                "AirConditioningCommercial",
                "Heating",
                "OvenOrRange",
                "HeatElectric",
                "HeatGas",
                "HeatOil",
                "PetsAllowed",
                "Balcony",
                "PrivateBalcony",
                "PrivatePatio",
                "Dryer",
                "Heat",
                "WD_Hookup",
                "Washer",
                "AdditionalStorage",
                "Alarm",
                "Carpet",
                "CeilingFan",
                "ControlledAccess",
                "Courtyard",
                "Disposal",
                "DoubleSinkVanity",
                "FramedMirrors",
                "Furnished",
                "Handrails",
                "IndividualClimateControl",
                "IslandKitchen",
                "LinenCloset",
                "Pantry",
                "Satellite",
                "Skylight",
                "TileFlooring",
                "VaultedCeiling",
                "View",
                "VinylFlooring",
                "WheelChair",
                "WindowCoverings",
                "DogFriendly",
                "CatFriendly"
              ],
              "type": "string"
            },
            "description": "A list of unit amenities. Any existing amenities associated with the unit that are not submitted in the request will be removed from the unit.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RentalUnitImageMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Rental unit image unique identifier.",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of the image.",
            "nullable": true
          },
          "PhysicalFileName": {
            "type": "string",
            "description": "Physical name of the file on the server.",
            "nullable": true
          },
          "Provider": {
            "enum": [
              "None",
              "YouTube",
              "Vimeo"
            ],
            "type": "string",
            "description": "The provider for the image. If an external provider is not used to host the image, this will be set to `None`."
          },
          "ShowInListing": {
            "type": "boolean",
            "description": "Indicates whether the image will be shown in listings for this unit."
          }
        },
        "additionalProperties": false
      },
      "RentalUnitImagePutMessage": {
        "required": [
          "ShowInListing"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "Description of the image. The description cannot exceed 100 characters.",
            "nullable": true
          },
          "ShowInListing": {
            "type": "boolean",
            "description": "Indicates whether the image will be shown in listings for this unit."
          }
        },
        "additionalProperties": false
      },
      "RentalUnitMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Rental unit unique identifier.",
            "format": "int32"
          },
          "PropertyId": {
            "type": "integer",
            "description": "Rental property unique identifier that the unit belongs to.",
            "format": "int32"
          },
          "BuildingName": {
            "type": "string",
            "description": "Building name that the unit belongs to.",
            "nullable": true
          },
          "UnitNumber": {
            "type": "string",
            "description": "Unit number.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Description of the unit.",
            "nullable": true
          },
          "MarketRent": {
            "type": "number",
            "description": "Market rent of the unit. This value is separate from the lease rent and is typically used for rental listings. Null if no value is set.",
            "format": "double",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "Address of the unit.",
            "nullable": true
          },
          "UnitBedrooms": {
            "enum": [
              "NotSet",
              "Studio",
              "OneBed",
              "TwoBed",
              "ThreeBed",
              "FourBed",
              "FiveBed",
              "SixBed",
              "SevenBed",
              "EightBed",
              "NineBedPlus"
            ],
            "type": "string",
            "description": "Number of bedrooms in the unit. Null if no value is set.",
            "nullable": true
          },
          "UnitBathrooms": {
            "enum": [
              "NotSet",
              "OneBath",
              "OnePointFiveBath",
              "TwoBath",
              "TwoPointFiveBath",
              "ThreeBath",
              "FourBath",
              "FiveBath",
              "FivePlusBath",
              "ThreePointFiveBath",
              "FourPointFiveBath"
            ],
            "type": "string",
            "description": "Number of bathrooms in the unit. Null if no value is set.",
            "nullable": true
          },
          "UnitSize": {
            "type": "integer",
            "description": "Size of the unit. Null if no value is set.",
            "format": "int32",
            "nullable": true
          },
          "IsUnitListed": {
            "type": "boolean",
            "description": "Whether the unit is currently listed for rent.\r\n            \r\nNote: this value is transient and determined at query time based on whether an active listing exists for the unit. Because this value is not persisted in the database, changes to value are not reflected in the last updated date for the unit.",
            "nullable": true
          },
          "IsUnitOccupied": {
            "type": "boolean",
            "description": "Whether the unit is currently being rented by a tenent.\r\n            \r\nNote: this value is transient and determined at query time based on whether an active lease exists for the unit. Because this value is not persisted in the database, changes to value are not reflected in the last updated date for the unit.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This object represents a rental property unit."
      },
      "RentalUnitPutMessage": {
        "required": [
          "Address",
          "UnitNumber"
        ],
        "type": "object",
        "properties": {
          "UnitNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Unit number. Must be unique within the rental property and cannot exceed 30 characters."
          },
          "UnitSize": {
            "type": "integer",
            "description": "Size of the unit.",
            "format": "int32",
            "nullable": true
          },
          "MarketRent": {
            "type": "number",
            "description": "Market rent of the unit. This value is separate from the lease rent and is typically used for rental listings.",
            "format": "double",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Rental unit address."
          },
          "UnitBedrooms": {
            "enum": [
              "NotSet",
              "Studio",
              "OneBed",
              "TwoBed",
              "ThreeBed",
              "FourBed",
              "FiveBed",
              "SixBed",
              "SevenBed",
              "EightBed",
              "NineBedPlus"
            ],
            "type": "string",
            "description": "Number of bedrooms in the unit.",
            "nullable": true
          },
          "UnitBathrooms": {
            "enum": [
              "NotSet",
              "OneBath",
              "OnePointFiveBath",
              "TwoBath",
              "TwoPointFiveBath",
              "ThreeBath",
              "FourBath",
              "FiveBath",
              "FivePlusBath",
              "ThreePointFiveBath",
              "FourPointFiveBath"
            ],
            "type": "string",
            "description": "Number of bathrooms in the unit.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Description of the unit. The description cannot exceed 65,535 characters.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RentalUnitsPostMessage": {
        "required": [
          "Address",
          "PropertyId",
          "UnitNumber"
        ],
        "type": "object",
        "properties": {
          "UnitNumber": {
            "minLength": 1,
            "type": "string",
            "description": "Unit number. Must be unique within the rental property and cannot exceed 30 characters."
          },
          "PropertyId": {
            "type": "integer",
            "description": "Rental property unique identifier that the unit belongs to.",
            "format": "int32"
          },
          "UnitSize": {
            "type": "integer",
            "description": "Size of the unit.",
            "format": "int32",
            "nullable": true
          },
          "MarketRent": {
            "type": "number",
            "description": "Market rent of the unit. This value is separate from the lease rent and is typically used for rental listings.",
            "format": "double",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Rental unit address."
          },
          "UnitBedrooms": {
            "enum": [
              "NotSet",
              "Studio",
              "OneBed",
              "TwoBed",
              "ThreeBed",
              "FourBed",
              "FiveBed",
              "SixBed",
              "SevenBed",
              "EightBed",
              "NineBedPlus"
            ],
            "type": "string",
            "description": "Number of bedrooms in the unit.",
            "nullable": true
          },
          "UnitBathrooms": {
            "enum": [
              "NotSet",
              "OneBath",
              "OnePointFiveBath",
              "TwoBath",
              "TwoPointFiveBath",
              "ThreeBath",
              "FourBath",
              "FiveBath",
              "FivePlusBath",
              "ThreePointFiveBath",
              "FourPointFiveBath"
            ],
            "type": "string",
            "description": "Number of bathrooms in the unit.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Description of the unit. The description cannot exceed 65,535 characters.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RentersInsurancePolicyMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Renters insurance policy unique identifier.",
            "format": "int32"
          },
          "InsuranceCompany": {
            "type": "string",
            "description": "The name of the insurance company that issued the policy.",
            "nullable": true
          },
          "CarrierType": {
            "enum": [
              "Other",
              "MSI"
            ],
            "type": "string",
            "description": "The carrier type for the policy."
          },
          "PolicyIdentifier": {
            "type": "string",
            "description": "The policy identifier.",
            "nullable": true
          },
          "EffectiveDate": {
            "type": "string",
            "description": "The date that the policy becomes effective.",
            "format": "date",
            "nullable": true
          },
          "ExpirationDate": {
            "type": "string",
            "description": "The date that the policy expires.",
            "format": "date",
            "nullable": true
          },
          "CancellationDate": {
            "type": "string",
            "description": "The cancellation date of the policy. This only applies to policies with a `CarrierType` of `MSI`, and is independent of `ExpirationDate`.",
            "format": "date",
            "nullable": true
          },
          "InsuredTenants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InsuredTenantMessage"
            },
            "description": "A collection of tenants associated with this policy.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RequestedByUserEntityMessage": {
        "type": "object",
        "properties": {
          "Type": {
            "enum": [
              "ContactRequestor",
              "RentalOwner",
              "RentalTenant",
              "AssociationOwner"
            ],
            "type": "string",
            "description": "Entity type."
          },
          "Id": {
            "type": "integer",
            "description": "Entity identifier.",
            "format": "int32",
            "nullable": true
          },
          "FirstName": {
            "type": "string",
            "description": "First name.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Last name.",
            "nullable": true
          },
          "IsCompany": {
            "type": "boolean",
            "description": "Indicates whether entity is a company."
          },
          "Href": {
            "type": "string",
            "description": "A link to the entity resource.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Entity information for the user that submitted the task request."
      },
      "ResidentCenterUserMessage": {
        "type": "object",
        "properties": {
          "UnitAgreement": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UnitAgreementMessage"
              }
            ],
            "description": "The user's unit agreement (lease or ownership account).",
            "nullable": true
          },
          "User": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ResidentCenterUserReferenceMessage"
              }
            ],
            "description": "Information about the user.",
            "nullable": true
          },
          "ResidentCenterUserStatus": {
            "enum": [
              "AccountExistsButNoEmailSent",
              "PasswordSent",
              "EmailFailed",
              "SignedIn",
              "Blocked"
            ],
            "type": "string",
            "description": "Resident center status for the user."
          },
          "IsAutoPayEnabled": {
            "type": "boolean",
            "description": "Indicates if the user has an automatic payment scheduled for the future."
          }
        },
        "additionalProperties": false
      },
      "ResidentCenterUserReferenceMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Resident center user unique identifier.",
            "format": "int32"
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the resident center user.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the resident center user.",
            "nullable": true
          },
          "UserType": {
            "enum": [
              "Tenant",
              "AssociationOwner"
            ],
            "type": "string",
            "description": "Indicates if the resident center user is a tenant or association owner"
          },
          "Href": {
            "type": "string",
            "description": "A link to the user resource.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResidentRequestTaskMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Request unique identifier.",
            "format": "int32"
          },
          "Category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskCategoryResponseMessage"
              }
            ],
            "description": "Request category.",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "description": "Request title.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Request description.",
            "nullable": true
          },
          "Property": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PropertyMessage"
              }
            ],
            "description": "The property details associated with the request.",
            "nullable": true
          },
          "UnitId": {
            "type": "integer",
            "description": "The unit unique identifier associated with the request.",
            "format": "int32"
          },
          "UnitAgreement": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UnitAgreementMessage"
              }
            ],
            "description": "The unit agreement unique identifier associated with the request.",
            "nullable": true
          },
          "RequestedByUserEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestedByUserEntityMessage"
              }
            ],
            "description": "The contact details for the resident who submitted the request.",
            "nullable": true
          },
          "AssignedToUserId": {
            "type": "integer",
            "description": "The unique identifier of the staff user assigned to the request.",
            "format": "int32",
            "nullable": true
          },
          "TaskStatus": {
            "enum": [
              "New",
              "InProgress",
              "Completed",
              "Deferred",
              "Closed"
            ],
            "type": "string",
            "description": "Request status."
          },
          "Priority": {
            "enum": [
              "Low",
              "Normal",
              "High"
            ],
            "type": "string",
            "description": "Request priority."
          },
          "DueDate": {
            "type": "string",
            "description": "Request due date.",
            "format": "date",
            "nullable": true
          },
          "CreatedDateTime": {
            "type": "string",
            "description": "The date and time the request was created.",
            "format": "date-time"
          },
          "LastUpdatedDateTime": {
            "type": "string",
            "description": "The date and time the request was last updated.",
            "format": "date-time",
            "nullable": true
          },
          "Appliance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplianceMessage"
              }
            ],
            "description": "Appliance information.",
            "nullable": true
          },
          "IsEntryPermittedByResident": {
            "type": "boolean",
            "description": "Indicates whether the resident has permitted entry. A null value represents no response was provided from the resident.",
            "nullable": true
          },
          "DoesResidentHavePets": {
            "type": "boolean",
            "description": "Indicates whether the resident has pets. A null value represents no response was provided from the resident.",
            "nullable": true
          },
          "ResidentEntryNotes": {
            "type": "string",
            "description": "Notes provided by the resident specific to entering the premises.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResidentRequestTaskPostMessage": {
        "required": [
          "Priority",
          "RequestedByEntityId",
          "TaskStatus",
          "Title",
          "UnitAgreementId"
        ],
        "type": "object",
        "properties": {
          "Title": {
            "minLength": 1,
            "type": "string",
            "description": "Request title. The title can not exceed 127 characters."
          },
          "Description": {
            "type": "string",
            "description": "Request description. The description can not exceed 65500 characters.",
            "nullable": true
          },
          "CategoryId": {
            "type": "integer",
            "description": "The category identifier to assign the request.",
            "format": "int32",
            "nullable": true
          },
          "SubCategoryId": {
            "type": "integer",
            "description": "The subcategory identifier to assign the request.",
            "format": "int32",
            "nullable": true
          },
          "UnitAgreementId": {
            "type": "integer",
            "description": "The unique identifier of the unit agreement associated with the request.",
            "format": "int32"
          },
          "RequestedByEntityId": {
            "type": "integer",
            "description": "The unique identifier of the resident that submitted the request.",
            "format": "int32"
          },
          "AssignedToUserId": {
            "type": "integer",
            "description": "The unique identifier of the staff user assigned to the request. The user must be a `Staff` user type. If not provided, assignment rules in the resident center settings (if configured) will be used for assignment.",
            "format": "int32",
            "nullable": true
          },
          "TaskStatus": {
            "enum": [
              "New",
              "InProgress",
              "Completed",
              "Deferred",
              "Closed"
            ],
            "type": "string",
            "description": "Request status."
          },
          "Priority": {
            "enum": [
              "Low",
              "Normal",
              "High"
            ],
            "type": "string",
            "description": "Request priority."
          },
          "DueDate": {
            "type": "string",
            "description": "Request due date. The date must be formatted as YYYY-MM-DD.",
            "format": "date",
            "nullable": true
          },
          "IsEntryPermittedByResident": {
            "type": "boolean",
            "description": "Indicates whether the resident has explicitly granted permission to enter the unit. Set this value to null if the resident has not provided a response.",
            "nullable": true
          },
          "DoesResidentHavePets": {
            "type": "boolean",
            "description": "Indicates whether the resident has pets. Set this value to null if the resident has not provided a response.",
            "nullable": true
          },
          "ResidentEntryNotes": {
            "type": "string",
            "description": "Notes provided by the resident specific to entering the premises. The value cannot exceed 65535 characters.",
            "nullable": true
          },
          "ShareWithRentalOwners": {
            "type": "boolean",
            "description": "Indicates whether the request is shared with rental owners (applies to requests for rentals only). Defaults to False if not set or for association requests.",
            "nullable": true
          },
          "ShareWithBoardMembers": {
            "type": "boolean",
            "description": "Indicates whether the request is shared with board members (applies to requests for associations only). Defaults to False if not set or for rental requests.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResidentRequestTaskPutMessage": {
        "required": [
          "Priority",
          "TaskStatus",
          "Title"
        ],
        "type": "object",
        "properties": {
          "Title": {
            "minLength": 1,
            "type": "string",
            "description": "Request title. The title can not exceed 127 characters."
          },
          "Message": {
            "type": "string",
            "description": "Description of the request update. The message can not exceed 65500 characters.",
            "nullable": true
          },
          "CategoryId": {
            "type": "integer",
            "description": "The category identifier to assign the request.",
            "format": "int32",
            "nullable": true
          },
          "SubCategoryId": {
            "type": "integer",
            "description": "The subcategory identifier to assign the request.",
            "format": "int32",
            "nullable": true
          },
          "AssignedToUserId": {
            "type": "integer",
            "description": "The unique identifier of the staff user assigned to the request. The user must be a `Staff` user type.",
            "format": "int32",
            "nullable": true
          },
          "TaskStatus": {
            "enum": [
              "New",
              "InProgress",
              "Completed",
              "Deferred",
              "Closed"
            ],
            "type": "string",
            "description": "Request status."
          },
          "Priority": {
            "enum": [
              "Low",
              "Normal",
              "High"
            ],
            "type": "string",
            "description": "Request priority."
          },
          "DueDate": {
            "type": "string",
            "description": "Request due date. The date must be formatted as YYYY-MM-DD.",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RetailCashPropertyMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The property unique identifier.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "The property name.",
            "nullable": true
          },
          "Type": {
            "enum": [
              "Association",
              "Rental"
            ],
            "type": "string",
            "description": "The property type."
          },
          "Href": {
            "type": "string",
            "description": "A link to the property entity resource.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RetailCashUnitMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Unit unique identifier.",
            "format": "int32"
          },
          "UnitNumber": {
            "type": "string",
            "description": "Unit number.",
            "nullable": true
          },
          "Href": {
            "type": "string",
            "description": "A link to the resource endpoint associated with the unit.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RetailCashUserDataMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "User unique identifier.",
            "format": "int32"
          },
          "FirstName": {
            "type": "string",
            "description": "User first name.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "User last name.",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "User email address.",
            "nullable": true
          },
          "Phone": {
            "type": "string",
            "description": "User phone number.",
            "nullable": true
          },
          "UserType": {
            "enum": [
              "Tenant",
              "AssociationOwner"
            ],
            "type": "string",
            "description": "User type."
          },
          "Href": {
            "type": "string",
            "description": "A link to the resource endpoint associated with the user.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RetailCashUserMessage": {
        "type": "object",
        "properties": {
          "UnitAgreement": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UnitAgreementMessage"
              }
            ],
            "description": "The unit agreement associated with the retail cash user.",
            "nullable": true
          },
          "User": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RetailCashUserDataMessage"
              }
            ],
            "description": "The user data associated with the retail cash user.",
            "nullable": true
          },
          "Property": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RetailCashPropertyMessage"
              }
            ],
            "description": "The property associated with the retail cash user.",
            "nullable": true
          },
          "Unit": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RetailCashUnitMessage"
              }
            ],
            "description": "The unit associated with the retail cash user.",
            "nullable": true
          },
          "IsAccountCreated": {
            "type": "boolean",
            "description": "Whether the user has a retail cash account created."
          },
          "IsEvictionPending": {
            "type": "boolean",
            "description": "Whether the unit agreement associated with the retail cash user has a pending eviction."
          },
          "IsEnabled": {
            "type": "boolean",
            "description": "Whether retail cash is enabled for the user."
          }
        },
        "additionalProperties": false
      },
      "RetailCashUserPutMessage": {
        "required": [
          "IsEnabled"
        ],
        "type": "object",
        "properties": {
          "IsEnabled": {
            "type": "boolean",
            "description": "Whether retail cash is enabled for the user. If no retail cash account exists for the user, enabling will create one for the user. You cannot disable a user who does not have an account yet."
          }
        },
        "additionalProperties": false
      },
      "SaveAddressMessage": {
        "required": [
          "AddressLine1",
          "Country",
          "PostalCode"
        ],
        "type": "object",
        "properties": {
          "AddressLine1": {
            "minLength": 1,
            "type": "string",
            "description": "Address line 1 (e.g., street, PO Box, or company name). This value cannot exceed 100 characters."
          },
          "AddressLine2": {
            "type": "string",
            "description": "Address line 2 (e.g., apartment, suite, unit, or building). This value cannot exceed 100 characters.",
            "nullable": true
          },
          "AddressLine3": {
            "type": "string",
            "description": "Address line 3.  This value cannot exceed 100 characters.",
            "nullable": true
          },
          "City": {
            "type": "string",
            "description": "City, district, suburb, town, or village. This value cannot exceed 100 characters.",
            "nullable": true
          },
          "State": {
            "type": "string",
            "description": "State, county, province, or region. When `Country` is set to `UnitedStates` this value must be a valid state name or abbreviation. If the value is `Canada` this value must be a valid Canadian province. For all other countries this field is optional and not validated.",
            "nullable": true
          },
          "PostalCode": {
            "minLength": 1,
            "type": "string",
            "description": "ZIP or postal code."
          },
          "Country": {
            "enum": [
              "Afghanistan",
              "Akrotiri",
              "Albania",
              "Algeria",
              "AmericanSamoa",
              "Andorra",
              "Angola",
              "Anguilla",
              "Antarctica",
              "AntiguaandBarbuda",
              "Argentina",
              "Armenia",
              "Aruba",
              "AshmoreandCartierIslands",
              "Australia",
              "Austria",
              "Azerbaijan",
              "Bahamas",
              "Bahrain",
              "Bangladesh",
              "Barbados",
              "BassasdaIndia",
              "Belarus",
              "Belgium",
              "Belize",
              "Benin",
              "Bermuda",
              "Bhutan",
              "Bolivia",
              "BosniaandHerzegovina",
              "Botswana",
              "BouvetIsland",
              "Brazil",
              "BritishIndianOceanTerritory",
              "BritishVirginIslands",
              "Brunei",
              "Bulgaria",
              "BurkinaFaso",
              "Burma",
              "Burundi",
              "Cambodia",
              "Cameroon",
              "Canada",
              "CapeVerde",
              "CaymanIslands",
              "CentralAfricanRepublic",
              "Chad",
              "Chile",
              "China",
              "ChristmasIsland",
              "ClippertonIsland",
              "CocosIslands",
              "Colombia",
              "Comoros",
              "DemocraticRepublicOfTheCongo",
              "RepublicOfTheCongo",
              "CookIslands",
              "CoralSeaIslands",
              "CostaRica",
              "CotedIvoire",
              "Croatia",
              "Cuba",
              "Cyprus",
              "CzechRepublic",
              "Denmark",
              "Dhekelia",
              "Djibouti",
              "Dominica",
              "DominicanRepublic",
              "Ecuador",
              "Egypt",
              "ElSalvador",
              "EquatorialGuinea",
              "Eritrea",
              "Estonia",
              "Ethiopia",
              "EuropaIsland",
              "FalklandIslands",
              "FaroeIslands",
              "Fiji",
              "Finland",
              "France",
              "FrenchGuiana",
              "FrenchPolynesia",
              "FrenchSouthernandAntarcticLands",
              "Gabon",
              "Gambia",
              "GazaStrip",
              "Georgia",
              "Germany",
              "Ghana",
              "Gibraltar",
              "GloriosoIslands",
              "Greece",
              "Greenland",
              "Grenada",
              "Guadeloupe",
              "Guam",
              "Guatemala",
              "Guernsey",
              "Guinea",
              "GuineaBissau",
              "Guyana",
              "Haiti",
              "HeardIslandandMcDonaldIslands",
              "VaticanCity",
              "Honduras",
              "HongKong",
              "Hungary",
              "Iceland",
              "India",
              "Indonesia",
              "Iran",
              "Iraq",
              "Ireland",
              "IsleofMan",
              "Israel",
              "Italy",
              "Jamaica",
              "JanMayen",
              "Japan",
              "Jersey",
              "Jordan",
              "JuandeNovaIsland",
              "Kazakhstan",
              "Kenya",
              "Kiribati",
              "NorthKorea",
              "SouthKorea",
              "Kuwait",
              "Kyrgyzstan",
              "Laos",
              "Latvia",
              "Lebanon",
              "Lesotho",
              "Liberia",
              "Libya",
              "Liechtenstein",
              "Lithuania",
              "Luxembourg",
              "Macau",
              "Macedonia",
              "Madagascar",
              "Malawi",
              "Malaysia",
              "Maldives",
              "Mali",
              "Malta",
              "MarshallIslands",
              "Martinique",
              "Mauritania",
              "Mauritius",
              "Mayotte",
              "Mexico",
              "Micronesia",
              "Moldova",
              "Monaco",
              "Mongolia",
              "Montserrat",
              "Morocco",
              "Mozambique",
              "Namibia",
              "Nauru",
              "NavassaIsland",
              "Nepal",
              "Netherlands",
              "NetherlandsAntilles",
              "NewCaledonia",
              "NewZealand",
              "Nicaragua",
              "Niger",
              "Nigeria",
              "Niue",
              "NorfolkIsland",
              "NorthernMarianaIslands",
              "Norway",
              "Oman",
              "Pakistan",
              "Palau",
              "Panama",
              "PapuaNewGuinea",
              "ParacelIslands",
              "Paraguay",
              "Peru",
              "Philippines",
              "PitcairnIslands",
              "Poland",
              "Portugal",
              "PuertoRico",
              "Qatar",
              "Reunion",
              "Romania",
              "Russia",
              "Rwanda",
              "SaintHelena",
              "SaintKittsandNevis",
              "SaintLucia",
              "SaintPierreandMiquelon",
              "SaintVincentandtheGrenadines",
              "Samoa",
              "SanMarino",
              "SaoTomeandPrincipe",
              "SaudiArabia",
              "Senegal",
              "SerbiaandMontenegro",
              "Seychelles",
              "SierraLeone",
              "Singapore",
              "Slovakia",
              "Slovenia",
              "SolomonIslands",
              "Somalia",
              "SouthAfrica",
              "SouthGeorgiaandtheSouthSandwichIslands",
              "Spain",
              "SpratlyIslands",
              "SriLanka",
              "Sudan",
              "Suriname",
              "Svalbard",
              "Swaziland",
              "Sweden",
              "Switzerland",
              "Syria",
              "Taiwan",
              "Tajikistan",
              "Tanzania",
              "Thailand",
              "TimorLeste",
              "Togo",
              "Tokelau",
              "Tonga",
              "TrinidadandTobago",
              "TromelinIsland",
              "Tunisia",
              "Turkey",
              "Turkmenistan",
              "TurksandCaicosIslands",
              "Tuvalu",
              "Uganda",
              "Ukraine",
              "UnitedArabEmirates",
              "UnitedKingdom",
              "UnitedStates",
              "Uruguay",
              "Uzbekistan",
              "Vanuatu",
              "Venezuela",
              "Vietnam",
              "VirginIslands",
              "WakeIsland",
              "WallisandFutuna",
              "WestBank",
              "WesternSahara",
              "Yemen",
              "Zambia",
              "Zimbabwe"
            ],
            "type": "string",
            "description": "Country. Must be a valid `Country` enumeration value."
          }
        },
        "additionalProperties": false,
        "description": "Address."
      },
      "SaveEmergencyContactMessage": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "This is an object that represents an emergency contact.",
            "nullable": true
          },
          "RelationshipDescription": {
            "type": "string",
            "description": "Emergency contact relationship to the person.",
            "nullable": true
          },
          "Phone": {
            "type": "string",
            "description": "Emergency contact phone number",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Emergency contact email address.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaskCategoryMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Task category unique identifier.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the task category.",
            "nullable": true
          },
          "IsSystemCategory": {
            "type": "boolean",
            "description": "Indicates whether the category is a system category. Note, system categories can not be edited."
          },
          "SubCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskSubCategoryMessage"
            },
            "description": "Subcategories associated with the task category.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Task category."
      },
      "TaskCategoryPutMessage": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the task category."
          }
        },
        "additionalProperties": false,
        "description": "Task category."
      },
      "TaskCategoryResponseMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Task category unique identifier.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the task category.",
            "nullable": true
          },
          "Href": {
            "type": "string",
            "description": "A link to the task category resource.",
            "nullable": true
          },
          "SubCategory": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskSubCategoryMessage"
              }
            ],
            "description": "Subcategory associated with the task category.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Task category."
      },
      "TaskCategorySaveMessage": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the task category."
          }
        },
        "additionalProperties": false,
        "description": "Task category."
      },
      "TaskHistoryFileMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "File unique identifier.",
            "format": "int32"
          },
          "Title": {
            "type": "string",
            "description": "The title of the file.",
            "nullable": true
          },
          "PhysicalFileName": {
            "type": "string",
            "description": "Physical name of the file on the server.",
            "nullable": true
          },
          "Size": {
            "type": "integer",
            "description": "Size of the file, in kilobytes.",
            "format": "int64"
          },
          "ContentType": {
            "type": "string",
            "description": "MIME type of the file.",
            "nullable": true
          },
          "UploadedDateTime": {
            "type": "string",
            "description": "Date and time the file was uploaded.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "TaskHistoryFileUploadPostMessage": {
        "required": [
          "FileName"
        ],
        "type": "object",
        "properties": {
          "FileName": {
            "minLength": 1,
            "type": "string",
            "description": "Name of file being uploaded. The value can not exceed 255 characters."
          }
        },
        "additionalProperties": false
      },
      "TaskHistoryMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Task history unique identifier.",
            "format": "int32"
          },
          "Priority": {
            "enum": [
              "Low",
              "Normal",
              "High"
            ],
            "type": "string",
            "description": "Task priority."
          },
          "TaskStatus": {
            "enum": [
              "New",
              "InProgress",
              "Completed",
              "Deferred",
              "Closed"
            ],
            "type": "string",
            "description": "Task status."
          },
          "AssignedToUserId": {
            "type": "integer",
            "description": "The unique identifier of the staff user assigned to the task.",
            "format": "int32"
          },
          "DueDate": {
            "type": "string",
            "description": "Task due date.",
            "format": "date",
            "nullable": true
          },
          "Message": {
            "type": "string",
            "description": "Description of the task update.",
            "nullable": true
          },
          "SharedWith": {
            "type": "array",
            "items": {
              "enum": [
                "Residents",
                "RentalOwners",
                "AssociationBoardMembers"
              ],
              "type": "string"
            },
            "description": "Indicates the who the task update was shared with.",
            "nullable": true
          },
          "FileIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of file unique identifiers associated with the task history. These identifiers can be used to retrieve the file metadata and/or download the files.",
            "nullable": true
          },
          "CreatedDateTIme": {
            "type": "string",
            "description": "The date and time the task history was created.",
            "format": "date-time"
          },
          "CreatedByUser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskHistoryUserMessage"
              }
            ],
            "description": "User that created this task history.",
            "nullable": true
          },
          "LastUpdatedDateTime": {
            "type": "string",
            "description": "The date and time the task was last updated.",
            "format": "date-time",
            "nullable": true
          },
          "LastUpdatedByUser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskHistoryUserMessage"
              }
            ],
            "description": "User that last updated this task history.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TaskHistoryPutMessage": {
        "required": [
          "Message"
        ],
        "type": "object",
        "properties": {
          "Message": {
            "minLength": 1,
            "type": "string",
            "description": "A message to include with the task update. The value can not exceed 65500 characters."
          }
        },
        "additionalProperties": false
      },
      "TaskHistoryUserMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "User unique identifier.",
            "format": "int32"
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the user.",
            "nullable": true
          },
          "Href": {
            "type": "string",
            "description": "A link to the resource endpoint associated with the user.",
            "nullable": true
          },
          "UserType": {
            "enum": [
              "Unknown",
              "Tenant",
              "AssociationOwner",
              "AssociationTenant",
              "Staff",
              "Vendor",
              "RentalOwner"
            ],
            "type": "string",
            "description": "Describes the user type of the user",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "User information."
      },
      "TaskSubCategoryMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Task subcategory unique identifier.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the task subcategory.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Task subcategory."
      },
      "TaxInformationPostMessage": {
        "type": "object",
        "properties": {
          "TaxPayerId": {
            "type": "string",
            "description": "The unique identifier of the tax payer. Required if `TaxPayerType` is set. Format the values based on the `TaxPayerIdType` that is specified in the request. `SSN` must be formatted as 123-45-6789. `EIN` must be formatted as 12-3456789.",
            "nullable": true
          },
          "TaxPayerType": {
            "enum": [
              "SSN",
              "EIN"
            ],
            "type": "string",
            "description": "The tax payer type. Required if `TaxPayerId` is set.",
            "nullable": true
          },
          "TaxPayerName1": {
            "type": "string",
            "description": "The tax payer name 1. The value cannot exceed 40 characters.",
            "nullable": true
          },
          "TaxPayerName2": {
            "type": "string",
            "description": "The tax payer name 2. The value cannot exceed 40 characters.",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Address of the tax payer if different from the vendor's primary address.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Tax information."
      },
      "TaxInformationSaveMessage": {
        "required": [
          "IncludeIn1099"
        ],
        "type": "object",
        "properties": {
          "TaxPayerId": {
            "type": "string",
            "description": "The unique identifier of the tax payer. Required if `TaxPayerType` is set. Format the values based on the `TaxPayerIdType` that is specified in the request. `SSN` must be formatted as 123-45-6789. `EIN` must be formatted as 12-3456789.",
            "nullable": true
          },
          "TaxPayerType": {
            "enum": [
              "SSN",
              "EIN"
            ],
            "type": "string",
            "description": "The tax payer type. Required if `TaxPayerId` is set.",
            "nullable": true
          },
          "TaxPayerName1": {
            "type": "string",
            "description": "The tax payer name 1. The value cannot exceed 40 characters.",
            "nullable": true
          },
          "TaxPayerName2": {
            "type": "string",
            "description": "The tax payer name 2. The value cannot exceed 40 characters.",
            "nullable": true
          },
          "IncludeIn1099": {
            "type": "boolean",
            "description": "Indicates whether the vendor should be included in 1099 form generation."
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Address of the tax payer if different from the vendor's primary address.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Tax information."
      },
      "TenantMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Tenant unique identifier.",
            "format": "int32"
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the tenant.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the tenant.",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Email for the tenant.",
            "nullable": true
          },
          "AlternateEmail": {
            "type": "string",
            "description": "Alternate email of the tenant.",
            "nullable": true
          },
          "PhoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberMessage"
            },
            "description": "List of phone numbers for the tenant.",
            "nullable": true
          },
          "CreatedDateTime": {
            "type": "string",
            "description": "Created date of this tenant record.",
            "format": "date-time",
            "nullable": true
          },
          "EmergencyContact": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmergencyContactMessage"
              }
            ],
            "description": "Name of the tenants emergency contact.",
            "nullable": true
          },
          "DateOfBirth": {
            "type": "string",
            "description": "Tenant date of birth.",
            "format": "date",
            "nullable": true
          },
          "SMSOptInStatus": {
            "enum": [
              "NotSet",
              "RequestSent",
              "OptedIn",
              "OptedOut",
              "Converted"
            ],
            "type": "string",
            "description": "Indicates the tenants SMS opt in status. Null if no status exists for the tenant.",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "Address of the tenant.",
            "nullable": true
          },
          "AlternateAddress": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "Alternate address for the tenant.",
            "nullable": true
          },
          "MailingPreference": {
            "enum": [
              "PrimaryAddress",
              "AlternateAddress"
            ],
            "type": "string",
            "description": "Mailing preference for the tenant.",
            "nullable": true
          },
          "Leases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeaseMessage"
            },
            "description": "List of leases, regardless of status, that the tenant is associated with.",
            "nullable": true
          },
          "Comment": {
            "type": "string",
            "description": "Comments about the tenant.",
            "nullable": true
          },
          "TaxId": {
            "type": "string",
            "description": "TaxId of the tenant.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This object represents a rental property tenant."
      },
      "ToDoTaskMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Request unique identifier.",
            "format": "int32"
          },
          "Category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskCategoryResponseMessage"
              }
            ],
            "description": "Request category.",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "description": "Request title.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "Request description.",
            "nullable": true
          },
          "Property": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PropertyMessage"
              }
            ],
            "description": "The property details associated with the request.",
            "nullable": true
          },
          "UnitId": {
            "type": "integer",
            "description": "The unit unique identifier associated with the request.",
            "format": "int32",
            "nullable": true
          },
          "AssignedToUserId": {
            "type": "integer",
            "description": "The unique identifier of the staff user assigned to the request.",
            "format": "int32",
            "nullable": true
          },
          "TaskStatus": {
            "enum": [
              "New",
              "InProgress",
              "Completed",
              "Deferred",
              "Closed"
            ],
            "type": "string",
            "description": "Request status."
          },
          "Priority": {
            "enum": [
              "Low",
              "Normal",
              "High"
            ],
            "type": "string",
            "description": "Request priority."
          },
          "DueDate": {
            "type": "string",
            "description": "Request due date.",
            "format": "date",
            "nullable": true
          },
          "CreatedDateTime": {
            "type": "string",
            "description": "The date and time the request was created.",
            "format": "date-time",
            "nullable": true
          },
          "LastUpdatedDateTime": {
            "type": "string",
            "description": "The date and time the request was last updated.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ToDoTaskPostMessage": {
        "required": [
          "AssignedToUserId",
          "Priority",
          "TaskStatus",
          "Title"
        ],
        "type": "object",
        "properties": {
          "Title": {
            "minLength": 1,
            "type": "string",
            "description": "Request title. The title can not exceed 127 characters."
          },
          "Description": {
            "type": "string",
            "description": "Request description. The description can not exceed 65500 characters.",
            "nullable": true
          },
          "CategoryId": {
            "type": "integer",
            "description": "The category identifier to assign the request.",
            "format": "int32",
            "nullable": true
          },
          "SubCategoryId": {
            "type": "integer",
            "description": "The subcategory identifier to assign the request.",
            "format": "int32",
            "nullable": true
          },
          "PropertyId": {
            "type": "integer",
            "description": "The unique identifier of property associated with the request. The assigned property must be active.",
            "format": "int32",
            "nullable": true
          },
          "UnitId": {
            "type": "integer",
            "description": "The unique identifier of the unit associated with the request. The unit must be associated with the `PropertyId` specified.",
            "format": "int32",
            "nullable": true
          },
          "AssignedToUserId": {
            "type": "integer",
            "description": "The unique identifier of the staff user assigned to the request. The user must be a `Staff` user type.",
            "format": "int32"
          },
          "TaskStatus": {
            "enum": [
              "New",
              "InProgress",
              "Completed",
              "Deferred",
              "Closed"
            ],
            "type": "string",
            "description": "Request status."
          },
          "Priority": {
            "enum": [
              "Low",
              "Normal",
              "High"
            ],
            "type": "string",
            "description": "Request priority."
          },
          "DueDate": {
            "type": "string",
            "description": "Request due date. The date must be formatted as YYYY-MM-DD.",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ToDoTaskPutMessage": {
        "required": [
          "AssignedToUserId",
          "Priority",
          "TaskStatus",
          "Title"
        ],
        "type": "object",
        "properties": {
          "Title": {
            "minLength": 1,
            "type": "string",
            "description": "Request title. The title can not exceed 127 characters."
          },
          "Message": {
            "type": "string",
            "description": "Description of the request update. The message can not exceed 65500 characters.",
            "nullable": true
          },
          "CategoryId": {
            "type": "integer",
            "description": "The category identifier to assign the request.",
            "format": "int32",
            "nullable": true
          },
          "SubCategoryId": {
            "type": "integer",
            "description": "The subcategory identifier to assign the request.",
            "format": "int32",
            "nullable": true
          },
          "PropertyId": {
            "type": "integer",
            "description": "The unique identifier of property associated with the request. The assigned property must be active.",
            "format": "int32",
            "nullable": true
          },
          "UnitId": {
            "type": "integer",
            "description": "The unique identifier of the unit associated with the request. The unit must be associated with the `PropertyId` specified.",
            "format": "int32",
            "nullable": true
          },
          "AssignedToUserId": {
            "type": "integer",
            "description": "The unique identifier of the staff user assigned to the request. The user must be a `Staff` user type.",
            "format": "int32"
          },
          "TaskStatus": {
            "enum": [
              "New",
              "InProgress",
              "Completed",
              "Deferred",
              "Closed"
            ],
            "type": "string",
            "description": "Request status."
          },
          "Priority": {
            "enum": [
              "Low",
              "Normal",
              "High"
            ],
            "type": "string",
            "description": "Request priority."
          },
          "DueDate": {
            "type": "string",
            "description": "Request due date. The date must be formatted as YYYY-MM-DD.",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UndepositedFundsMessage": {
        "type": "object",
        "properties": {
          "GeneralLedgerTransaction": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GLTransactionMessageV1"
              }
            ],
            "description": "General ledger transaction.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UnitAgreementMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Unit agreement unique identifier.",
            "format": "int32"
          },
          "Type": {
            "enum": [
              "NotSet",
              "Lease",
              "OwnershipAccount"
            ],
            "type": "string",
            "description": "The type of unit agreement."
          },
          "Href": {
            "type": "string",
            "description": "A link to the unit agreement resource.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Unit agreement."
      },
      "UnitEntityMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unit unique identifier",
            "format": "int32"
          },
          "Href": {
            "type": "string",
            "description": "A link to the unit resource.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An object that represents a unit for a building."
      },
      "UnsubmittedApplicationMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "The unsubmitted application unique identifier",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "This object represents an unsubmitted application"
      },
      "UserMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "User unique identifier.",
            "format": "int32"
          },
          "UserTypes": {
            "type": "array",
            "items": {
              "enum": [
                "Staff",
                "RentalOwner",
                "Vendor"
              ],
              "type": "string",
              "description": "This enumeration represents a user type."
            },
            "description": "The user type assigned to the user account.",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean",
            "description": "Indicates whether the user account is still active."
          },
          "LastLogin": {
            "type": "string",
            "description": "Date and time the user last logged into Buildium. This value will be `NULL` if the user has never logged into Buildium.",
            "format": "date-time",
            "nullable": true
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the user.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the user.",
            "nullable": true
          },
          "CompanyName": {
            "type": "string",
            "description": "The company name.",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "description": "Email address of the user.",
            "nullable": true
          },
          "AlternateEmail": {
            "type": "string",
            "description": "Alternate email address of user.",
            "nullable": true
          },
          "PhoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberMessage"
            },
            "description": "List of phone numbers for the user.",
            "nullable": true
          },
          "UserRole": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserRoleMessage"
              }
            ],
            "description": "The user role assigned to the user.",
            "nullable": true
          },
          "IsCompany": {
            "type": "boolean",
            "description": "Indicates with the user account represents company versus a person."
          }
        },
        "additionalProperties": false,
        "description": "Buildium user account."
      },
      "UserRoleMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "User role unique identifier.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "User role name.",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "description": "User role description.",
            "nullable": true
          },
          "NumberOfUsers": {
            "type": "integer",
            "description": "Number of users assigned to this user role.",
            "format": "int64"
          }
        },
        "additionalProperties": false,
        "description": "User role."
      },
      "VehicleMessage": {
        "type": "object",
        "properties": {
          "Make": {
            "type": "string",
            "description": "Make of the vehicle.",
            "nullable": true
          },
          "Model": {
            "type": "string",
            "description": "Model of the vehicle.",
            "nullable": true
          },
          "LicensePlateNumber": {
            "type": "string",
            "description": "License plate number of the vehicle.",
            "nullable": true
          },
          "ParkingPassNumber": {
            "type": "string",
            "description": "Parking pass number assigned to the vehicle.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a vehicle."
      },
      "VendorCategoryMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Unique identifier.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name.",
            "nullable": true
          },
          "IsSystemCategory": {
            "type": "boolean",
            "description": "Indicates whether the category is a system category."
          }
        },
        "additionalProperties": false,
        "description": "This object represents a vendor category."
      },
      "VendorCategorySaveMessage": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "minLength": 1,
            "type": "string",
            "description": "The category name."
          }
        },
        "additionalProperties": false
      },
      "VendorCreditLineItemMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Vendor credit line item unique identifier.",
            "format": "int32"
          },
          "GLAccountId": {
            "type": "integer",
            "description": "Unique identifier of the general ledger account associated with the vendor credit.",
            "format": "int32"
          },
          "Amount": {
            "type": "number",
            "description": "Amount of the vendor credit line item.",
            "format": "double"
          },
          "Memo": {
            "type": "string",
            "description": "Memo for the vendor credit line item.",
            "nullable": true
          },
          "AccountingEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountingEntityMessage"
              }
            ],
            "description": "The accounting entity associated with the vendor credit line item.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VendorCreditLineItemPostMessage": {
        "required": [
          "AccountingEntity",
          "Amount",
          "GLAccountId"
        ],
        "type": "object",
        "properties": {
          "GLAccountId": {
            "type": "integer",
            "description": "Unique identifier of the general ledger account associated with the vendor credit. The account cannot be a bank account.",
            "format": "int32"
          },
          "Amount": {
            "type": "number",
            "description": "Amount of the vendor credit line item. Must be between 0.01 and 9999999.99.",
            "format": "double"
          },
          "Memo": {
            "type": "string",
            "description": "Memo for the vendor credit line item. Cannot exceed 240 characters.",
            "nullable": true
          },
          "AccountingEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountingEntitySaveMessage"
              }
            ],
            "description": "The accounting entity associated with the vendor credit line item."
          }
        },
        "additionalProperties": false
      },
      "VendorCreditMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Vendor credit unique identifier.",
            "format": "int32"
          },
          "EntryDate": {
            "type": "string",
            "description": "Date the vendor credit was made.",
            "format": "date"
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "The invoice or reference number that the vendor assigned to the credit.",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the vendor credit, if applicable.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VendorCreditLineItemMessage"
            },
            "description": "A collection of line items associated with the vendor credit.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VendorCreditPostMessage": {
        "required": [
          "EntryDate",
          "Lines"
        ],
        "type": "object",
        "properties": {
          "EntryDate": {
            "type": "string",
            "description": "Date the vendor credit was made. The date must be formatted as YYYY-MM-DD.",
            "format": "date"
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "The invoice or reference number that the vendor assigned to the credit. The value cannot exceed 40 characters.",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the vendor credit, if applicable. The value cannot exceed 40 characters.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VendorCreditLineItemPostMessage"
            },
            "description": "A collection of line items associated with the vendor credit. At least one line item is required and cannot exceed 100 line items."
          }
        },
        "additionalProperties": false
      },
      "VendorInsuranceMessage": {
        "type": "object",
        "properties": {
          "Provider": {
            "type": "string",
            "description": "Insurance provider.",
            "nullable": true
          },
          "PolicyNumber": {
            "type": "string",
            "description": "Insurance policy number.",
            "nullable": true
          },
          "ExpirationDate": {
            "type": "string",
            "description": "Expiration date of the insurance policy. Null if no expiration exists.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Vendor insurance information."
      },
      "VendorInsuranceSaveMessage": {
        "type": "object",
        "properties": {
          "Provider": {
            "type": "string",
            "description": "Insurance provider. This value can not exceed 65 characters.",
            "nullable": true
          },
          "PolicyNumber": {
            "type": "string",
            "description": "Insurance policy number. This value can not exceed 65 characters.",
            "nullable": true
          },
          "ExpirationDate": {
            "type": "string",
            "description": "Expiration date of the insurance policy. The date must be formatted as YYYY-MM-DD.",
            "format": "date",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Vendor insurance information."
      },
      "VendorMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Vendor unique identifier.",
            "format": "int32"
          },
          "IsCompany": {
            "type": "boolean",
            "description": "Indicates whether the vendor is a company."
          },
          "IsActive": {
            "type": "boolean",
            "description": "Indicates whether the vendor is active within the Buildium platform."
          },
          "FirstName": {
            "type": "string",
            "description": "First name of the vendor. Empty if `IsCompany` is `true`.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the vendor. Empty if `IsCompany` is `true`.",
            "nullable": true
          },
          "PrimaryEmail": {
            "type": "string",
            "description": "Primary email for the vendor.",
            "nullable": true
          },
          "AlternateEmail": {
            "type": "string",
            "description": "Alternate email for the vendor.",
            "nullable": true
          },
          "CompanyName": {
            "type": "string",
            "description": "Company name for the vendor. Empty if `IsCompany` is `false`",
            "nullable": true
          },
          "PhoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PhoneNumberMessage"
            },
            "description": "List of phone numbers for the vendor.",
            "nullable": true
          },
          "Website": {
            "type": "string",
            "description": "Website of the vendor.",
            "nullable": true
          },
          "Category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LookupMessage"
              }
            ],
            "description": "Vendor category.",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "Vendor address.",
            "nullable": true
          },
          "VendorInsurance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VendorInsuranceMessage"
              }
            ],
            "description": "Vendor insurance information.",
            "nullable": true
          },
          "Comments": {
            "type": "string",
            "description": "General comments about the vendor.",
            "nullable": true
          },
          "AccountNumber": {
            "type": "string",
            "description": "Vendor account number.",
            "nullable": true
          },
          "ExpenseGLAccountId": {
            "type": "integer",
            "description": "The unique identifier of the default expense general ledger account to associate with the vendor.",
            "format": "int32",
            "nullable": true
          },
          "TaxInformation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VendorTaxInformationMessage"
              }
            ],
            "description": "The tax information of the vendor.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is an object that represents a vendor."
      },
      "VendorPostMessage": {
        "required": [
          "CategoryId",
          "IsCompany"
        ],
        "type": "object",
        "properties": {
          "FirstName": {
            "type": "string",
            "description": "First name of the vendor. Required if `IsCompany` is `false`. The value cannot exceed 127 characters.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the vendor. Required if `IsCompany` is `false`. The value cannot exceed 127 characters.",
            "nullable": true
          },
          "IsCompany": {
            "type": "boolean",
            "description": "Indicates whether the vendor should be considered a company or person."
          },
          "CompanyName": {
            "type": "string",
            "description": "Company name of the vendor. Required if `IsCompany` is `true`. The value cannot exceed 127 characters.",
            "nullable": true
          },
          "PrimaryEmail": {
            "type": "string",
            "description": "Primary email for the vendor.",
            "nullable": true
          },
          "AlternateEmail": {
            "type": "string",
            "description": "Alternate email for the vendor.",
            "nullable": true
          },
          "PhoneNumbers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumbersMessage"
              }
            ],
            "description": "Phone numbers for the vendor.",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Address of the vendor.",
            "nullable": true
          },
          "CategoryId": {
            "type": "integer",
            "description": "The unique identifier of the vendor category.",
            "format": "int32"
          },
          "ExpenseGlAccountId": {
            "type": "integer",
            "description": "The unique identifier of the default expense general ledger account to associate with the vendor.",
            "format": "int32",
            "nullable": true
          },
          "AccountNumber": {
            "type": "string",
            "description": "The account number of the vendor. The value cannot exceed 30 characters.",
            "nullable": true
          },
          "Website": {
            "type": "string",
            "description": "The website of the vendor. The value must be a valid URL. For example `http://www.example.com`. The value cannot exceed 100 characters.",
            "nullable": true
          },
          "VendorInsurance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VendorInsuranceSaveMessage"
              }
            ],
            "description": "The insurance information for the vendor.",
            "nullable": true
          },
          "Comments": {
            "type": "string",
            "description": "Comments about the vendor. The value cannot exceed 65,535 characters.",
            "nullable": true
          },
          "TaxInformation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaxInformationPostMessage"
              }
            ],
            "description": "The tax information of the vendor.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VendorPutMessage": {
        "required": [
          "CategoryId",
          "IsCompany"
        ],
        "type": "object",
        "properties": {
          "FirstName": {
            "type": "string",
            "description": "First name of the vendor. Required if `IsCompany` is `false`. The value cannot exceed 127 characters.",
            "nullable": true
          },
          "LastName": {
            "type": "string",
            "description": "Last name of the vendor. Required if `IsCompany` is `false`. The value cannot exceed 127 characters.",
            "nullable": true
          },
          "IsCompany": {
            "type": "boolean",
            "description": "Indicates whether the vendor should be considered a company or person."
          },
          "CompanyName": {
            "type": "string",
            "description": "Company name of the vendor. Required if `IsCompany` is `true`. The value cannot exceed 127 characters.",
            "nullable": true
          },
          "PrimaryEmail": {
            "type": "string",
            "description": "Primary email for the vendor.",
            "nullable": true
          },
          "AlternateEmail": {
            "type": "string",
            "description": "Alternate email for the vendor.",
            "nullable": true
          },
          "PhoneNumbers": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PhoneNumbersMessage"
              }
            ],
            "description": "Phone numbers for the vendor.",
            "nullable": true
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SaveAddressMessage"
              }
            ],
            "description": "Address of the vendor.",
            "nullable": true
          },
          "CategoryId": {
            "type": "integer",
            "description": "The unique identifier of the vendor category.",
            "format": "int32"
          },
          "ExpenseGlAccountId": {
            "type": "integer",
            "description": "The unique identifier of the default expense general ledger account to associate with the vendor.",
            "format": "int32",
            "nullable": true
          },
          "AccountNumber": {
            "type": "string",
            "description": "The account number of the vendor. The value cannot exceed 30 characters.",
            "nullable": true
          },
          "Website": {
            "type": "string",
            "description": "The website of the vendor. The value must be a valid URL. For example \"http://www.example.com\". The value cannot exceed 100 characters.",
            "nullable": true
          },
          "VendorInsurance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VendorInsuranceSaveMessage"
              }
            ],
            "description": "The insurance information for the vendor.",
            "nullable": true
          },
          "Comments": {
            "type": "string",
            "description": "Comments about the vendor. The value cannot exceed 65,535 characters.",
            "nullable": true
          },
          "TaxInformation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaxInformationSaveMessage"
              }
            ],
            "description": "The tax information of the vendor.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VendorRefundLineMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Vendor refund line item unique identifier.",
            "format": "int32"
          },
          "AccountingEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountingEntityMessage"
              }
            ],
            "description": "The accounting entity associated with the vendor refund line item.",
            "nullable": true
          },
          "GLAccountId": {
            "type": "integer",
            "description": "Unique identifier of the general ledger account associated with the vendor refund.",
            "format": "int32"
          },
          "Amount": {
            "type": "number",
            "description": "Amount of the vendor refund line item.",
            "format": "double"
          },
          "Memo": {
            "type": "string",
            "description": "Memo for the vendor refund line item.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VendorRefundLinePostMessage": {
        "required": [
          "AccountingEntity",
          "Amount",
          "GLAccountId"
        ],
        "type": "object",
        "properties": {
          "GLAccountId": {
            "type": "integer",
            "description": "Unique identifier of the general ledger account associated with the vendor refund.",
            "format": "int32"
          },
          "Amount": {
            "type": "number",
            "description": "Amount of the vendor refund line item.",
            "format": "double"
          },
          "Memo": {
            "type": "string",
            "description": "Memo for the vendor refund line item. Memo cannot exceed 215 characters.",
            "nullable": true
          },
          "AccountingEntity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountingEntitySaveMessage"
              }
            ],
            "description": "The accounting entity associated with the vendor refund line item."
          }
        },
        "additionalProperties": false
      },
      "VendorRefundMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Transaction unique identifier.",
            "format": "int32"
          },
          "EntryDate": {
            "type": "string",
            "description": "Date the refund was recorded.",
            "format": "date"
          },
          "BankAccountId": {
            "type": "integer",
            "description": "Unique identifier of the bank account that the refund was deposited into.",
            "format": "int32"
          },
          "PaymentMethod": {
            "enum": [
              "None",
              "Check",
              "Cash",
              "MoneyOrder",
              "CashierCheck",
              "DirectDeposit",
              "CreditCard",
              "ElectronicPayment",
              "RetailCash"
            ],
            "type": "string",
            "description": "The payment method used for the vendor refund."
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "Reference number for the vendor refund.",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "Memo for the vendor refund.",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VendorRefundLineMessage"
            },
            "description": "A collection of line items associated with the vendor refund.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VendorRefundPostMessage": {
        "required": [
          "EntryDate",
          "Lines",
          "PaymentMethod"
        ],
        "type": "object",
        "properties": {
          "EntryDate": {
            "type": "string",
            "description": "Date the vendor refund was made.",
            "format": "date"
          },
          "BankAccountId": {
            "type": "integer",
            "description": "Unique identifier of the bank account that the refund was deposited into.",
            "format": "int32",
            "nullable": true
          },
          "PaymentMethod": {
            "enum": [
              "Check",
              "Cash",
              "MoneyOrder",
              "CashierCheck",
              "DirectDeposit",
              "CreditCard",
              "ElectronicPayment"
            ],
            "type": "string",
            "description": "The payment method used for the refund."
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "The invoice or reference number that the vendor assigned to the refund. Reference number cannot exceed 45 characters.",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "Memo associated with the vendor refund, if applicable. Memo cannot exceed 65 characters",
            "nullable": true
          },
          "Lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VendorRefundLinePostMessage"
            },
            "description": "A collection of line items associated with the vendor refund."
          }
        },
        "additionalProperties": false
      },
      "VendorTaxInformationMessage": {
        "type": "object",
        "properties": {
          "TaxPayerIdType": {
            "enum": [
              "SSN",
              "EIN"
            ],
            "type": "string",
            "description": "Indicates the type of tax payer id being specified in the request.",
            "nullable": true
          },
          "TaxPayerId": {
            "type": "string",
            "description": "The tax payer identifier.",
            "nullable": true
          },
          "TaxPayerName1": {
            "type": "string",
            "description": "Tax payer name line 1.",
            "nullable": true
          },
          "TaxPayerName2": {
            "type": "string",
            "description": "Tax payer name line 2.",
            "nullable": true
          },
          "IncludeIn1099": {
            "type": "boolean",
            "description": "Indicates whether the vendor should be included in 1099 form generation."
          },
          "Address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AddressMessage"
              }
            ],
            "description": "Address of the tax payer.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Vendor tax information."
      },
      "VendorTransactionMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Transaction unique identifier.",
            "format": "int32"
          },
          "Date": {
            "type": "string",
            "description": "Date of the transaction.",
            "format": "date"
          },
          "TotalAmount": {
            "type": "number",
            "description": "Total amount of the transaction.",
            "format": "double"
          },
          "TransactionType": {
            "enum": [
              "Bill",
              "Check",
              "Charge",
              "Payment",
              "Credit",
              "Refund",
              "ApplyDeposit",
              "ElectronicFundsTransfer",
              "Other",
              "Deposit",
              "GeneralJournalEntry",
              "OwnerContribution",
              "ReversePayment",
              "ReverseElectronicFundsTransfer",
              "VendorCredit",
              "RentalApplicationFeePayment",
              "ReverseRentalApplicationFeePayment",
              "ReverseOwnerContribution",
              "VendorRefund",
              "UnreversedPayment",
              "UnreversedElectronicFundsTransfer",
              "UnreversedOwnerContribution",
              "UnreversedRentalApplicationFeePayment",
              "ReversedEftRefund"
            ],
            "type": "string",
            "description": "Type of transaction."
          },
          "ReferenceNumber": {
            "type": "string",
            "description": "Reference number for the transaction.",
            "nullable": true
          },
          "Memo": {
            "type": "string",
            "description": "Memo for the transaction.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VideoLinkRequestPostMessage": {
        "required": [
          "ShowInListing",
          "VideoUrl"
        ],
        "type": "object",
        "properties": {
          "VideoUrl": {
            "minLength": 1,
            "type": "string",
            "description": "The URL of the video. Only Youtube and Vimeo URLs are supported. The URL cannot exceed 255 characters."
          },
          "ShowInListing": {
            "type": "boolean",
            "description": "Indicates whether the video will be shown in the listing."
          }
        },
        "additionalProperties": false
      },
      "WorkOrderEntryContactMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Contact entity unique identifier.",
            "format": "int32"
          },
          "Resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkOrderEntryContactResourceMessage"
            },
            "description": "List of contact entity resources.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contact entity for the work order."
      },
      "WorkOrderEntryContactResourceMessage": {
        "type": "object",
        "properties": {
          "Type": {
            "enum": [
              "RentalTenant",
              "AssociationOwner",
              "Staff",
              "RentalOwner"
            ],
            "type": "string",
            "description": "Contact entity type."
          },
          "Href": {
            "type": "string",
            "description": "Link to the contact resource.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Work order entry contact."
      },
      "WorkOrderLineItemMessage": {
        "type": "object",
        "properties": {
          "GlAccountId": {
            "type": "integer",
            "description": "General ledger account unique identifier.",
            "format": "int32",
            "nullable": true
          },
          "Quantity": {
            "type": "number",
            "description": "Line item quantity.",
            "format": "double"
          },
          "Memo": {
            "type": "string",
            "description": "Line item memo.",
            "nullable": true
          },
          "UnitPrice": {
            "type": "number",
            "description": "Line item unit price.",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Work order line item."
      },
      "WorkOrderLineItemSaveMessage": {
        "required": [
          "Quantity",
          "UnitPrice"
        ],
        "type": "object",
        "properties": {
          "GlAccountId": {
            "type": "integer",
            "description": "General ledger account unique identifier.",
            "format": "int32",
            "nullable": true
          },
          "Quantity": {
            "type": "number",
            "description": "Line item quantity.",
            "format": "double"
          },
          "Memo": {
            "type": "string",
            "description": "Line item memo.",
            "nullable": true
          },
          "UnitPrice": {
            "type": "number",
            "description": "Line item unit price.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "WorkOrderMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Work order unique identifier.",
            "format": "int32"
          },
          "Task": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkOrderTaskMessage"
              }
            ],
            "description": "Task information related to the work order.",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "description": "Work order title.",
            "nullable": true
          },
          "DueDate": {
            "type": "string",
            "description": "Work order due date.",
            "format": "date",
            "nullable": true
          },
          "Priority": {
            "enum": [
              "Unknown",
              "Low",
              "Normal",
              "High"
            ],
            "type": "string",
            "description": "Work order  priority.",
            "nullable": true
          },
          "Status": {
            "enum": [
              "Unknown",
              "New",
              "InProgress",
              "Completed",
              "Deferred",
              "Closed"
            ],
            "type": "string",
            "description": "Work order status.",
            "nullable": true
          },
          "WorkDetails": {
            "type": "string",
            "description": "Description of the work order.",
            "nullable": true
          },
          "InvoiceNumber": {
            "type": "string",
            "description": "The invoice or reference number that the vendor assigned to the invoice.",
            "nullable": true
          },
          "ChargeableTo": {
            "type": "string",
            "description": "A description of the entity that will be charged for the work.",
            "nullable": true
          },
          "EntryAllowed": {
            "enum": [
              "Unknown",
              "Yes",
              "No"
            ],
            "type": "string",
            "description": "Indicates whether entry has been allowed to the unit."
          },
          "EntryNotes": {
            "type": "string",
            "description": "Notes specific to entering the unit.",
            "nullable": true
          },
          "VendorId": {
            "type": "integer",
            "description": "Vendor unique identifier.",
            "format": "int32"
          },
          "VendorNotes": {
            "type": "string",
            "description": "Notes specific to the vendor.",
            "nullable": true
          },
          "EntryContact": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkOrderEntryContactMessage"
              }
            ],
            "description": "Entry contact for the work order",
            "nullable": true
          },
          "EntryContacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkOrderEntryContactMessage"
            },
            "description": "A collection of all entry contacts for the work order",
            "nullable": true
          },
          "BillTransactionId": {
            "type": "integer",
            "description": "Unique identifier for the bill related to this work order. This field will be `null` if no bill is related to this work order.\r\nIf the BillTransactionIds field is available, please refer to that field instead of this one going forward.",
            "format": "int32",
            "nullable": true
          },
          "BillTransactionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "A collection of unique identifiers for the bills related to this work order.",
            "nullable": true
          },
          "Amount": {
            "type": "number",
            "description": "The total amount of the work order.",
            "format": "double"
          },
          "LineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkOrderLineItemMessage"
            },
            "description": "A collection of line items associated with the work order.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkOrderPostMessage": {
        "required": [
          "EntryAllowed",
          "VendorId"
        ],
        "type": "object",
        "properties": {
          "WorkDetails": {
            "type": "string",
            "description": "Description of the work order. The value cannot exceed 65,535 characters.",
            "nullable": true
          },
          "InvoiceNumber": {
            "type": "string",
            "description": "The invoice or reference number that the vendor assigned to the work order. The value cannot exceed 50 characters.",
            "nullable": true
          },
          "ChargeableTo": {
            "type": "string",
            "description": "A description of the entity that will be charged for the work. The value cannot exceed 100 characters.",
            "nullable": true
          },
          "EntryAllowed": {
            "enum": [
              "Unknown",
              "Yes",
              "No"
            ],
            "type": "string",
            "description": "Indicates whether entry has been allowed to the unit."
          },
          "EntryNotes": {
            "type": "string",
            "description": "Notes specific to entering the unit. The value cannot exceed 65,535 characters.",
            "nullable": true
          },
          "VendorId": {
            "type": "integer",
            "description": "Vendor unique identifier.",
            "format": "int32"
          },
          "VendorNotes": {
            "type": "string",
            "description": "Notes specific to the vendor. The value cannot exceed 65,535 characters.",
            "nullable": true
          },
          "EntryContactId": {
            "type": "integer",
            "description": "Contact user unique identifier. The user type must be one of the following: `RentalTenant`, `AssociationOwner`, `Staff`, `RentalOwner`.",
            "format": "int32",
            "nullable": true
          },
          "EntryContactIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Collection of entry contact user unique identifiers for the work order. The user type of each user in the collection must be one of the following: `RentalTenant`, `AssociationOwner`, `Staff`, `RentalOwner`.",
            "nullable": true
          },
          "LineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkOrderLineItemSaveMessage"
            },
            "description": "Work order line items.",
            "nullable": true
          },
          "TaskId": {
            "type": "integer",
            "description": "Task unique identifier to associate with the work order.",
            "format": "int32",
            "nullable": true
          },
          "Task": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkOrderTaskPostMessage"
              }
            ],
            "description": "Task information to create and associate with the work order.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkOrderPutMessage": {
        "required": [
          "EntryAllowed",
          "VendorId"
        ],
        "type": "object",
        "properties": {
          "WorkDetails": {
            "type": "string",
            "description": "Description of the work order. The value cannot exceed 65,535 characters.",
            "nullable": true
          },
          "InvoiceNumber": {
            "type": "string",
            "description": "The invoice or reference number that the vendor assigned to the invoice. The value cannot exceed 50 characters.",
            "nullable": true
          },
          "ChargeableTo": {
            "type": "string",
            "description": "A description of the entity that will be charged for the work. The value cannot exceed 100 characters.",
            "nullable": true
          },
          "EntryAllowed": {
            "enum": [
              "Unknown",
              "Yes",
              "No"
            ],
            "type": "string",
            "description": "Indicates whether entry has been allowed to the unit."
          },
          "EntryNotes": {
            "type": "string",
            "description": "Notes specific to entering the unit. The value cannot exceed 65,535 characters.",
            "nullable": true
          },
          "VendorId": {
            "type": "integer",
            "description": "Vendor unique identifier.",
            "format": "int32"
          },
          "VendorNotes": {
            "type": "string",
            "description": "Notes specific to the vendor. The value cannot exceed 65,535 characters.",
            "nullable": true
          },
          "EntryContactId": {
            "type": "integer",
            "description": "Contact user unique identifier. The user type must be one of the following: `RentalTenant`, `AssociationOwner`, `Staff`, `RentalOwner`.",
            "format": "int32",
            "nullable": true
          },
          "EntryContactIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Collection of entry contact user unique identifiers for the work order. The user type of each user in the list must be one of the following: `RentalTenant`, `AssociationOwner`, `Staff`, `RentalOwner`.",
            "nullable": true
          },
          "LineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkOrderLineItemSaveMessage"
            },
            "description": "Work order line items. Note that all existing work order line items will be removed and replaced with this list of line items.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkOrderTaskMessage": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Task unique identifier.",
            "format": "int32"
          },
          "Type": {
            "enum": [
              "ContactRequest",
              "ResidentRequest",
              "Todo",
              "RentalOwnerRequest"
            ],
            "type": "string",
            "description": "The task type."
          },
          "UnitId": {
            "type": "integer",
            "description": "The unit unique identifier associated with the task.",
            "format": "int32",
            "nullable": true
          },
          "UnitAgreement": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UnitAgreementMessage"
              }
            ],
            "description": "The unit agreement that is associated with the task.",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "description": "Task title.",
            "nullable": true
          },
          "DueDate": {
            "type": "string",
            "description": "Task due date.",
            "format": "date",
            "nullable": true
          },
          "Priority": {
            "enum": [
              "Low",
              "Normal",
              "High"
            ],
            "type": "string",
            "description": "Task priority."
          },
          "Status": {
            "enum": [
              "New",
              "InProgress",
              "Completed",
              "Deferred",
              "Closed"
            ],
            "type": "string",
            "description": "Task status."
          }
        },
        "additionalProperties": false,
        "description": "Task information related to the work order."
      },
      "WorkOrderTaskPostMessage": {
        "required": [
          "AssignedToUserId",
          "Priority",
          "Status",
          "Title"
        ],
        "type": "object",
        "properties": {
          "Title": {
            "minLength": 1,
            "type": "string",
            "description": "Task title. The title can not exceed 127 characters."
          },
          "DueDate": {
            "type": "string",
            "description": "Task due date. The date must be formatted as YYYY-MM-DD.",
            "format": "date",
            "nullable": true
          },
          "Priority": {
            "enum": [
              "Low",
              "Normal",
              "High"
            ],
            "type": "string",
            "description": "Task priority."
          },
          "Status": {
            "enum": [
              "New",
              "InProgress",
              "Completed",
              "Deferred",
              "Closed"
            ],
            "type": "string",
            "description": "Task status."
          },
          "PropertyId": {
            "type": "integer",
            "description": "The unique identifier of property associated with the request. The assigned property must be active.",
            "format": "int32",
            "nullable": true
          },
          "UnitId": {
            "type": "integer",
            "description": "The unique identifier of the unit associated with the request. The unit must be associated with the `PropertyId` specified.",
            "format": "int32",
            "nullable": true
          },
          "AssignedToUserId": {
            "type": "integer",
            "description": "The unique identifier of the staff user assigned to the request. The user must be a `Staff` user type.",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Task information to create and associate with the work order."
      }
    }
  },
  "tags": [
    {
      "name": "Bank Accounts",
      "description": "Bank account resources provide access to <a href=\"#operation/AccountingExternalApi_GetAllBankAccounts\">bank accounts</a>."
    },
    {
      "name": "Bills",
      "description": "Billing related resources."
    },
    {
      "name": "Budgets",
      "description": "A budget is a tool to plan upcoming income and expenses. The Buildium platform allows you to manage budgets for all rental and association properties."
    },
    {
      "name": "General Ledger",
      "description": "The General ledger tracks all debits and credits for every financial transaction over a period of time."
    },
    {
      "name": "Associations",
      "description": "Association property resources providing access to <a href=\"#operation/AssociationsExternalApi_GetAssociations\">associations</a> and <a href=\"#operation/AssociationsExternalApi_GetAssociationNotes\">association notes</a>."
    },
    {
      "name": "Association Units",
      "description": "Association unit resources providing access to <a href=\"#operation/AssociationsExternalApi_GetAllAssociationUnits\">units</a> and <a href=\"#operation/AssociationsExternalApi_GetAssociationUnitNotes\">unit notes</a>."
    },
    {
      "name": "Appliances",
      "description": "Association appliance resources providing access to <a href=\"#operation/AssociationAppliancesExternalApi_GetAssociationAppliances\">appliances</a> and <a href=\"#operation/AssociationApplianceServiceHistoryExternalApi_GetAllAssociationApplianceServiceHistory\">appliance history</a>."
    },
    {
      "name": "Association Owners",
      "description": "Association owners resources providing access to <a href=\"#operation/AssociationOwnersExternalApi_GetAllAssociationOwners\">owners</a> and <a href=\"#operation/AssociationOwnersExternalApi_GetAssociationOwnerNotes\">owner notes</a>."
    },
    {
      "name": "Ownership Accounts",
      "description": "Association ownership account resources providing access to <a href=\"#operation/OwnershipAccountsExternalApi_GetAllOwnershipAccounts\">ownership accounts</a> and <a href=\"#operation/OwnershipAccountsExternalApi_GetAssociationOwnershipAccountNotes\">ownership account notes</a>."
    },
    {
      "name": "Ownership Account Transactions",
      "description": "Ownership account transaction resources that allow for recording both one-time and recurring transactions such as charges, payments and credits on the ownership account ledger."
    },
    {
      "name": "Association Tenants",
      "description": "Association tenants resources providing access to <a href=\"#operation/AssociationTenantsExternalApi_GetAssociationTenants\">tenants</a> and <a href=\"#operation/AssociationTenantsExternalApi_GetAssociationTenantNotes\">tenant notes</a>."
    },
    {
      "name": "Board Members",
      "description": "Board members make up a governing body that runs the association's affairs. In Buildium board members must be an [Association Owner](#tag/Association-Owners)."
    },
    {
      "name": "Association Meter Readings",
      "description": "Meter reading resources for units on associations."
    },
    {
      "name": "Architectural Requests",
      "description": "Association architectural request resources providing access to <a href=\"#operation/ExternalApiAssociationArchitecturalRequests_GetArchitecturalRequests\">architectural requests</a>"
    },
    {
      "name": "Rental Properties",
      "description": "Rental property resources providing access to <a href=\"#operation/RentalsExternalApi_GetAllRentals\">properties</a> and <a href=\"#operation/RentalsExternalApi_GetRentalNotes\">property notes</a>."
    },
    {
      "name": "Rental Units",
      "description": "Rental property unit resources providing access to <a href=\"#operation/RentalsExternalApi_GetAllRentalUnits\">units</a> and <a href=\"#operation/RentalsExternalApi_GetRentalUnitNotes\">unit notes</a>."
    },
    {
      "name": "Rental Appliances",
      "description": "Rental property appliance resources providing access to <a href=\"#operation/RentalAppliancesExternalApi_GetRentalAppliances\">appliances</a> and <a href=\"#operation/RentalApplianceServiceHistoryExternalApi_GetRentalApplianceServiceHistory\">appliance history</a>."
    },
    {
      "name": "Rental Owners",
      "description": "Rental property owner resources providing access to <a href=\"#operation/RentalsExternalApi_GetRentalOwnersForRental\">owners</a> and <a href=\"#operation/RentalsExternalApi_GetRentalOwnerNotes\">owner notes</a>."
    },
    {
      "name": "Rental Tenants",
      "description": "Rental tenant resources providing access to <a href=\"#operation/TenantsExternalApi_GetAllTenants\">tenant</a> and <a href=\"#operation/TenantsExternalApi_GetAllTenantNotes\">tenant notes</a>."
    },
    {
      "name": "Leases",
      "description": "Lease resources providing access to rental property <a href=\"#operation/LeasesExternalApi_GetLeases\">leases</a>."
    },
    {
      "name": "Lease Transactions",
      "description": "Lease transaction resources that allow for recording both one-time and recurring transactions such as charges, payments and credits on the lease ledger."
    },
    {
      "name": "Listings",
      "description": "Rental listing resources providing access to <a href=\"#operation/ListingsExternalApi_GetListingsAsync\">rental listings</a> and <a href=\"#operation/ListingContactsExternalApi_GetAllListingContacts\">listing contacts</a>."
    },
    {
      "name": "Applicants",
      "description": "Rental applicant resources providing access to <a href=\"#operation/ApplicantsExternalApi_GetApplicants\">applicants</a>, <a href=\"#operation/ApplicantsExternalApi_GetApplicationsForApplicant\">applications</a>, <a href=\"#operation/ApplicantGroupsExternalApi_GetApplicantGroups\">applicant groups</a> and <a href=\"#operation/ApplicantGroupsExternalApi_GetApplicantGroupNotes\">applicant group notes</a>."
    },
    {
      "name": "Application Transactions",
      "description": "Application transaction resources that allow for recording both one-time and recurring transactions such as charges, payments and credits on the applicant ledger."
    },
    {
      "name": "Resident Center",
      "description": "Every Buildium account comes with a free Resident Center, which is also known as the resident portal. The Resident Center allows your residents to view their financial transactions, submit maintenance requests, and make payments online."
    },
    {
      "name": "Tasks",
      "description": "In Buildium, tasks are anything that a staff member needs to do.<br /><br />Adding a task is like adding another item to a to-do list.<br /><br />Some tasks, like maintenance work, are requested by residents or owners. Other tasks, like a walk-through inspection or an apartment showing, are going to be created by staff members."
    },
    {
      "name": "Contact Requests",
      "description": "Contact requests are created by a visitor to your public website, and is typically a task that requires you to follow up with someone by phone, text or email."
    },
    {
      "name": "Rental Owner Requests",
      "description": "Rental owner requests are created by a rental owner through the Buildium rental owner portal. These tasks can also be created by staff within the Buildium web application. When a rental owner request is created, a notification will automatically be sent to the owner to let them know that the task has been created."
    },
    {
      "name": "Resident Requests",
      "description": "Resident requests are created by a tenant or association owner through the resident portal site. These tasks can be created by staff within the Buildium web application. When a resident request is created, a notification will automatically be sent to the resident to let them know that the task has been created."
    },
    {
      "name": "To Do Requests",
      "description": "A to do request is a catchall for anything that has to get done. This task type is created by and can only be viewed by staff users."
    },
    {
      "name": "Work Orders",
      "description": ""
    },
    {
      "name": "Vendors",
      "description": "A vendor represents a person, business, or entity that provides goods and/or services. Vendor categories can be used to organize vendors making them easy to retrieve later."
    },
    {
      "name": "Communications",
      "description": "Communications resources providing access to <a href=\"#operation/AnnouncementsExternalApi_GetAllAnnouncements\">announcements</a> and <a href=\"#operation/PhoneLogsExternalApi_GetPhoneLogs\">phone logs</a>."
    },
    {
      "name": "Files",
      "description": "Buildium offers file and document storage that allows you to upload a variety of content types. Files can be associated to specific entities in Buildium such as properties, units, leases, tenants and more.<br /><br />Files can be assigned categories when they are uploaded in Buildium making them easier to find later on when you want to retrieve them."
    },
    {
      "name": "Property Groups",
      "description": "A property group is a collection of associations and/or rental properties in Buildium. Property groups are typically used as filter criteria to define which properties to return in a query. Common uses include: grouping properties by a region or a business unit."
    },
    {
      "name": "Administration",
      "description": "Administration resources that allow for user management and Buildium account level settings."
    },
    {
      "name": "Client Leads",
      "description": "Client lead resources providing access to leads that come from <a href=\"https://www.allpropertymanagement.com\" target=\"_blank\">All Property Management</a>. These endpoints will only return data if your Buildium account is linked to an account in All Property Management. This data is not available in sandbox accounts."
    },
    {
      "name": "Rental Meter Readings",
      "description": "Meter reading resources for units on rental properties."
    }
  ],
  "x-tagGroups": [
    {
      "name": "Accounting",
      "tags": [
        "Bank Accounts",
        "Bills",
        "Budgets",
        "General Ledger",
        "Credit Card Accounts"
      ]
    },
    {
      "name": "Associations",
      "tags": [
        "Associations",
        "Association Units",
        "Appliances",
        "Association Owners",
        "Ownership Accounts",
        "Ownership Account Transactions",
        "Association Tenants",
        "Board Members",
        "Committees",
        "Association Meter Readings",
        "Architectural Requests"
      ]
    },
    {
      "name": "Rentals",
      "tags": [
        "Rental Properties",
        "Rental Units",
        "Rental Appliances",
        "Rental Owners",
        "Rental Tenants",
        "Leases",
        "Lease Transactions",
        "Listings",
        "Applicants",
        "Application Transactions",
        "Rental Meter Readings"
      ]
    },
    {
      "name": "Residents",
      "tags": [
        "Resident Center"
      ]
    },
    {
      "name": "Maintenance",
      "tags": [
        "Tasks",
        "Contact Requests",
        "Rental Owner Requests",
        "Resident Requests",
        "To Do Requests",
        "Work Orders",
        "Vendors"
      ]
    },
    {
      "name": "Communications",
      "tags": [
        "Communications"
      ]
    },
    {
      "name": "Files",
      "tags": [
        "Files"
      ]
    },
    {
      "name": "Property Groups",
      "tags": [
        "Property Groups"
      ]
    },
    {
      "name": "Administration",
      "tags": [
        "Administration"
      ]
    },
    {
      "name": "All Property Management",
      "tags": [
        "Client Leads"
      ]
    }
  ],
  "schemes": [
    "https"
  ]
}